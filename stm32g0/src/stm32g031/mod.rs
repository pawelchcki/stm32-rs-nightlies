#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 2;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn PVD();
    fn RTC_TAMP();
    fn FLASH();
    fn RCC();
    fn EXTI0_1();
    fn EXTI2_3();
    fn EXTI4_15();
    fn DMA_CHANNEL1();
    fn DMA_CHANNEL2_3();
    fn DMA_CHANNEL4_5_6_7();
    fn ADC_COMP();
    fn TIM1_BRK_UP_TRG_COM();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM14();
    fn TIM16();
    fn TIM17();
    fn I2C1();
    fn I2C2();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3_USART4_LPUART1();
    fn CEC();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 31] = [
    Vector { _handler: WWDG },
    Vector { _handler: PVD },
    Vector { _handler: RTC_TAMP },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0_1 },
    Vector { _handler: EXTI2_3 },
    Vector { _handler: EXTI4_15 },
    Vector { _reserved: 0 },
    Vector {
        _handler: DMA_CHANNEL1,
    },
    Vector {
        _handler: DMA_CHANNEL2_3,
    },
    Vector {
        _handler: DMA_CHANNEL4_5_6_7,
    },
    Vector { _handler: ADC_COMP },
    Vector {
        _handler: TIM1_BRK_UP_TRG_COM,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM14 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM16 },
    Vector { _handler: TIM17 },
    Vector { _handler: I2C1 },
    Vector { _handler: I2C2 },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector {
        _handler: USART3_USART4_LPUART1,
    },
    Vector { _handler: CEC },
];
#[doc = r"Enumeration of all the interrupts"]
#[derive(Copy, Clone, Debug)]
#[repr(u8)]
pub enum Interrupt {
    #[doc = "0 - Window watchdog interrupt"]
    WWDG = 0,
    #[doc = "1 - Power voltage detector interrupt"]
    PVD = 1,
    #[doc = "2 - RTC and TAMP interrupts"]
    RTC_TAMP = 2,
    #[doc = "3 - Flash global interrupt"]
    FLASH = 3,
    #[doc = "4 - RCC global interrupt"]
    RCC = 4,
    #[doc = "5 - EXTI line 0 & 1 interrupt"]
    EXTI0_1 = 5,
    #[doc = "6 - EXTI line 2 & 3 interrupt"]
    EXTI2_3 = 6,
    #[doc = "7 - EXTI line 4 to 15 interrupt"]
    EXTI4_15 = 7,
    #[doc = "9 - DMA channel 1 interrupt"]
    DMA_CHANNEL1 = 9,
    #[doc = "10 - DMA channel 2 & 3 interrupts"]
    DMA_CHANNEL2_3 = 10,
    #[doc = "11 - DMA channel 4, 5, 6 & 7 and DMAMUX"]
    DMA_CHANNEL4_5_6_7 = 11,
    #[doc = "12 - ADC and COMP interrupts"]
    ADC_COMP = 12,
    #[doc = "13 - TIM1 break, update, trigger"]
    TIM1_BRK_UP_TRG_COM = 13,
    #[doc = "14 - TIM1 Capture Compare interrupt"]
    TIM1_CC = 14,
    #[doc = "15 - TIM2 global interrupt"]
    TIM2 = 15,
    #[doc = "16 - TIM3 global interrupt"]
    TIM3 = 16,
    #[doc = "19 - TIM14 global interrupt"]
    TIM14 = 19,
    #[doc = "21 - TIM16 global interrupt"]
    TIM16 = 21,
    #[doc = "22 - TIM17 global interrupt"]
    TIM17 = 22,
    #[doc = "23 - I2C1 global interrupt"]
    I2C1 = 23,
    #[doc = "24 - I2C2 global interrupt"]
    I2C2 = 24,
    #[doc = "25 - SPI1 global interrupt"]
    SPI1 = 25,
    #[doc = "26 - SPI2 global interrupt"]
    SPI2 = 26,
    #[doc = "27 - USART1 global interrupt"]
    USART1 = 27,
    #[doc = "28 - USART2 global interrupt"]
    USART2 = 28,
    #[doc = "29 - USART3 + USART4 + LPUART1"]
    USART3_USART4_LPUART1 = 29,
    #[doc = "30 - CEC global interrupt"]
    CEC = 30,
}
unsafe impl bare_metal::Nr for Interrupt {
    #[inline(always)]
    fn nr(&self) -> u8 {
        *self as u8
    }
}
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[doc = "Independent watchdog"]
pub struct IWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IWDG {}
impl IWDG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iwdg::RegisterBlock {
        0x4000_3000 as *const _
    }
}
impl Deref for IWDG {
    type Target = iwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*IWDG::ptr() }
    }
}
#[doc = "Independent watchdog"]
pub mod iwdg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Key register"]
        pub kr: KR,
        #[doc = "0x04 - Prescaler register"]
        pub pr: PR,
        #[doc = "0x08 - Reload register"]
        pub rlr: RLR,
        #[doc = "0x0c - Status register"]
        pub sr: SR,
        #[doc = "0x10 - Window register"]
        pub winr: WINR,
    }
    #[doc = "Key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [kr](kr) module"]
    pub type KR = crate::Reg<u32, _KR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KR;
    #[doc = "`write(|w| ..)` method takes [kr::W](kr::W) writer structure"]
    impl crate::Writable for KR {}
    #[doc = "Key register"]
    pub mod kr {
        #[doc = "Writer for register KR"]
        pub type W = crate::W<u32, super::KR>;
        #[doc = "Register KR `reset()`'s with value 0"]
        impl crate::ResetValue for super::KR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `KEY`"]
        pub struct KEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Key value (write only, read 0x0000)"]
            #[inline(always)]
            pub fn key(&mut self) -> KEY_W {
                KEY_W { w: self }
            }
        }
    }
    #[doc = "Prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pr](pr) module"]
    pub type PR = crate::Reg<u32, _PR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PR;
    #[doc = "`read()` method returns [pr::R](pr::R) reader structure"]
    impl crate::Readable for PR {}
    #[doc = "`write(|w| ..)` method takes [pr::W](pr::W) writer structure"]
    impl crate::Writable for PR {}
    #[doc = "Prescaler register"]
    pub mod pr {
        #[doc = "Reader of register PR"]
        pub type R = crate::R<u32, super::PR>;
        #[doc = "Writer for register PR"]
        pub type W = crate::W<u32, super::PR>;
        #[doc = "Register PR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PR`"]
        pub type PR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PR`"]
        pub struct PR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Prescaler divider"]
            #[inline(always)]
            pub fn pr(&self) -> PR_R {
                PR_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Prescaler divider"]
            #[inline(always)]
            pub fn pr(&mut self) -> PR_W {
                PR_W { w: self }
            }
        }
    }
    #[doc = "Reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rlr](rlr) module"]
    pub type RLR = crate::Reg<u32, _RLR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RLR;
    #[doc = "`read()` method returns [rlr::R](rlr::R) reader structure"]
    impl crate::Readable for RLR {}
    #[doc = "`write(|w| ..)` method takes [rlr::W](rlr::W) writer structure"]
    impl crate::Writable for RLR {}
    #[doc = "Reload register"]
    pub mod rlr {
        #[doc = "Reader of register RLR"]
        pub type R = crate::R<u32, super::RLR>;
        #[doc = "Writer for register RLR"]
        pub type W = crate::W<u32, super::RLR>;
        #[doc = "Register RLR `reset()`'s with value 0x0fff"]
        impl crate::ResetValue for super::RLR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff
            }
        }
        #[doc = "Reader of field `RL`"]
        pub type RL_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `RL`"]
        pub struct RL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Watchdog counter reload value"]
            #[inline(always)]
            pub fn rl(&self) -> RL_R {
                RL_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Watchdog counter reload value"]
            #[inline(always)]
            pub fn rl(&mut self) -> RL_W {
                RL_W { w: self }
            }
        }
    }
    #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "Status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Reader of field `WVU`"]
        pub type WVU_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RVU`"]
        pub type RVU_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PVU`"]
        pub type PVU_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 2 - Watchdog counter window value update"]
            #[inline(always)]
            pub fn wvu(&self) -> WVU_R {
                WVU_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Watchdog counter reload value update"]
            #[inline(always)]
            pub fn rvu(&self) -> RVU_R {
                RVU_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Watchdog prescaler value update"]
            #[inline(always)]
            pub fn pvu(&self) -> PVU_R {
                PVU_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Window register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [winr](winr) module"]
    pub type WINR = crate::Reg<u32, _WINR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WINR;
    #[doc = "`read()` method returns [winr::R](winr::R) reader structure"]
    impl crate::Readable for WINR {}
    #[doc = "`write(|w| ..)` method takes [winr::W](winr::W) writer structure"]
    impl crate::Writable for WINR {}
    #[doc = "Window register"]
    pub mod winr {
        #[doc = "Reader of register WINR"]
        pub type R = crate::R<u32, super::WINR>;
        #[doc = "Writer for register WINR"]
        pub type W = crate::W<u32, super::WINR>;
        #[doc = "Register WINR `reset()`'s with value 0x0fff"]
        impl crate::ResetValue for super::WINR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff
            }
        }
        #[doc = "Reader of field `WIN`"]
        pub type WIN_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `WIN`"]
        pub struct WIN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WIN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Watchdog counter window value"]
            #[inline(always)]
            pub fn win(&self) -> WIN_R {
                WIN_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Watchdog counter window value"]
            #[inline(always)]
            pub fn win(&mut self) -> WIN_W {
                WIN_W { w: self }
            }
        }
    }
}
#[doc = "System window watchdog"]
pub struct WWDG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WWDG {}
impl WWDG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wwdg::RegisterBlock {
        0x4000_2c00 as *const _
    }
}
impl Deref for WWDG {
    type Target = wwdg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*WWDG::ptr() }
    }
}
#[doc = "System window watchdog"]
pub mod wwdg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control register"]
        pub cr: CR,
        #[doc = "0x04 - Configuration register"]
        pub cfr: CFR,
        #[doc = "0x08 - Status register"]
        pub sr: SR,
    }
    #[doc = "Control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0x7f"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x7f
            }
        }
        #[doc = "Reader of field `WDGA`"]
        pub type WDGA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WDGA`"]
        pub struct WDGA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDGA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `T`"]
        pub type T_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `T`"]
        pub struct T_W<'a> {
            w: &'a mut W,
        }
        impl<'a> T_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Activation bit"]
            #[inline(always)]
            pub fn wdga(&self) -> WDGA_R {
                WDGA_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 0:6 - 7-bit counter (MSB to LSB)"]
            #[inline(always)]
            pub fn t(&self) -> T_R {
                T_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - Activation bit"]
            #[inline(always)]
            pub fn wdga(&mut self) -> WDGA_W {
                WDGA_W { w: self }
            }
            #[doc = "Bits 0:6 - 7-bit counter (MSB to LSB)"]
            #[inline(always)]
            pub fn t(&mut self) -> T_W {
                T_W { w: self }
            }
        }
    }
    #[doc = "Configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfr](cfr) module"]
    pub type CFR = crate::Reg<u32, _CFR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFR;
    #[doc = "`read()` method returns [cfr::R](cfr::R) reader structure"]
    impl crate::Readable for CFR {}
    #[doc = "`write(|w| ..)` method takes [cfr::W](cfr::W) writer structure"]
    impl crate::Writable for CFR {}
    #[doc = "Configuration register"]
    pub mod cfr {
        #[doc = "Reader of register CFR"]
        pub type R = crate::R<u32, super::CFR>;
        #[doc = "Writer for register CFR"]
        pub type W = crate::W<u32, super::CFR>;
        #[doc = "Register CFR `reset()`'s with value 0x7f"]
        impl crate::ResetValue for super::CFR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x7f
            }
        }
        #[doc = "Reader of field `WDGTB`"]
        pub type WDGTB_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WDGTB`"]
        pub struct WDGTB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDGTB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 11)) | (((value as u32) & 0x07) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `EWI`"]
        pub type EWI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWI`"]
        pub struct EWI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `W`"]
        pub type W_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `W`"]
        pub struct W_W<'a> {
            w: &'a mut W,
        }
        impl<'a> W_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 11:13 - Timer base"]
            #[inline(always)]
            pub fn wdgtb(&self) -> WDGTB_R {
                WDGTB_R::new(((self.bits >> 11) & 0x07) as u8)
            }
            #[doc = "Bit 9 - Early wakeup interrupt"]
            #[inline(always)]
            pub fn ewi(&self) -> EWI_R {
                EWI_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bits 0:6 - 7-bit window value"]
            #[inline(always)]
            pub fn w(&self) -> W_R {
                W_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 11:13 - Timer base"]
            #[inline(always)]
            pub fn wdgtb(&mut self) -> WDGTB_W {
                WDGTB_W { w: self }
            }
            #[doc = "Bit 9 - Early wakeup interrupt"]
            #[inline(always)]
            pub fn ewi(&mut self) -> EWI_W {
                EWI_W { w: self }
            }
            #[doc = "Bits 0:6 - 7-bit window value"]
            #[inline(always)]
            pub fn w(&mut self) -> W_W {
                W_W { w: self }
            }
        }
    }
    #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "Status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EWIF`"]
        pub type EWIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWIF`"]
        pub struct EWIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Early wakeup interrupt flag"]
            #[inline(always)]
            pub fn ewif(&self) -> EWIF_R {
                EWIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Early wakeup interrupt flag"]
            #[inline(always)]
            pub fn ewif(&mut self) -> EWIF_W {
                EWIF_W { w: self }
            }
        }
    }
}
#[doc = "Flash"]
pub struct FLASH {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FLASH {}
impl FLASH {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const flash::RegisterBlock {
        0x4002_2000 as *const _
    }
}
impl Deref for FLASH {
    type Target = flash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FLASH::ptr() }
    }
}
#[doc = "Flash"]
pub mod flash {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Access control register"]
        pub acr: ACR,
        _reserved1: [u8; 4usize],
        #[doc = "0x08 - Flash key register"]
        pub keyr: KEYR,
        #[doc = "0x0c - Option byte key register"]
        pub optkeyr: OPTKEYR,
        #[doc = "0x10 - Status register"]
        pub sr: SR,
        #[doc = "0x14 - Flash control register"]
        pub cr: CR,
        #[doc = "0x18 - Flash ECC register"]
        pub eccr: ECCR,
        _reserved6: [u8; 4usize],
        #[doc = "0x20 - Flash option register"]
        pub optr: OPTR,
        #[doc = "0x24 - Flash PCROP zone A Start address register"]
        pub pcrop1asr: PCROP1ASR,
        #[doc = "0x28 - Flash PCROP zone A End address register"]
        pub pcrop1aer: PCROP1AER,
        #[doc = "0x2c - Flash WRP area A address register"]
        pub wrp1ar: WRP1AR,
        #[doc = "0x30 - Flash WRP area B address register"]
        pub wrp1br: WRP1BR,
        #[doc = "0x34 - Flash PCROP zone B Start address register"]
        pub pcrop1bsr: PCROP1BSR,
        #[doc = "0x38 - Flash PCROP zone B End address register"]
        pub pcrop1ber: PCROP1BER,
        _reserved13: [u8; 68usize],
        #[doc = "0x80 - Flash Security register"]
        pub secr: SECR,
    }
    #[doc = "Access control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [acr](acr) module"]
    pub type ACR = crate::Reg<u32, _ACR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ACR;
    #[doc = "`read()` method returns [acr::R](acr::R) reader structure"]
    impl crate::Readable for ACR {}
    #[doc = "`write(|w| ..)` method takes [acr::W](acr::W) writer structure"]
    impl crate::Writable for ACR {}
    #[doc = "Access control register"]
    pub mod acr {
        #[doc = "Reader of register ACR"]
        pub type R = crate::R<u32, super::ACR>;
        #[doc = "Writer for register ACR"]
        pub type W = crate::W<u32, super::ACR>;
        #[doc = "Register ACR `reset()`'s with value 0x0600"]
        impl crate::ResetValue for super::ACR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0600
            }
        }
        #[doc = "Reader of field `LATENCY`"]
        pub type LATENCY_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LATENCY`"]
        pub struct LATENCY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LATENCY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        #[doc = "Reader of field `PRFTEN`"]
        pub type PRFTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PRFTEN`"]
        pub struct PRFTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRFTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ICEN`"]
        pub type ICEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ICEN`"]
        pub struct ICEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ICEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ICRST`"]
        pub type ICRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ICRST`"]
        pub struct ICRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ICRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `EMPTY`"]
        pub type EMPTY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EMPTY`"]
        pub struct EMPTY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EMPTY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_SWEN`"]
        pub type DBG_SWEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_SWEN`"]
        pub struct DBG_SWEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_SWEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Latency"]
            #[inline(always)]
            pub fn latency(&self) -> LATENCY_R {
                LATENCY_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bit 8 - Prefetch enable"]
            #[inline(always)]
            pub fn prften(&self) -> PRFTEN_R {
                PRFTEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Instruction cache enable"]
            #[inline(always)]
            pub fn icen(&self) -> ICEN_R {
                ICEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Instruction cache reset"]
            #[inline(always)]
            pub fn icrst(&self) -> ICRST_R {
                ICRST_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Flash User area empty"]
            #[inline(always)]
            pub fn empty(&self) -> EMPTY_R {
                EMPTY_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Debug access software enable"]
            #[inline(always)]
            pub fn dbg_swen(&self) -> DBG_SWEN_R {
                DBG_SWEN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Latency"]
            #[inline(always)]
            pub fn latency(&mut self) -> LATENCY_W {
                LATENCY_W { w: self }
            }
            #[doc = "Bit 8 - Prefetch enable"]
            #[inline(always)]
            pub fn prften(&mut self) -> PRFTEN_W {
                PRFTEN_W { w: self }
            }
            #[doc = "Bit 9 - Instruction cache enable"]
            #[inline(always)]
            pub fn icen(&mut self) -> ICEN_W {
                ICEN_W { w: self }
            }
            #[doc = "Bit 11 - Instruction cache reset"]
            #[inline(always)]
            pub fn icrst(&mut self) -> ICRST_W {
                ICRST_W { w: self }
            }
            #[doc = "Bit 16 - Flash User area empty"]
            #[inline(always)]
            pub fn empty(&mut self) -> EMPTY_W {
                EMPTY_W { w: self }
            }
            #[doc = "Bit 18 - Debug access software enable"]
            #[inline(always)]
            pub fn dbg_swen(&mut self) -> DBG_SWEN_W {
                DBG_SWEN_W { w: self }
            }
        }
    }
    #[doc = "Flash key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [keyr](keyr) module"]
    pub type KEYR = crate::Reg<u32, _KEYR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _KEYR;
    #[doc = "`write(|w| ..)` method takes [keyr::W](keyr::W) writer structure"]
    impl crate::Writable for KEYR {}
    #[doc = "Flash key register"]
    pub mod keyr {
        #[doc = "Writer for register KEYR"]
        pub type W = crate::W<u32, super::KEYR>;
        #[doc = "Register KEYR `reset()`'s with value 0"]
        impl crate::ResetValue for super::KEYR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `KEYR`"]
        pub struct KEYR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEYR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - KEYR"]
            #[inline(always)]
            pub fn keyr(&mut self) -> KEYR_W {
                KEYR_W { w: self }
            }
        }
    }
    #[doc = "Option byte key register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [optkeyr](optkeyr) module"]
    pub type OPTKEYR = crate::Reg<u32, _OPTKEYR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OPTKEYR;
    #[doc = "`write(|w| ..)` method takes [optkeyr::W](optkeyr::W) writer structure"]
    impl crate::Writable for OPTKEYR {}
    #[doc = "Option byte key register"]
    pub mod optkeyr {
        #[doc = "Writer for register OPTKEYR"]
        pub type W = crate::W<u32, super::OPTKEYR>;
        #[doc = "Register OPTKEYR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OPTKEYR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `OPTKEYR`"]
        pub struct OPTKEYR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTKEYR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Option byte key"]
            #[inline(always)]
            pub fn optkeyr(&mut self) -> OPTKEYR_W {
                OPTKEYR_W { w: self }
            }
        }
    }
    #[doc = "Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "Status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `EOP`"]
        pub type EOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOP`"]
        pub struct EOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `OPERR`"]
        pub type OPERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPERR`"]
        pub struct OPERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PROGERR`"]
        pub type PROGERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PROGERR`"]
        pub struct PROGERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PROGERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `WRPERR`"]
        pub type WRPERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WRPERR`"]
        pub struct WRPERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WRPERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PGAERR`"]
        pub type PGAERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PGAERR`"]
        pub struct PGAERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PGAERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `SIZERR`"]
        pub type SIZERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SIZERR`"]
        pub struct SIZERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIZERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `PGSERR`"]
        pub type PGSERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PGSERR`"]
        pub struct PGSERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PGSERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `MISERR`"]
        pub type MISERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MISERR`"]
        pub struct MISERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MISERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `FASTERR`"]
        pub type FASTERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FASTERR`"]
        pub struct FASTERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FASTERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `RDERR`"]
        pub type RDERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RDERR`"]
        pub struct RDERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RDERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `OPTVERR`"]
        pub type OPTVERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPTVERR`"]
        pub struct OPTVERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTVERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `BSY`"]
        pub type BSY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BSY`"]
        pub struct BSY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BSY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CFGBSY`"]
        pub type CFGBSY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CFGBSY`"]
        pub struct CFGBSY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CFGBSY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - End of operation"]
            #[inline(always)]
            pub fn eop(&self) -> EOP_R {
                EOP_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Operation error"]
            #[inline(always)]
            pub fn operr(&self) -> OPERR_R {
                OPERR_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Programming error"]
            #[inline(always)]
            pub fn progerr(&self) -> PROGERR_R {
                PROGERR_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Write protected error"]
            #[inline(always)]
            pub fn wrperr(&self) -> WRPERR_R {
                WRPERR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Programming alignment error"]
            #[inline(always)]
            pub fn pgaerr(&self) -> PGAERR_R {
                PGAERR_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Size error"]
            #[inline(always)]
            pub fn sizerr(&self) -> SIZERR_R {
                SIZERR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Programming sequence error"]
            #[inline(always)]
            pub fn pgserr(&self) -> PGSERR_R {
                PGSERR_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Fast programming data miss error"]
            #[inline(always)]
            pub fn miserr(&self) -> MISERR_R {
                MISERR_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Fast programming error"]
            #[inline(always)]
            pub fn fasterr(&self) -> FASTERR_R {
                FASTERR_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 14 - PCROP read error"]
            #[inline(always)]
            pub fn rderr(&self) -> RDERR_R {
                RDERR_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Option and Engineering bits loading validity error"]
            #[inline(always)]
            pub fn optverr(&self) -> OPTVERR_R {
                OPTVERR_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Busy"]
            #[inline(always)]
            pub fn bsy(&self) -> BSY_R {
                BSY_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Programming or erase configuration busy."]
            #[inline(always)]
            pub fn cfgbsy(&self) -> CFGBSY_R {
                CFGBSY_R::new(((self.bits >> 18) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - End of operation"]
            #[inline(always)]
            pub fn eop(&mut self) -> EOP_W {
                EOP_W { w: self }
            }
            #[doc = "Bit 1 - Operation error"]
            #[inline(always)]
            pub fn operr(&mut self) -> OPERR_W {
                OPERR_W { w: self }
            }
            #[doc = "Bit 3 - Programming error"]
            #[inline(always)]
            pub fn progerr(&mut self) -> PROGERR_W {
                PROGERR_W { w: self }
            }
            #[doc = "Bit 4 - Write protected error"]
            #[inline(always)]
            pub fn wrperr(&mut self) -> WRPERR_W {
                WRPERR_W { w: self }
            }
            #[doc = "Bit 5 - Programming alignment error"]
            #[inline(always)]
            pub fn pgaerr(&mut self) -> PGAERR_W {
                PGAERR_W { w: self }
            }
            #[doc = "Bit 6 - Size error"]
            #[inline(always)]
            pub fn sizerr(&mut self) -> SIZERR_W {
                SIZERR_W { w: self }
            }
            #[doc = "Bit 7 - Programming sequence error"]
            #[inline(always)]
            pub fn pgserr(&mut self) -> PGSERR_W {
                PGSERR_W { w: self }
            }
            #[doc = "Bit 8 - Fast programming data miss error"]
            #[inline(always)]
            pub fn miserr(&mut self) -> MISERR_W {
                MISERR_W { w: self }
            }
            #[doc = "Bit 9 - Fast programming error"]
            #[inline(always)]
            pub fn fasterr(&mut self) -> FASTERR_W {
                FASTERR_W { w: self }
            }
            #[doc = "Bit 14 - PCROP read error"]
            #[inline(always)]
            pub fn rderr(&mut self) -> RDERR_W {
                RDERR_W { w: self }
            }
            #[doc = "Bit 15 - Option and Engineering bits loading validity error"]
            #[inline(always)]
            pub fn optverr(&mut self) -> OPTVERR_W {
                OPTVERR_W { w: self }
            }
            #[doc = "Bit 16 - Busy"]
            #[inline(always)]
            pub fn bsy(&mut self) -> BSY_W {
                BSY_W { w: self }
            }
            #[doc = "Bit 18 - Programming or erase configuration busy."]
            #[inline(always)]
            pub fn cfgbsy(&mut self) -> CFGBSY_W {
                CFGBSY_W { w: self }
            }
        }
    }
    #[doc = "Flash control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Flash control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0xc000_0000"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xc000_0000
            }
        }
        #[doc = "Reader of field `PG`"]
        pub type PG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PG`"]
        pub struct PG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `PER`"]
        pub type PER_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PER`"]
        pub struct PER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `MER`"]
        pub type MER_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MER`"]
        pub struct MER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PNB`"]
        pub type PNB_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PNB`"]
        pub struct PNB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PNB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x3f << 3)) | (((value as u32) & 0x3f) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `STRT`"]
        pub type STRT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STRT`"]
        pub struct STRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OPTSTRT`"]
        pub type OPTSTRT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPTSTRT`"]
        pub struct OPTSTRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTSTRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `FSTPG`"]
        pub type FSTPG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FSTPG`"]
        pub struct FSTPG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FSTPG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `EOPIE`"]
        pub type EOPIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOPIE`"]
        pub struct EOPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOPIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `ERRIE`"]
        pub type ERRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ERRIE`"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `RDERRIE`"]
        pub type RDERRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RDERRIE`"]
        pub struct RDERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RDERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `OBL_LAUNCH`"]
        pub type OBL_LAUNCH_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OBL_LAUNCH`"]
        pub struct OBL_LAUNCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBL_LAUNCH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `SEC_PROT`"]
        pub type SEC_PROT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SEC_PROT`"]
        pub struct SEC_PROT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SEC_PROT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `OPTLOCK`"]
        pub type OPTLOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPTLOCK`"]
        pub struct OPTLOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPTLOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `LOCK`"]
        pub type LOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LOCK`"]
        pub struct LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Programming"]
            #[inline(always)]
            pub fn pg(&self) -> PG_R {
                PG_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Page erase"]
            #[inline(always)]
            pub fn per(&self) -> PER_R {
                PER_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Mass erase"]
            #[inline(always)]
            pub fn mer(&self) -> MER_R {
                MER_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 3:8 - Page number"]
            #[inline(always)]
            pub fn pnb(&self) -> PNB_R {
                PNB_R::new(((self.bits >> 3) & 0x3f) as u8)
            }
            #[doc = "Bit 16 - Start"]
            #[inline(always)]
            pub fn strt(&self) -> STRT_R {
                STRT_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Options modification start"]
            #[inline(always)]
            pub fn optstrt(&self) -> OPTSTRT_R {
                OPTSTRT_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Fast programming"]
            #[inline(always)]
            pub fn fstpg(&self) -> FSTPG_R {
                FSTPG_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 24 - End of operation interrupt enable"]
            #[inline(always)]
            pub fn eopie(&self) -> EOPIE_R {
                EOPIE_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - PCROP read error interrupt enable"]
            #[inline(always)]
            pub fn rderrie(&self) -> RDERRIE_R {
                RDERRIE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Force the option byte loading"]
            #[inline(always)]
            pub fn obl_launch(&self) -> OBL_LAUNCH_R {
                OBL_LAUNCH_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Securable memory area protection enable"]
            #[inline(always)]
            pub fn sec_prot(&self) -> SEC_PROT_R {
                SEC_PROT_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Options Lock"]
            #[inline(always)]
            pub fn optlock(&self) -> OPTLOCK_R {
                OPTLOCK_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - FLASH_CR Lock"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Programming"]
            #[inline(always)]
            pub fn pg(&mut self) -> PG_W {
                PG_W { w: self }
            }
            #[doc = "Bit 1 - Page erase"]
            #[inline(always)]
            pub fn per(&mut self) -> PER_W {
                PER_W { w: self }
            }
            #[doc = "Bit 2 - Mass erase"]
            #[inline(always)]
            pub fn mer(&mut self) -> MER_W {
                MER_W { w: self }
            }
            #[doc = "Bits 3:8 - Page number"]
            #[inline(always)]
            pub fn pnb(&mut self) -> PNB_W {
                PNB_W { w: self }
            }
            #[doc = "Bit 16 - Start"]
            #[inline(always)]
            pub fn strt(&mut self) -> STRT_W {
                STRT_W { w: self }
            }
            #[doc = "Bit 17 - Options modification start"]
            #[inline(always)]
            pub fn optstrt(&mut self) -> OPTSTRT_W {
                OPTSTRT_W { w: self }
            }
            #[doc = "Bit 18 - Fast programming"]
            #[inline(always)]
            pub fn fstpg(&mut self) -> FSTPG_W {
                FSTPG_W { w: self }
            }
            #[doc = "Bit 24 - End of operation interrupt enable"]
            #[inline(always)]
            pub fn eopie(&mut self) -> EOPIE_W {
                EOPIE_W { w: self }
            }
            #[doc = "Bit 25 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bit 26 - PCROP read error interrupt enable"]
            #[inline(always)]
            pub fn rderrie(&mut self) -> RDERRIE_W {
                RDERRIE_W { w: self }
            }
            #[doc = "Bit 27 - Force the option byte loading"]
            #[inline(always)]
            pub fn obl_launch(&mut self) -> OBL_LAUNCH_W {
                OBL_LAUNCH_W { w: self }
            }
            #[doc = "Bit 28 - Securable memory area protection enable"]
            #[inline(always)]
            pub fn sec_prot(&mut self) -> SEC_PROT_W {
                SEC_PROT_W { w: self }
            }
            #[doc = "Bit 30 - Options Lock"]
            #[inline(always)]
            pub fn optlock(&mut self) -> OPTLOCK_W {
                OPTLOCK_W { w: self }
            }
            #[doc = "Bit 31 - FLASH_CR Lock"]
            #[inline(always)]
            pub fn lock(&mut self) -> LOCK_W {
                LOCK_W { w: self }
            }
        }
    }
    #[doc = "Flash ECC register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [eccr](eccr) module"]
    pub type ECCR = crate::Reg<u32, _ECCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ECCR;
    #[doc = "`read()` method returns [eccr::R](eccr::R) reader structure"]
    impl crate::Readable for ECCR {}
    #[doc = "`write(|w| ..)` method takes [eccr::W](eccr::W) writer structure"]
    impl crate::Writable for ECCR {}
    #[doc = "Flash ECC register"]
    pub mod eccr {
        #[doc = "Reader of register ECCR"]
        pub type R = crate::R<u32, super::ECCR>;
        #[doc = "Writer for register ECCR"]
        pub type W = crate::W<u32, super::ECCR>;
        #[doc = "Register ECCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ECCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADDR_ECC`"]
        pub type ADDR_ECC_R = crate::R<u16, u16>;
        #[doc = "Reader of field `SYSF_ECC`"]
        pub type SYSF_ECC_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ECCIE`"]
        pub type ECCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ECCIE`"]
        pub struct ECCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `ECCC`"]
        pub type ECCC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ECCC`"]
        pub struct ECCC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECCC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `ECCD`"]
        pub type ECCD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ECCD`"]
        pub struct ECCD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECCD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:13 - ECC fail address"]
            #[inline(always)]
            pub fn addr_ecc(&self) -> ADDR_ECC_R {
                ADDR_ECC_R::new((self.bits & 0x3fff) as u16)
            }
            #[doc = "Bit 20 - ECC fail for Corrected ECC Error or Double ECC Error in info block"]
            #[inline(always)]
            pub fn sysf_ecc(&self) -> SYSF_ECC_R {
                SYSF_ECC_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 24 - ECC correction interrupt enable"]
            #[inline(always)]
            pub fn eccie(&self) -> ECCIE_R {
                ECCIE_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 30 - ECC correction"]
            #[inline(always)]
            pub fn eccc(&self) -> ECCC_R {
                ECCC_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - ECC detection"]
            #[inline(always)]
            pub fn eccd(&self) -> ECCD_R {
                ECCD_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - ECC correction interrupt enable"]
            #[inline(always)]
            pub fn eccie(&mut self) -> ECCIE_W {
                ECCIE_W { w: self }
            }
            #[doc = "Bit 30 - ECC correction"]
            #[inline(always)]
            pub fn eccc(&mut self) -> ECCC_W {
                ECCC_W { w: self }
            }
            #[doc = "Bit 31 - ECC detection"]
            #[inline(always)]
            pub fn eccd(&mut self) -> ECCD_W {
                ECCD_W { w: self }
            }
        }
    }
    #[doc = "Flash option register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [optr](optr) module"]
    pub type OPTR = crate::Reg<u32, _OPTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OPTR;
    #[doc = "`read()` method returns [optr::R](optr::R) reader structure"]
    impl crate::Readable for OPTR {}
    #[doc = "`write(|w| ..)` method takes [optr::W](optr::W) writer structure"]
    impl crate::Writable for OPTR {}
    #[doc = "Flash option register"]
    pub mod optr {
        #[doc = "Reader of register OPTR"]
        pub type R = crate::R<u32, super::OPTR>;
        #[doc = "Writer for register OPTR"]
        pub type W = crate::W<u32, super::OPTR>;
        #[doc = "Register OPTR `reset()`'s with value 0xf000_0000"]
        impl crate::ResetValue for super::OPTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xf000_0000
            }
        }
        #[doc = "Reader of field `RDP`"]
        pub type RDP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RDP`"]
        pub struct RDP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RDP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `BOREN`"]
        pub type BOREN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOREN`"]
        pub struct BOREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `BORF_LEV`"]
        pub type BORF_LEV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BORF_LEV`"]
        pub struct BORF_LEV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BORF_LEV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `BORR_LEV`"]
        pub type BORR_LEV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BORR_LEV`"]
        pub struct BORR_LEV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BORR_LEV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 11)) | (((value as u32) & 0x03) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `nRST_STOP`"]
        pub type NRST_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `nRST_STOP`"]
        pub struct NRST_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NRST_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `nRST_STDBY`"]
        pub type NRST_STDBY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `nRST_STDBY`"]
        pub struct NRST_STDBY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NRST_STDBY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `nRSTS_HDW`"]
        pub type NRSTS_HDW_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `nRSTS_HDW`"]
        pub struct NRSTS_HDW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NRSTS_HDW_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `IDWG_SW`"]
        pub type IDWG_SW_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IDWG_SW`"]
        pub struct IDWG_SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDWG_SW_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `IWDG_STOP`"]
        pub type IWDG_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IWDG_STOP`"]
        pub struct IWDG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IWDG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `IWDG_STDBY`"]
        pub type IWDG_STDBY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IWDG_STDBY`"]
        pub struct IWDG_STDBY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IWDG_STDBY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `WWDG_SW`"]
        pub type WWDG_SW_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WWDG_SW`"]
        pub struct WWDG_SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDG_SW_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `RAM_PARITY_CHECK`"]
        pub type RAM_PARITY_CHECK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RAM_PARITY_CHECK`"]
        pub struct RAM_PARITY_CHECK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RAM_PARITY_CHECK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `nBOOT_SEL`"]
        pub type NBOOT_SEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `nBOOT_SEL`"]
        pub struct NBOOT_SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBOOT_SEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `nBOOT1`"]
        pub type NBOOT1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `nBOOT1`"]
        pub struct NBOOT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBOOT1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `nBOOT0`"]
        pub type NBOOT0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `nBOOT0`"]
        pub struct NBOOT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBOOT0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `NRST_MODE`"]
        pub type NRST_MODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NRST_MODE`"]
        pub struct NRST_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NRST_MODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 27)) | (((value as u32) & 0x03) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `IRHEN`"]
        pub type IRHEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRHEN`"]
        pub struct IRHEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRHEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Read protection level"]
            #[inline(always)]
            pub fn rdp(&self) -> RDP_R {
                RDP_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - BOR reset Level"]
            #[inline(always)]
            pub fn boren(&self) -> BOREN_R {
                BOREN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - These bits contain the VDD supply level threshold that activates the reset"]
            #[inline(always)]
            pub fn borf_lev(&self) -> BORF_LEV_R {
                BORF_LEV_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bits 11:12 - These bits contain the VDD supply level threshold that releases the reset."]
            #[inline(always)]
            pub fn borr_lev(&self) -> BORR_LEV_R {
                BORR_LEV_R::new(((self.bits >> 11) & 0x03) as u8)
            }
            #[doc = "Bit 13 - nRST_STOP"]
            #[inline(always)]
            pub fn n_rst_stop(&self) -> NRST_STOP_R {
                NRST_STOP_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - nRST_STDBY"]
            #[inline(always)]
            pub fn n_rst_stdby(&self) -> NRST_STDBY_R {
                NRST_STDBY_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - nRSTS_HDW"]
            #[inline(always)]
            pub fn n_rsts_hdw(&self) -> NRSTS_HDW_R {
                NRSTS_HDW_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Independent watchdog selection"]
            #[inline(always)]
            pub fn idwg_sw(&self) -> IDWG_SW_R {
                IDWG_SW_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Independent watchdog counter freeze in Stop mode"]
            #[inline(always)]
            pub fn iwdg_stop(&self) -> IWDG_STOP_R {
                IWDG_STOP_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Independent watchdog counter freeze in Standby mode"]
            #[inline(always)]
            pub fn iwdg_stdby(&self) -> IWDG_STDBY_R {
                IWDG_STDBY_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Window watchdog selection"]
            #[inline(always)]
            pub fn wwdg_sw(&self) -> WWDG_SW_R {
                WWDG_SW_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 22 - SRAM parity check control"]
            #[inline(always)]
            pub fn ram_parity_check(&self) -> RAM_PARITY_CHECK_R {
                RAM_PARITY_CHECK_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 24 - nBOOT_SEL"]
            #[inline(always)]
            pub fn n_boot_sel(&self) -> NBOOT_SEL_R {
                NBOOT_SEL_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Boot configuration"]
            #[inline(always)]
            pub fn n_boot1(&self) -> NBOOT1_R {
                NBOOT1_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - nBOOT0 option bit"]
            #[inline(always)]
            pub fn n_boot0(&self) -> NBOOT0_R {
                NBOOT0_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bits 27:28 - NRST_MODE"]
            #[inline(always)]
            pub fn nrst_mode(&self) -> NRST_MODE_R {
                NRST_MODE_R::new(((self.bits >> 27) & 0x03) as u8)
            }
            #[doc = "Bit 29 - Internal reset holder enable bit"]
            #[inline(always)]
            pub fn irhen(&self) -> IRHEN_R {
                IRHEN_R::new(((self.bits >> 29) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Read protection level"]
            #[inline(always)]
            pub fn rdp(&mut self) -> RDP_W {
                RDP_W { w: self }
            }
            #[doc = "Bit 8 - BOR reset Level"]
            #[inline(always)]
            pub fn boren(&mut self) -> BOREN_W {
                BOREN_W { w: self }
            }
            #[doc = "Bits 9:10 - These bits contain the VDD supply level threshold that activates the reset"]
            #[inline(always)]
            pub fn borf_lev(&mut self) -> BORF_LEV_W {
                BORF_LEV_W { w: self }
            }
            #[doc = "Bits 11:12 - These bits contain the VDD supply level threshold that releases the reset."]
            #[inline(always)]
            pub fn borr_lev(&mut self) -> BORR_LEV_W {
                BORR_LEV_W { w: self }
            }
            #[doc = "Bit 13 - nRST_STOP"]
            #[inline(always)]
            pub fn n_rst_stop(&mut self) -> NRST_STOP_W {
                NRST_STOP_W { w: self }
            }
            #[doc = "Bit 14 - nRST_STDBY"]
            #[inline(always)]
            pub fn n_rst_stdby(&mut self) -> NRST_STDBY_W {
                NRST_STDBY_W { w: self }
            }
            #[doc = "Bit 15 - nRSTS_HDW"]
            #[inline(always)]
            pub fn n_rsts_hdw(&mut self) -> NRSTS_HDW_W {
                NRSTS_HDW_W { w: self }
            }
            #[doc = "Bit 16 - Independent watchdog selection"]
            #[inline(always)]
            pub fn idwg_sw(&mut self) -> IDWG_SW_W {
                IDWG_SW_W { w: self }
            }
            #[doc = "Bit 17 - Independent watchdog counter freeze in Stop mode"]
            #[inline(always)]
            pub fn iwdg_stop(&mut self) -> IWDG_STOP_W {
                IWDG_STOP_W { w: self }
            }
            #[doc = "Bit 18 - Independent watchdog counter freeze in Standby mode"]
            #[inline(always)]
            pub fn iwdg_stdby(&mut self) -> IWDG_STDBY_W {
                IWDG_STDBY_W { w: self }
            }
            #[doc = "Bit 19 - Window watchdog selection"]
            #[inline(always)]
            pub fn wwdg_sw(&mut self) -> WWDG_SW_W {
                WWDG_SW_W { w: self }
            }
            #[doc = "Bit 22 - SRAM parity check control"]
            #[inline(always)]
            pub fn ram_parity_check(&mut self) -> RAM_PARITY_CHECK_W {
                RAM_PARITY_CHECK_W { w: self }
            }
            #[doc = "Bit 24 - nBOOT_SEL"]
            #[inline(always)]
            pub fn n_boot_sel(&mut self) -> NBOOT_SEL_W {
                NBOOT_SEL_W { w: self }
            }
            #[doc = "Bit 25 - Boot configuration"]
            #[inline(always)]
            pub fn n_boot1(&mut self) -> NBOOT1_W {
                NBOOT1_W { w: self }
            }
            #[doc = "Bit 26 - nBOOT0 option bit"]
            #[inline(always)]
            pub fn n_boot0(&mut self) -> NBOOT0_W {
                NBOOT0_W { w: self }
            }
            #[doc = "Bits 27:28 - NRST_MODE"]
            #[inline(always)]
            pub fn nrst_mode(&mut self) -> NRST_MODE_W {
                NRST_MODE_W { w: self }
            }
            #[doc = "Bit 29 - Internal reset holder enable bit"]
            #[inline(always)]
            pub fn irhen(&mut self) -> IRHEN_W {
                IRHEN_W { w: self }
            }
        }
    }
    #[doc = "Flash PCROP zone A Start address register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcrop1asr](pcrop1asr) module"]
    pub type PCROP1ASR = crate::Reg<u32, _PCROP1ASR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PCROP1ASR;
    #[doc = "`read()` method returns [pcrop1asr::R](pcrop1asr::R) reader structure"]
    impl crate::Readable for PCROP1ASR {}
    #[doc = "Flash PCROP zone A Start address register"]
    pub mod pcrop1asr {
        #[doc = "Reader of register PCROP1ASR"]
        pub type R = crate::R<u32, super::PCROP1ASR>;
        #[doc = "Reader of field `PCROP1A_STRT`"]
        pub type PCROP1A_STRT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PCROP1A area start offset"]
            #[inline(always)]
            pub fn pcrop1a_strt(&self) -> PCROP1A_STRT_R {
                PCROP1A_STRT_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Flash PCROP zone A End address register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcrop1aer](pcrop1aer) module"]
    pub type PCROP1AER = crate::Reg<u32, _PCROP1AER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PCROP1AER;
    #[doc = "`read()` method returns [pcrop1aer::R](pcrop1aer::R) reader structure"]
    impl crate::Readable for PCROP1AER {}
    #[doc = "Flash PCROP zone A End address register"]
    pub mod pcrop1aer {
        #[doc = "Reader of register PCROP1AER"]
        pub type R = crate::R<u32, super::PCROP1AER>;
        #[doc = "Reader of field `PCROP1A_END`"]
        pub type PCROP1A_END_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PCROP_RDP`"]
        pub type PCROP_RDP_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 0:7 - PCROP1A area end offset"]
            #[inline(always)]
            pub fn pcrop1a_end(&self) -> PCROP1A_END_R {
                PCROP1A_END_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 31 - PCROP area preserved when RDP level decreased"]
            #[inline(always)]
            pub fn pcrop_rdp(&self) -> PCROP_RDP_R {
                PCROP_RDP_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
    }
    #[doc = "Flash WRP area A address register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wrp1ar](wrp1ar) module"]
    pub type WRP1AR = crate::Reg<u32, _WRP1AR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WRP1AR;
    #[doc = "`read()` method returns [wrp1ar::R](wrp1ar::R) reader structure"]
    impl crate::Readable for WRP1AR {}
    #[doc = "Flash WRP area A address register"]
    pub mod wrp1ar {
        #[doc = "Reader of register WRP1AR"]
        pub type R = crate::R<u32, super::WRP1AR>;
        #[doc = "Reader of field `WRP1A_STRT`"]
        pub type WRP1A_STRT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `WRP1A_END`"]
        pub type WRP1A_END_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:5 - WRP area A start offset"]
            #[inline(always)]
            pub fn wrp1a_strt(&self) -> WRP1A_STRT_R {
                WRP1A_STRT_R::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bits 16:21 - WRP area A end offset"]
            #[inline(always)]
            pub fn wrp1a_end(&self) -> WRP1A_END_R {
                WRP1A_END_R::new(((self.bits >> 16) & 0x3f) as u8)
            }
        }
    }
    #[doc = "Flash WRP area B address register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wrp1br](wrp1br) module"]
    pub type WRP1BR = crate::Reg<u32, _WRP1BR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WRP1BR;
    #[doc = "`read()` method returns [wrp1br::R](wrp1br::R) reader structure"]
    impl crate::Readable for WRP1BR {}
    #[doc = "Flash WRP area B address register"]
    pub mod wrp1br {
        #[doc = "Reader of register WRP1BR"]
        pub type R = crate::R<u32, super::WRP1BR>;
        #[doc = "Reader of field `WRP1B_STRT`"]
        pub type WRP1B_STRT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `WRP1B_END`"]
        pub type WRP1B_END_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:5 - WRP area B start offset"]
            #[inline(always)]
            pub fn wrp1b_strt(&self) -> WRP1B_STRT_R {
                WRP1B_STRT_R::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bits 16:21 - WRP area B end offset"]
            #[inline(always)]
            pub fn wrp1b_end(&self) -> WRP1B_END_R {
                WRP1B_END_R::new(((self.bits >> 16) & 0x3f) as u8)
            }
        }
    }
    #[doc = "Flash PCROP zone B Start address register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcrop1bsr](pcrop1bsr) module"]
    pub type PCROP1BSR = crate::Reg<u32, _PCROP1BSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PCROP1BSR;
    #[doc = "`read()` method returns [pcrop1bsr::R](pcrop1bsr::R) reader structure"]
    impl crate::Readable for PCROP1BSR {}
    #[doc = "Flash PCROP zone B Start address register"]
    pub mod pcrop1bsr {
        #[doc = "Reader of register PCROP1BSR"]
        pub type R = crate::R<u32, super::PCROP1BSR>;
        #[doc = "Reader of field `PCROP1B_STRT`"]
        pub type PCROP1B_STRT_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PCROP1B area start offset"]
            #[inline(always)]
            pub fn pcrop1b_strt(&self) -> PCROP1B_STRT_R {
                PCROP1B_STRT_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Flash PCROP zone B End address register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pcrop1ber](pcrop1ber) module"]
    pub type PCROP1BER = crate::Reg<u32, _PCROP1BER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PCROP1BER;
    #[doc = "`read()` method returns [pcrop1ber::R](pcrop1ber::R) reader structure"]
    impl crate::Readable for PCROP1BER {}
    #[doc = "Flash PCROP zone B End address register"]
    pub mod pcrop1ber {
        #[doc = "Reader of register PCROP1BER"]
        pub type R = crate::R<u32, super::PCROP1BER>;
        #[doc = "Reader of field `PCROP1B_END`"]
        pub type PCROP1B_END_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - PCROP1B area end offset"]
            #[inline(always)]
            pub fn pcrop1b_end(&self) -> PCROP1B_END_R {
                PCROP1B_END_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Flash Security register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [secr](secr) module"]
    pub type SECR = crate::Reg<u32, _SECR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SECR;
    #[doc = "`read()` method returns [secr::R](secr::R) reader structure"]
    impl crate::Readable for SECR {}
    #[doc = "Flash Security register"]
    pub mod secr {
        #[doc = "Reader of register SECR"]
        pub type R = crate::R<u32, super::SECR>;
        #[doc = "Reader of field `SEC_SIZE`"]
        pub type SEC_SIZE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `BOOT_LOCK`"]
        pub type BOOT_LOCK_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 0:6 - Securable memory area size"]
            #[inline(always)]
            pub fn sec_size(&self) -> SEC_SIZE_R {
                SEC_SIZE_R::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bit 16 - used to force boot from user area"]
            #[inline(always)]
            pub fn boot_lock(&self) -> BOOT_LOCK_R {
                BOOT_LOCK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
    }
}
#[doc = "Reset and clock control"]
pub struct RCC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RCC {}
impl RCC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rcc::RegisterBlock {
        0x4002_1000 as *const _
    }
}
impl Deref for RCC {
    type Target = rcc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RCC::ptr() }
    }
}
#[doc = "Reset and clock control"]
pub mod rcc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Clock control register"]
        pub cr: CR,
        #[doc = "0x04 - Internal clock sources calibration register"]
        pub icscr: ICSCR,
        #[doc = "0x08 - Clock configuration register"]
        pub cfgr: CFGR,
        #[doc = "0x0c - PLL configuration register"]
        pub pllsyscfgr: PLLSYSCFGR,
        _reserved4: [u8; 8usize],
        #[doc = "0x18 - Clock interrupt enable register"]
        pub cier: CIER,
        #[doc = "0x1c - Clock interrupt flag register"]
        pub cifr: CIFR,
        #[doc = "0x20 - Clock interrupt clear register"]
        pub cicr: CICR,
        #[doc = "0x24 - GPIO reset register"]
        pub ioprstr: IOPRSTR,
        #[doc = "0x28 - AHB peripheral reset register"]
        pub ahbrstr: AHBRSTR,
        #[doc = "0x2c - APB peripheral reset register 1"]
        pub apbrstr1: APBRSTR1,
        #[doc = "0x30 - APB peripheral reset register 2"]
        pub apbrstr2: APBRSTR2,
        #[doc = "0x34 - GPIO clock enable register"]
        pub iopenr: IOPENR,
        #[doc = "0x38 - AHB peripheral clock enable register"]
        pub ahbenr: AHBENR,
        #[doc = "0x3c - APB peripheral clock enable register 1"]
        pub apbenr1: APBENR1,
        #[doc = "0x40 - APB peripheral clock enable register 2"]
        pub apbenr2: APBENR2,
        #[doc = "0x44 - GPIO in Sleep mode clock enable register"]
        pub iopsmenr: IOPSMENR,
        #[doc = "0x48 - AHB peripheral clock enable in Sleep mode register"]
        pub ahbsmenr: AHBSMENR,
        #[doc = "0x4c - APB peripheral clock enable in Sleep mode register 1"]
        pub apbsmenr1: APBSMENR1,
        #[doc = "0x50 - APB peripheral clock enable in Sleep mode register 2"]
        pub apbsmenr2: APBSMENR2,
        #[doc = "0x54 - Peripherals independent clock configuration register"]
        pub ccipr: CCIPR,
        _reserved20: [u8; 4usize],
        #[doc = "0x5c - RTC domain control register"]
        pub bdcr: BDCR,
        #[doc = "0x60 - Control/status register"]
        pub csr: CSR,
    }
    #[doc = "Clock control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Clock control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0x63"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x63
            }
        }
        #[doc = "Reader of field `HSION`"]
        pub type HSION_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSION`"]
        pub struct HSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSION_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `HSIKERON`"]
        pub type HSIKERON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSIKERON`"]
        pub struct HSIKERON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIKERON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `HSIRDY`"]
        pub type HSIRDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSIRDY`"]
        pub struct HSIRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIRDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `HSIDIV`"]
        pub type HSIDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HSIDIV`"]
        pub struct HSIDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 11)) | (((value as u32) & 0x07) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `HSEON`"]
        pub type HSEON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSEON`"]
        pub struct HSEON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSEON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `HSERDY`"]
        pub type HSERDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSERDY`"]
        pub struct HSERDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSERDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `HSEBYP`"]
        pub type HSEBYP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSEBYP`"]
        pub struct HSEBYP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSEBYP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `CSSON`"]
        pub type CSSON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CSSON`"]
        pub struct CSSON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSSON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `PLLON`"]
        pub type PLLON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PLLON`"]
        pub struct PLLON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `PLLRDY`"]
        pub type PLLRDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PLLRDY`"]
        pub struct PLLRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLRDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 8 - HSI16 clock enable"]
            #[inline(always)]
            pub fn hsion(&self) -> HSION_R {
                HSION_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - HSI16 always enable for peripheral kernels"]
            #[inline(always)]
            pub fn hsikeron(&self) -> HSIKERON_R {
                HSIKERON_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - HSI16 clock ready flag"]
            #[inline(always)]
            pub fn hsirdy(&self) -> HSIRDY_R {
                HSIRDY_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 11:13 - HSI16 clock division factor"]
            #[inline(always)]
            pub fn hsidiv(&self) -> HSIDIV_R {
                HSIDIV_R::new(((self.bits >> 11) & 0x07) as u8)
            }
            #[doc = "Bit 16 - HSE clock enable"]
            #[inline(always)]
            pub fn hseon(&self) -> HSEON_R {
                HSEON_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - HSE clock ready flag"]
            #[inline(always)]
            pub fn hserdy(&self) -> HSERDY_R {
                HSERDY_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - HSE crystal oscillator bypass"]
            #[inline(always)]
            pub fn hsebyp(&self) -> HSEBYP_R {
                HSEBYP_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Clock security system enable"]
            #[inline(always)]
            pub fn csson(&self) -> CSSON_R {
                CSSON_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 24 - PLL enable"]
            #[inline(always)]
            pub fn pllon(&self) -> PLLON_R {
                PLLON_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - PLL clock ready flag"]
            #[inline(always)]
            pub fn pllrdy(&self) -> PLLRDY_R {
                PLLRDY_R::new(((self.bits >> 25) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - HSI16 clock enable"]
            #[inline(always)]
            pub fn hsion(&mut self) -> HSION_W {
                HSION_W { w: self }
            }
            #[doc = "Bit 9 - HSI16 always enable for peripheral kernels"]
            #[inline(always)]
            pub fn hsikeron(&mut self) -> HSIKERON_W {
                HSIKERON_W { w: self }
            }
            #[doc = "Bit 10 - HSI16 clock ready flag"]
            #[inline(always)]
            pub fn hsirdy(&mut self) -> HSIRDY_W {
                HSIRDY_W { w: self }
            }
            #[doc = "Bits 11:13 - HSI16 clock division factor"]
            #[inline(always)]
            pub fn hsidiv(&mut self) -> HSIDIV_W {
                HSIDIV_W { w: self }
            }
            #[doc = "Bit 16 - HSE clock enable"]
            #[inline(always)]
            pub fn hseon(&mut self) -> HSEON_W {
                HSEON_W { w: self }
            }
            #[doc = "Bit 17 - HSE clock ready flag"]
            #[inline(always)]
            pub fn hserdy(&mut self) -> HSERDY_W {
                HSERDY_W { w: self }
            }
            #[doc = "Bit 18 - HSE crystal oscillator bypass"]
            #[inline(always)]
            pub fn hsebyp(&mut self) -> HSEBYP_W {
                HSEBYP_W { w: self }
            }
            #[doc = "Bit 19 - Clock security system enable"]
            #[inline(always)]
            pub fn csson(&mut self) -> CSSON_W {
                CSSON_W { w: self }
            }
            #[doc = "Bit 24 - PLL enable"]
            #[inline(always)]
            pub fn pllon(&mut self) -> PLLON_W {
                PLLON_W { w: self }
            }
            #[doc = "Bit 25 - PLL clock ready flag"]
            #[inline(always)]
            pub fn pllrdy(&mut self) -> PLLRDY_W {
                PLLRDY_W { w: self }
            }
        }
    }
    #[doc = "Internal clock sources calibration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icscr](icscr) module"]
    pub type ICSCR = crate::Reg<u32, _ICSCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICSCR;
    #[doc = "`read()` method returns [icscr::R](icscr::R) reader structure"]
    impl crate::Readable for ICSCR {}
    #[doc = "`write(|w| ..)` method takes [icscr::W](icscr::W) writer structure"]
    impl crate::Writable for ICSCR {}
    #[doc = "Internal clock sources calibration register"]
    pub mod icscr {
        #[doc = "Reader of register ICSCR"]
        pub type R = crate::R<u32, super::ICSCR>;
        #[doc = "Writer for register ICSCR"]
        pub type W = crate::W<u32, super::ICSCR>;
        #[doc = "Register ICSCR `reset()`'s with value 0x1000_0000"]
        impl crate::ResetValue for super::ICSCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x1000_0000
            }
        }
        #[doc = "Reader of field `HSICAL`"]
        pub type HSICAL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HSITRIM`"]
        pub type HSITRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HSITRIM`"]
        pub struct HSITRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSITRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 8)) | (((value as u32) & 0x7f) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - HSI16 clock calibration"]
            #[inline(always)]
            pub fn hsical(&self) -> HSICAL_R {
                HSICAL_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:14 - HSI16 clock trimming"]
            #[inline(always)]
            pub fn hsitrim(&self) -> HSITRIM_R {
                HSITRIM_R::new(((self.bits >> 8) & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:14 - HSI16 clock trimming"]
            #[inline(always)]
            pub fn hsitrim(&mut self) -> HSITRIM_W {
                HSITRIM_W { w: self }
            }
        }
    }
    #[doc = "Clock configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr](cfgr) module"]
    pub type CFGR = crate::Reg<u32, _CFGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR;
    #[doc = "`read()` method returns [cfgr::R](cfgr::R) reader structure"]
    impl crate::Readable for CFGR {}
    #[doc = "`write(|w| ..)` method takes [cfgr::W](cfgr::W) writer structure"]
    impl crate::Writable for CFGR {}
    #[doc = "Clock configuration register"]
    pub mod cfgr {
        #[doc = "Reader of register CFGR"]
        pub type R = crate::R<u32, super::CFGR>;
        #[doc = "Writer for register CFGR"]
        pub type W = crate::W<u32, super::CFGR>;
        #[doc = "Register CFGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MCOPRE`"]
        pub type MCOPRE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MCOSEL`"]
        pub type MCOSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MCOSEL`"]
        pub struct MCOSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCOSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 24)) | (((value as u32) & 0x07) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `PPRE`"]
        pub type PPRE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PPRE`"]
        pub struct PPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PPRE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `HPRE`"]
        pub type HPRE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HPRE`"]
        pub struct HPRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HPRE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SWS`"]
        pub type SWS_R = crate::R<u8, u8>;
        #[doc = "Reader of field `SW`"]
        pub type SW_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SW`"]
        pub struct SW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SW_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:30 - Microcontroller clock output prescaler"]
            #[inline(always)]
            pub fn mcopre(&self) -> MCOPRE_R {
                MCOPRE_R::new(((self.bits >> 28) & 0x07) as u8)
            }
            #[doc = "Bits 24:26 - Microcontroller clock output"]
            #[inline(always)]
            pub fn mcosel(&self) -> MCOSEL_R {
                MCOSEL_R::new(((self.bits >> 24) & 0x07) as u8)
            }
            #[doc = "Bits 12:14 - APB prescaler"]
            #[inline(always)]
            pub fn ppre(&self) -> PPRE_R {
                PPRE_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - AHB prescaler"]
            #[inline(always)]
            pub fn hpre(&self) -> HPRE_R {
                HPRE_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 3:5 - System clock switch status"]
            #[inline(always)]
            pub fn sws(&self) -> SWS_R {
                SWS_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bits 0:2 - System clock switch"]
            #[inline(always)]
            pub fn sw(&self) -> SW_R {
                SW_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 24:26 - Microcontroller clock output"]
            #[inline(always)]
            pub fn mcosel(&mut self) -> MCOSEL_W {
                MCOSEL_W { w: self }
            }
            #[doc = "Bits 12:14 - APB prescaler"]
            #[inline(always)]
            pub fn ppre(&mut self) -> PPRE_W {
                PPRE_W { w: self }
            }
            #[doc = "Bits 8:11 - AHB prescaler"]
            #[inline(always)]
            pub fn hpre(&mut self) -> HPRE_W {
                HPRE_W { w: self }
            }
            #[doc = "Bits 0:2 - System clock switch"]
            #[inline(always)]
            pub fn sw(&mut self) -> SW_W {
                SW_W { w: self }
            }
        }
    }
    #[doc = "PLL configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pllsyscfgr](pllsyscfgr) module"]
    pub type PLLSYSCFGR = crate::Reg<u32, _PLLSYSCFGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PLLSYSCFGR;
    #[doc = "`read()` method returns [pllsyscfgr::R](pllsyscfgr::R) reader structure"]
    impl crate::Readable for PLLSYSCFGR {}
    #[doc = "`write(|w| ..)` method takes [pllsyscfgr::W](pllsyscfgr::W) writer structure"]
    impl crate::Writable for PLLSYSCFGR {}
    #[doc = "PLL configuration register"]
    pub mod pllsyscfgr {
        #[doc = "Reader of register PLLSYSCFGR"]
        pub type R = crate::R<u32, super::PLLSYSCFGR>;
        #[doc = "Writer for register PLLSYSCFGR"]
        pub type W = crate::W<u32, super::PLLSYSCFGR>;
        #[doc = "Register PLLSYSCFGR `reset()`'s with value 0x1000"]
        impl crate::ResetValue for super::PLLSYSCFGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x1000
            }
        }
        #[doc = "Reader of field `PLLSRC`"]
        pub type PLLSRC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PLLSRC`"]
        pub struct PLLSRC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLSRC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `PLLM`"]
        pub type PLLM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PLLM`"]
        pub struct PLLM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PLLN`"]
        pub type PLLN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PLLN`"]
        pub struct PLLN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 8)) | (((value as u32) & 0x7f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PLLPEN`"]
        pub type PLLPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PLLPEN`"]
        pub struct PLLPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PLLP`"]
        pub type PLLP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PLLP`"]
        pub struct PLLP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 17)) | (((value as u32) & 0x1f) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `PLLQEN`"]
        pub type PLLQEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PLLQEN`"]
        pub struct PLLQEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLQEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `PLLQ`"]
        pub type PLLQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PLLQ`"]
        pub struct PLLQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 25)) | (((value as u32) & 0x07) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `PLLREN`"]
        pub type PLLREN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PLLREN`"]
        pub struct PLLREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `PLLR`"]
        pub type PLLR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PLLR`"]
        pub struct PLLR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 29)) | (((value as u32) & 0x07) << 29);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - PLL input clock source"]
            #[inline(always)]
            pub fn pllsrc(&self) -> PLLSRC_R {
                PLLSRC_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 4:6 - Division factor M of the PLL input clock divider"]
            #[inline(always)]
            pub fn pllm(&self) -> PLLM_R {
                PLLM_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 8:14 - PLL frequency multiplication factor N"]
            #[inline(always)]
            pub fn plln(&self) -> PLLN_R {
                PLLN_R::new(((self.bits >> 8) & 0x7f) as u8)
            }
            #[doc = "Bit 16 - PLLPCLK clock output enable"]
            #[inline(always)]
            pub fn pllpen(&self) -> PLLPEN_R {
                PLLPEN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:21 - PLL VCO division factor P for PLLPCLK clock output"]
            #[inline(always)]
            pub fn pllp(&self) -> PLLP_R {
                PLLP_R::new(((self.bits >> 17) & 0x1f) as u8)
            }
            #[doc = "Bit 24 - PLLQCLK clock output enable"]
            #[inline(always)]
            pub fn pllqen(&self) -> PLLQEN_R {
                PLLQEN_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bits 25:27 - PLL VCO division factor Q for PLLQCLK clock output"]
            #[inline(always)]
            pub fn pllq(&self) -> PLLQ_R {
                PLLQ_R::new(((self.bits >> 25) & 0x07) as u8)
            }
            #[doc = "Bit 28 - PLLRCLK clock output enable"]
            #[inline(always)]
            pub fn pllren(&self) -> PLLREN_R {
                PLLREN_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bits 29:31 - PLL VCO division factor R for PLLRCLK clock output"]
            #[inline(always)]
            pub fn pllr(&self) -> PLLR_R {
                PLLR_R::new(((self.bits >> 29) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - PLL input clock source"]
            #[inline(always)]
            pub fn pllsrc(&mut self) -> PLLSRC_W {
                PLLSRC_W { w: self }
            }
            #[doc = "Bits 4:6 - Division factor M of the PLL input clock divider"]
            #[inline(always)]
            pub fn pllm(&mut self) -> PLLM_W {
                PLLM_W { w: self }
            }
            #[doc = "Bits 8:14 - PLL frequency multiplication factor N"]
            #[inline(always)]
            pub fn plln(&mut self) -> PLLN_W {
                PLLN_W { w: self }
            }
            #[doc = "Bit 16 - PLLPCLK clock output enable"]
            #[inline(always)]
            pub fn pllpen(&mut self) -> PLLPEN_W {
                PLLPEN_W { w: self }
            }
            #[doc = "Bits 17:21 - PLL VCO division factor P for PLLPCLK clock output"]
            #[inline(always)]
            pub fn pllp(&mut self) -> PLLP_W {
                PLLP_W { w: self }
            }
            #[doc = "Bit 24 - PLLQCLK clock output enable"]
            #[inline(always)]
            pub fn pllqen(&mut self) -> PLLQEN_W {
                PLLQEN_W { w: self }
            }
            #[doc = "Bits 25:27 - PLL VCO division factor Q for PLLQCLK clock output"]
            #[inline(always)]
            pub fn pllq(&mut self) -> PLLQ_W {
                PLLQ_W { w: self }
            }
            #[doc = "Bit 28 - PLLRCLK clock output enable"]
            #[inline(always)]
            pub fn pllren(&mut self) -> PLLREN_W {
                PLLREN_W { w: self }
            }
            #[doc = "Bits 29:31 - PLL VCO division factor R for PLLRCLK clock output"]
            #[inline(always)]
            pub fn pllr(&mut self) -> PLLR_W {
                PLLR_W { w: self }
            }
        }
    }
    #[doc = "Clock interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cier](cier) module"]
    pub type CIER = crate::Reg<u32, _CIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CIER;
    #[doc = "`read()` method returns [cier::R](cier::R) reader structure"]
    impl crate::Readable for CIER {}
    #[doc = "`write(|w| ..)` method takes [cier::W](cier::W) writer structure"]
    impl crate::Writable for CIER {}
    #[doc = "Clock interrupt enable register"]
    pub mod cier {
        #[doc = "Reader of register CIER"]
        pub type R = crate::R<u32, super::CIER>;
        #[doc = "Writer for register CIER"]
        pub type W = crate::W<u32, super::CIER>;
        #[doc = "Register CIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LSIRDYIE`"]
        pub type LSIRDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSIRDYIE`"]
        pub struct LSIRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSIRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `LSERDYIE`"]
        pub type LSERDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSERDYIE`"]
        pub struct LSERDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSERDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `HSIRDYIE`"]
        pub type HSIRDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSIRDYIE`"]
        pub struct HSIRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HSERDYIE`"]
        pub type HSERDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HSERDYIE`"]
        pub struct HSERDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSERDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PLLSYSRDYIE`"]
        pub type PLLSYSRDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PLLSYSRDYIE`"]
        pub struct PLLSYSRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLSYSRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - LSI ready interrupt enable"]
            #[inline(always)]
            pub fn lsirdyie(&self) -> LSIRDYIE_R {
                LSIRDYIE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - LSE ready interrupt enable"]
            #[inline(always)]
            pub fn lserdyie(&self) -> LSERDYIE_R {
                LSERDYIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - HSI ready interrupt enable"]
            #[inline(always)]
            pub fn hsirdyie(&self) -> HSIRDYIE_R {
                HSIRDYIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - HSE ready interrupt enable"]
            #[inline(always)]
            pub fn hserdyie(&self) -> HSERDYIE_R {
                HSERDYIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - PLL ready interrupt enable"]
            #[inline(always)]
            pub fn pllsysrdyie(&self) -> PLLSYSRDYIE_R {
                PLLSYSRDYIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - LSI ready interrupt enable"]
            #[inline(always)]
            pub fn lsirdyie(&mut self) -> LSIRDYIE_W {
                LSIRDYIE_W { w: self }
            }
            #[doc = "Bit 1 - LSE ready interrupt enable"]
            #[inline(always)]
            pub fn lserdyie(&mut self) -> LSERDYIE_W {
                LSERDYIE_W { w: self }
            }
            #[doc = "Bit 3 - HSI ready interrupt enable"]
            #[inline(always)]
            pub fn hsirdyie(&mut self) -> HSIRDYIE_W {
                HSIRDYIE_W { w: self }
            }
            #[doc = "Bit 4 - HSE ready interrupt enable"]
            #[inline(always)]
            pub fn hserdyie(&mut self) -> HSERDYIE_W {
                HSERDYIE_W { w: self }
            }
            #[doc = "Bit 5 - PLL ready interrupt enable"]
            #[inline(always)]
            pub fn pllsysrdyie(&mut self) -> PLLSYSRDYIE_W {
                PLLSYSRDYIE_W { w: self }
            }
        }
    }
    #[doc = "Clock interrupt flag register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cifr](cifr) module"]
    pub type CIFR = crate::Reg<u32, _CIFR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CIFR;
    #[doc = "`read()` method returns [cifr::R](cifr::R) reader structure"]
    impl crate::Readable for CIFR {}
    #[doc = "Clock interrupt flag register"]
    pub mod cifr {
        #[doc = "Reader of register CIFR"]
        pub type R = crate::R<u32, super::CIFR>;
        #[doc = "Reader of field `LSIRDYF`"]
        pub type LSIRDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `LSERDYF`"]
        pub type LSERDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HSIRDYF`"]
        pub type HSIRDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HSERDYF`"]
        pub type HSERDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PLLSYSRDYF`"]
        pub type PLLSYSRDYF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CSSF`"]
        pub type CSSF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `LSECSSF`"]
        pub type LSECSSF_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - LSI ready interrupt flag"]
            #[inline(always)]
            pub fn lsirdyf(&self) -> LSIRDYF_R {
                LSIRDYF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - LSE ready interrupt flag"]
            #[inline(always)]
            pub fn lserdyf(&self) -> LSERDYF_R {
                LSERDYF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - HSI ready interrupt flag"]
            #[inline(always)]
            pub fn hsirdyf(&self) -> HSIRDYF_R {
                HSIRDYF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - HSE ready interrupt flag"]
            #[inline(always)]
            pub fn hserdyf(&self) -> HSERDYF_R {
                HSERDYF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - PLL ready interrupt flag"]
            #[inline(always)]
            pub fn pllsysrdyf(&self) -> PLLSYSRDYF_R {
                PLLSYSRDYF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Clock security system interrupt flag"]
            #[inline(always)]
            pub fn cssf(&self) -> CSSF_R {
                CSSF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - LSE Clock security system interrupt flag"]
            #[inline(always)]
            pub fn lsecssf(&self) -> LSECSSF_R {
                LSECSSF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
        }
    }
    #[doc = "Clock interrupt clear register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cicr](cicr) module"]
    pub type CICR = crate::Reg<u32, _CICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CICR;
    #[doc = "`write(|w| ..)` method takes [cicr::W](cicr::W) writer structure"]
    impl crate::Writable for CICR {}
    #[doc = "Clock interrupt clear register"]
    pub mod cicr {
        #[doc = "Writer for register CICR"]
        pub type W = crate::W<u32, super::CICR>;
        #[doc = "Register CICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `LSIRDYC`"]
        pub struct LSIRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSIRDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Write proxy for field `LSERDYC`"]
        pub struct LSERDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSERDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `HSIRDYC`"]
        pub struct HSIRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSIRDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `HSERDYC`"]
        pub struct HSERDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HSERDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `PLLSYSRDYC`"]
        pub struct PLLSYSRDYC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PLLSYSRDYC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `CSSC`"]
        pub struct CSSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSSC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `LSECSSC`"]
        pub struct LSECSSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSECSSC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - LSI ready interrupt clear"]
            #[inline(always)]
            pub fn lsirdyc(&mut self) -> LSIRDYC_W {
                LSIRDYC_W { w: self }
            }
            #[doc = "Bit 1 - LSE ready interrupt clear"]
            #[inline(always)]
            pub fn lserdyc(&mut self) -> LSERDYC_W {
                LSERDYC_W { w: self }
            }
            #[doc = "Bit 3 - HSI ready interrupt clear"]
            #[inline(always)]
            pub fn hsirdyc(&mut self) -> HSIRDYC_W {
                HSIRDYC_W { w: self }
            }
            #[doc = "Bit 4 - HSE ready interrupt clear"]
            #[inline(always)]
            pub fn hserdyc(&mut self) -> HSERDYC_W {
                HSERDYC_W { w: self }
            }
            #[doc = "Bit 5 - PLL ready interrupt clear"]
            #[inline(always)]
            pub fn pllsysrdyc(&mut self) -> PLLSYSRDYC_W {
                PLLSYSRDYC_W { w: self }
            }
            #[doc = "Bit 8 - Clock security system interrupt clear"]
            #[inline(always)]
            pub fn cssc(&mut self) -> CSSC_W {
                CSSC_W { w: self }
            }
            #[doc = "Bit 9 - LSE Clock security system interrupt clear"]
            #[inline(always)]
            pub fn lsecssc(&mut self) -> LSECSSC_W {
                LSECSSC_W { w: self }
            }
        }
    }
    #[doc = "AHB peripheral reset register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahbrstr](ahbrstr) module"]
    pub type AHBRSTR = crate::Reg<u32, _AHBRSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AHBRSTR;
    #[doc = "`read()` method returns [ahbrstr::R](ahbrstr::R) reader structure"]
    impl crate::Readable for AHBRSTR {}
    #[doc = "`write(|w| ..)` method takes [ahbrstr::W](ahbrstr::W) writer structure"]
    impl crate::Writable for AHBRSTR {}
    #[doc = "AHB peripheral reset register"]
    pub mod ahbrstr {
        #[doc = "Reader of register AHBRSTR"]
        pub type R = crate::R<u32, super::AHBRSTR>;
        #[doc = "Writer for register AHBRSTR"]
        pub type W = crate::W<u32, super::AHBRSTR>;
        #[doc = "Register AHBRSTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::AHBRSTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMARST`"]
        pub type DMARST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMARST`"]
        pub struct DMARST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMARST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `FLASHRST`"]
        pub type FLASHRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FLASHRST`"]
        pub struct FLASHRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLASHRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CRCRST`"]
        pub type CRCRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCRST`"]
        pub struct CRCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - DMA1 reset"]
            #[inline(always)]
            pub fn dmarst(&self) -> DMARST_R {
                DMARST_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 8 - FLITF reset"]
            #[inline(always)]
            pub fn flashrst(&self) -> FLASHRST_R {
                FLASHRST_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CRC reset"]
            #[inline(always)]
            pub fn crcrst(&self) -> CRCRST_R {
                CRCRST_R::new(((self.bits >> 12) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DMA1 reset"]
            #[inline(always)]
            pub fn dmarst(&mut self) -> DMARST_W {
                DMARST_W { w: self }
            }
            #[doc = "Bit 8 - FLITF reset"]
            #[inline(always)]
            pub fn flashrst(&mut self) -> FLASHRST_W {
                FLASHRST_W { w: self }
            }
            #[doc = "Bit 12 - CRC reset"]
            #[inline(always)]
            pub fn crcrst(&mut self) -> CRCRST_W {
                CRCRST_W { w: self }
            }
        }
    }
    #[doc = "GPIO reset register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ioprstr](ioprstr) module"]
    pub type IOPRSTR = crate::Reg<u32, _IOPRSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOPRSTR;
    #[doc = "`read()` method returns [ioprstr::R](ioprstr::R) reader structure"]
    impl crate::Readable for IOPRSTR {}
    #[doc = "`write(|w| ..)` method takes [ioprstr::W](ioprstr::W) writer structure"]
    impl crate::Writable for IOPRSTR {}
    #[doc = "GPIO reset register"]
    pub mod ioprstr {
        #[doc = "Reader of register IOPRSTR"]
        pub type R = crate::R<u32, super::IOPRSTR>;
        #[doc = "Writer for register IOPRSTR"]
        pub type W = crate::W<u32, super::IOPRSTR>;
        #[doc = "Register IOPRSTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IOPRSTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IOPARST`"]
        pub type IOPARST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPARST`"]
        pub struct IOPARST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPARST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `IOPBRST`"]
        pub type IOPBRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPBRST`"]
        pub struct IOPBRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPBRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `IOPCRST`"]
        pub type IOPCRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPCRST`"]
        pub struct IOPCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPCRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `IOPDRST`"]
        pub type IOPDRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPDRST`"]
        pub struct IOPDRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPDRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `IOPFRST`"]
        pub type IOPFRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPFRST`"]
        pub struct IOPFRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPFRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - I/O port A reset"]
            #[inline(always)]
            pub fn ioparst(&self) -> IOPARST_R {
                IOPARST_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - I/O port B reset"]
            #[inline(always)]
            pub fn iopbrst(&self) -> IOPBRST_R {
                IOPBRST_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - I/O port C reset"]
            #[inline(always)]
            pub fn iopcrst(&self) -> IOPCRST_R {
                IOPCRST_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - I/O port D reset"]
            #[inline(always)]
            pub fn iopdrst(&self) -> IOPDRST_R {
                IOPDRST_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 5 - I/O port F reset"]
            #[inline(always)]
            pub fn iopfrst(&self) -> IOPFRST_R {
                IOPFRST_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - I/O port A reset"]
            #[inline(always)]
            pub fn ioparst(&mut self) -> IOPARST_W {
                IOPARST_W { w: self }
            }
            #[doc = "Bit 1 - I/O port B reset"]
            #[inline(always)]
            pub fn iopbrst(&mut self) -> IOPBRST_W {
                IOPBRST_W { w: self }
            }
            #[doc = "Bit 2 - I/O port C reset"]
            #[inline(always)]
            pub fn iopcrst(&mut self) -> IOPCRST_W {
                IOPCRST_W { w: self }
            }
            #[doc = "Bit 3 - I/O port D reset"]
            #[inline(always)]
            pub fn iopdrst(&mut self) -> IOPDRST_W {
                IOPDRST_W { w: self }
            }
            #[doc = "Bit 5 - I/O port F reset"]
            #[inline(always)]
            pub fn iopfrst(&mut self) -> IOPFRST_W {
                IOPFRST_W { w: self }
            }
        }
    }
    #[doc = "APB peripheral reset register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apbrstr1](apbrstr1) module"]
    pub type APBRSTR1 = crate::Reg<u32, _APBRSTR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APBRSTR1;
    #[doc = "`read()` method returns [apbrstr1::R](apbrstr1::R) reader structure"]
    impl crate::Readable for APBRSTR1 {}
    #[doc = "`write(|w| ..)` method takes [apbrstr1::W](apbrstr1::W) writer structure"]
    impl crate::Writable for APBRSTR1 {}
    #[doc = "APB peripheral reset register 1"]
    pub mod apbrstr1 {
        #[doc = "Reader of register APBRSTR1"]
        pub type R = crate::R<u32, super::APBRSTR1>;
        #[doc = "Writer for register APBRSTR1"]
        pub type W = crate::W<u32, super::APBRSTR1>;
        #[doc = "Register APBRSTR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::APBRSTR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TIM2RST`"]
        pub type TIM2RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM2RST`"]
        pub struct TIM2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TIM3RST`"]
        pub type TIM3RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM3RST`"]
        pub struct TIM3RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `SPI2RST`"]
        pub type SPI2RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI2RST`"]
        pub struct SPI2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `USART2RST`"]
        pub type USART2RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART2RST`"]
        pub struct USART2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `LPUART1RST`"]
        pub type LPUART1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPUART1RST`"]
        pub struct LPUART1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPUART1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `I2C1RST`"]
        pub type I2C1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C1RST`"]
        pub struct I2C1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `I2C2RST`"]
        pub type I2C2RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C2RST`"]
        pub struct I2C2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `DBGRST`"]
        pub type DBGRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBGRST`"]
        pub struct DBGRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBGRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `PWRRST`"]
        pub type PWRRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PWRRST`"]
        pub struct PWRRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `LPTIM2RST`"]
        pub type LPTIM2RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPTIM2RST`"]
        pub struct LPTIM2RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPTIM2RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `LPTIM1RST`"]
        pub type LPTIM1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPTIM1RST`"]
        pub struct LPTIM1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPTIM1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - TIM2 timer reset"]
            #[inline(always)]
            pub fn tim2rst(&self) -> TIM2RST_R {
                TIM2RST_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TIM3 timer reset"]
            #[inline(always)]
            pub fn tim3rst(&self) -> TIM3RST_R {
                TIM3RST_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 14 - SPI2 reset"]
            #[inline(always)]
            pub fn spi2rst(&self) -> SPI2RST_R {
                SPI2RST_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 17 - USART2 reset"]
            #[inline(always)]
            pub fn usart2rst(&self) -> USART2RST_R {
                USART2RST_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 20 - LPUART1 reset"]
            #[inline(always)]
            pub fn lpuart1rst(&self) -> LPUART1RST_R {
                LPUART1RST_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - I2C1 reset"]
            #[inline(always)]
            pub fn i2c1rst(&self) -> I2C1RST_R {
                I2C1RST_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - I2C2 reset"]
            #[inline(always)]
            pub fn i2c2rst(&self) -> I2C2RST_R {
                I2C2RST_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Debug support reset"]
            #[inline(always)]
            pub fn dbgrst(&self) -> DBGRST_R {
                DBGRST_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Power interface reset"]
            #[inline(always)]
            pub fn pwrrst(&self) -> PWRRST_R {
                PWRRST_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Low Power Timer 2 reset"]
            #[inline(always)]
            pub fn lptim2rst(&self) -> LPTIM2RST_R {
                LPTIM2RST_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Low Power Timer 1 reset"]
            #[inline(always)]
            pub fn lptim1rst(&self) -> LPTIM1RST_R {
                LPTIM1RST_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TIM2 timer reset"]
            #[inline(always)]
            pub fn tim2rst(&mut self) -> TIM2RST_W {
                TIM2RST_W { w: self }
            }
            #[doc = "Bit 1 - TIM3 timer reset"]
            #[inline(always)]
            pub fn tim3rst(&mut self) -> TIM3RST_W {
                TIM3RST_W { w: self }
            }
            #[doc = "Bit 14 - SPI2 reset"]
            #[inline(always)]
            pub fn spi2rst(&mut self) -> SPI2RST_W {
                SPI2RST_W { w: self }
            }
            #[doc = "Bit 17 - USART2 reset"]
            #[inline(always)]
            pub fn usart2rst(&mut self) -> USART2RST_W {
                USART2RST_W { w: self }
            }
            #[doc = "Bit 20 - LPUART1 reset"]
            #[inline(always)]
            pub fn lpuart1rst(&mut self) -> LPUART1RST_W {
                LPUART1RST_W { w: self }
            }
            #[doc = "Bit 21 - I2C1 reset"]
            #[inline(always)]
            pub fn i2c1rst(&mut self) -> I2C1RST_W {
                I2C1RST_W { w: self }
            }
            #[doc = "Bit 22 - I2C2 reset"]
            #[inline(always)]
            pub fn i2c2rst(&mut self) -> I2C2RST_W {
                I2C2RST_W { w: self }
            }
            #[doc = "Bit 27 - Debug support reset"]
            #[inline(always)]
            pub fn dbgrst(&mut self) -> DBGRST_W {
                DBGRST_W { w: self }
            }
            #[doc = "Bit 28 - Power interface reset"]
            #[inline(always)]
            pub fn pwrrst(&mut self) -> PWRRST_W {
                PWRRST_W { w: self }
            }
            #[doc = "Bit 30 - Low Power Timer 2 reset"]
            #[inline(always)]
            pub fn lptim2rst(&mut self) -> LPTIM2RST_W {
                LPTIM2RST_W { w: self }
            }
            #[doc = "Bit 31 - Low Power Timer 1 reset"]
            #[inline(always)]
            pub fn lptim1rst(&mut self) -> LPTIM1RST_W {
                LPTIM1RST_W { w: self }
            }
        }
    }
    #[doc = "APB peripheral reset register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apbrstr2](apbrstr2) module"]
    pub type APBRSTR2 = crate::Reg<u32, _APBRSTR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APBRSTR2;
    #[doc = "`read()` method returns [apbrstr2::R](apbrstr2::R) reader structure"]
    impl crate::Readable for APBRSTR2 {}
    #[doc = "`write(|w| ..)` method takes [apbrstr2::W](apbrstr2::W) writer structure"]
    impl crate::Writable for APBRSTR2 {}
    #[doc = "APB peripheral reset register 2"]
    pub mod apbrstr2 {
        #[doc = "Reader of register APBRSTR2"]
        pub type R = crate::R<u32, super::APBRSTR2>;
        #[doc = "Writer for register APBRSTR2"]
        pub type W = crate::W<u32, super::APBRSTR2>;
        #[doc = "Register APBRSTR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::APBRSTR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SYSCFGRST`"]
        pub type SYSCFGRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYSCFGRST`"]
        pub struct SYSCFGRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSCFGRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TIM1RST`"]
        pub type TIM1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM1RST`"]
        pub struct TIM1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `SPI1RST`"]
        pub type SPI1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI1RST`"]
        pub struct SPI1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `USART1RST`"]
        pub type USART1RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART1RST`"]
        pub struct USART1RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `TIM14RST`"]
        pub type TIM14RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM14RST`"]
        pub struct TIM14RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM14RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `TIM16RST`"]
        pub type TIM16RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM16RST`"]
        pub struct TIM16RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM16RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `TIM17RST`"]
        pub type TIM17RST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM17RST`"]
        pub struct TIM17RST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM17RST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `ADCRST`"]
        pub type ADCRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADCRST`"]
        pub struct ADCRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SYSCFG, COMP and VREFBUF reset"]
            #[inline(always)]
            pub fn syscfgrst(&self) -> SYSCFGRST_R {
                SYSCFGRST_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 11 - TIM1 timer reset"]
            #[inline(always)]
            pub fn tim1rst(&self) -> TIM1RST_R {
                TIM1RST_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - SPI1 reset"]
            #[inline(always)]
            pub fn spi1rst(&self) -> SPI1RST_R {
                SPI1RST_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 14 - USART1 reset"]
            #[inline(always)]
            pub fn usart1rst(&self) -> USART1RST_R {
                USART1RST_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - TIM14 timer reset"]
            #[inline(always)]
            pub fn tim14rst(&self) -> TIM14RST_R {
                TIM14RST_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 17 - TIM16 timer reset"]
            #[inline(always)]
            pub fn tim16rst(&self) -> TIM16RST_R {
                TIM16RST_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - TIM17 timer reset"]
            #[inline(always)]
            pub fn tim17rst(&self) -> TIM17RST_R {
                TIM17RST_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 20 - ADC reset"]
            #[inline(always)]
            pub fn adcrst(&self) -> ADCRST_R {
                ADCRST_R::new(((self.bits >> 20) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SYSCFG, COMP and VREFBUF reset"]
            #[inline(always)]
            pub fn syscfgrst(&mut self) -> SYSCFGRST_W {
                SYSCFGRST_W { w: self }
            }
            #[doc = "Bit 11 - TIM1 timer reset"]
            #[inline(always)]
            pub fn tim1rst(&mut self) -> TIM1RST_W {
                TIM1RST_W { w: self }
            }
            #[doc = "Bit 12 - SPI1 reset"]
            #[inline(always)]
            pub fn spi1rst(&mut self) -> SPI1RST_W {
                SPI1RST_W { w: self }
            }
            #[doc = "Bit 14 - USART1 reset"]
            #[inline(always)]
            pub fn usart1rst(&mut self) -> USART1RST_W {
                USART1RST_W { w: self }
            }
            #[doc = "Bit 15 - TIM14 timer reset"]
            #[inline(always)]
            pub fn tim14rst(&mut self) -> TIM14RST_W {
                TIM14RST_W { w: self }
            }
            #[doc = "Bit 17 - TIM16 timer reset"]
            #[inline(always)]
            pub fn tim16rst(&mut self) -> TIM16RST_W {
                TIM16RST_W { w: self }
            }
            #[doc = "Bit 18 - TIM17 timer reset"]
            #[inline(always)]
            pub fn tim17rst(&mut self) -> TIM17RST_W {
                TIM17RST_W { w: self }
            }
            #[doc = "Bit 20 - ADC reset"]
            #[inline(always)]
            pub fn adcrst(&mut self) -> ADCRST_W {
                ADCRST_W { w: self }
            }
        }
    }
    #[doc = "GPIO clock enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iopenr](iopenr) module"]
    pub type IOPENR = crate::Reg<u32, _IOPENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOPENR;
    #[doc = "`read()` method returns [iopenr::R](iopenr::R) reader structure"]
    impl crate::Readable for IOPENR {}
    #[doc = "`write(|w| ..)` method takes [iopenr::W](iopenr::W) writer structure"]
    impl crate::Writable for IOPENR {}
    #[doc = "GPIO clock enable register"]
    pub mod iopenr {
        #[doc = "Reader of register IOPENR"]
        pub type R = crate::R<u32, super::IOPENR>;
        #[doc = "Writer for register IOPENR"]
        pub type W = crate::W<u32, super::IOPENR>;
        #[doc = "Register IOPENR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IOPENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IOPAEN`"]
        pub type IOPAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPAEN`"]
        pub struct IOPAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `IOPBEN`"]
        pub type IOPBEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPBEN`"]
        pub struct IOPBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPBEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `IOPCEN`"]
        pub type IOPCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPCEN`"]
        pub struct IOPCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `IOPDEN`"]
        pub type IOPDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPDEN`"]
        pub struct IOPDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `IOPFEN`"]
        pub type IOPFEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPFEN`"]
        pub struct IOPFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPFEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - I/O port A clock enable"]
            #[inline(always)]
            pub fn iopaen(&self) -> IOPAEN_R {
                IOPAEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - I/O port B clock enable"]
            #[inline(always)]
            pub fn iopben(&self) -> IOPBEN_R {
                IOPBEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - I/O port C clock enable"]
            #[inline(always)]
            pub fn iopcen(&self) -> IOPCEN_R {
                IOPCEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - I/O port D clock enable"]
            #[inline(always)]
            pub fn iopden(&self) -> IOPDEN_R {
                IOPDEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 5 - I/O port F clock enable"]
            #[inline(always)]
            pub fn iopfen(&self) -> IOPFEN_R {
                IOPFEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - I/O port A clock enable"]
            #[inline(always)]
            pub fn iopaen(&mut self) -> IOPAEN_W {
                IOPAEN_W { w: self }
            }
            #[doc = "Bit 1 - I/O port B clock enable"]
            #[inline(always)]
            pub fn iopben(&mut self) -> IOPBEN_W {
                IOPBEN_W { w: self }
            }
            #[doc = "Bit 2 - I/O port C clock enable"]
            #[inline(always)]
            pub fn iopcen(&mut self) -> IOPCEN_W {
                IOPCEN_W { w: self }
            }
            #[doc = "Bit 3 - I/O port D clock enable"]
            #[inline(always)]
            pub fn iopden(&mut self) -> IOPDEN_W {
                IOPDEN_W { w: self }
            }
            #[doc = "Bit 5 - I/O port F clock enable"]
            #[inline(always)]
            pub fn iopfen(&mut self) -> IOPFEN_W {
                IOPFEN_W { w: self }
            }
        }
    }
    #[doc = "AHB peripheral clock enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahbenr](ahbenr) module"]
    pub type AHBENR = crate::Reg<u32, _AHBENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AHBENR;
    #[doc = "`read()` method returns [ahbenr::R](ahbenr::R) reader structure"]
    impl crate::Readable for AHBENR {}
    #[doc = "`write(|w| ..)` method takes [ahbenr::W](ahbenr::W) writer structure"]
    impl crate::Writable for AHBENR {}
    #[doc = "AHB peripheral clock enable register"]
    pub mod ahbenr {
        #[doc = "Reader of register AHBENR"]
        pub type R = crate::R<u32, super::AHBENR>;
        #[doc = "Writer for register AHBENR"]
        pub type W = crate::W<u32, super::AHBENR>;
        #[doc = "Register AHBENR `reset()`'s with value 0"]
        impl crate::ResetValue for super::AHBENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAEN`"]
        pub type DMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAEN`"]
        pub struct DMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `FLASHEN`"]
        pub type FLASHEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FLASHEN`"]
        pub struct FLASHEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLASHEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CRCEN`"]
        pub type CRCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCEN`"]
        pub struct CRCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - DMA clock enable"]
            #[inline(always)]
            pub fn dmaen(&self) -> DMAEN_R {
                DMAEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 8 - Flash memory interface clock enable"]
            #[inline(always)]
            pub fn flashen(&self) -> FLASHEN_R {
                FLASHEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CRC clock enable"]
            #[inline(always)]
            pub fn crcen(&self) -> CRCEN_R {
                CRCEN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DMA clock enable"]
            #[inline(always)]
            pub fn dmaen(&mut self) -> DMAEN_W {
                DMAEN_W { w: self }
            }
            #[doc = "Bit 8 - Flash memory interface clock enable"]
            #[inline(always)]
            pub fn flashen(&mut self) -> FLASHEN_W {
                FLASHEN_W { w: self }
            }
            #[doc = "Bit 12 - CRC clock enable"]
            #[inline(always)]
            pub fn crcen(&mut self) -> CRCEN_W {
                CRCEN_W { w: self }
            }
        }
    }
    #[doc = "APB peripheral clock enable register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apbenr1](apbenr1) module"]
    pub type APBENR1 = crate::Reg<u32, _APBENR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APBENR1;
    #[doc = "`read()` method returns [apbenr1::R](apbenr1::R) reader structure"]
    impl crate::Readable for APBENR1 {}
    #[doc = "`write(|w| ..)` method takes [apbenr1::W](apbenr1::W) writer structure"]
    impl crate::Writable for APBENR1 {}
    #[doc = "APB peripheral clock enable register 1"]
    pub mod apbenr1 {
        #[doc = "Reader of register APBENR1"]
        pub type R = crate::R<u32, super::APBENR1>;
        #[doc = "Writer for register APBENR1"]
        pub type W = crate::W<u32, super::APBENR1>;
        #[doc = "Register APBENR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::APBENR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TIM2EN`"]
        pub type TIM2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM2EN`"]
        pub struct TIM2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TIM3EN`"]
        pub type TIM3EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM3EN`"]
        pub struct TIM3EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RTCAPBEN`"]
        pub type RTCAPBEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCAPBEN`"]
        pub struct RTCAPBEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCAPBEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `WWDGEN`"]
        pub type WWDGEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WWDGEN`"]
        pub struct WWDGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `SPI2EN`"]
        pub type SPI2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI2EN`"]
        pub struct SPI2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `USART2EN`"]
        pub type USART2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART2EN`"]
        pub struct USART2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `LPUART1EN`"]
        pub type LPUART1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPUART1EN`"]
        pub struct LPUART1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPUART1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `I2C1EN`"]
        pub type I2C1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C1EN`"]
        pub struct I2C1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `I2C2EN`"]
        pub type I2C2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C2EN`"]
        pub struct I2C2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `DBGEN`"]
        pub type DBGEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBGEN`"]
        pub struct DBGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBGEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `PWREN`"]
        pub type PWREN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PWREN`"]
        pub struct PWREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `LPTIM2EN`"]
        pub type LPTIM2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPTIM2EN`"]
        pub struct LPTIM2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPTIM2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `LPTIM1EN`"]
        pub type LPTIM1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPTIM1EN`"]
        pub struct LPTIM1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPTIM1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - TIM2 timer clock enable"]
            #[inline(always)]
            pub fn tim2en(&self) -> TIM2EN_R {
                TIM2EN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TIM3 timer clock enable"]
            #[inline(always)]
            pub fn tim3en(&self) -> TIM3EN_R {
                TIM3EN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 10 - RTC APB clock enable"]
            #[inline(always)]
            pub fn rtcapben(&self) -> RTCAPBEN_R {
                RTCAPBEN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - WWDG clock enable"]
            #[inline(always)]
            pub fn wwdgen(&self) -> WWDGEN_R {
                WWDGEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 14 - SPI2 clock enable"]
            #[inline(always)]
            pub fn spi2en(&self) -> SPI2EN_R {
                SPI2EN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 17 - USART2 clock enable"]
            #[inline(always)]
            pub fn usart2en(&self) -> USART2EN_R {
                USART2EN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 20 - LPUART1 clock enable"]
            #[inline(always)]
            pub fn lpuart1en(&self) -> LPUART1EN_R {
                LPUART1EN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - I2C1 clock enable"]
            #[inline(always)]
            pub fn i2c1en(&self) -> I2C1EN_R {
                I2C1EN_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - I2C2 clock enable"]
            #[inline(always)]
            pub fn i2c2en(&self) -> I2C2EN_R {
                I2C2EN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Debug support clock enable"]
            #[inline(always)]
            pub fn dbgen(&self) -> DBGEN_R {
                DBGEN_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Power interface clock enable"]
            #[inline(always)]
            pub fn pwren(&self) -> PWREN_R {
                PWREN_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 30 - LPTIM2 clock enable"]
            #[inline(always)]
            pub fn lptim2en(&self) -> LPTIM2EN_R {
                LPTIM2EN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - LPTIM1 clock enable"]
            #[inline(always)]
            pub fn lptim1en(&self) -> LPTIM1EN_R {
                LPTIM1EN_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TIM2 timer clock enable"]
            #[inline(always)]
            pub fn tim2en(&mut self) -> TIM2EN_W {
                TIM2EN_W { w: self }
            }
            #[doc = "Bit 1 - TIM3 timer clock enable"]
            #[inline(always)]
            pub fn tim3en(&mut self) -> TIM3EN_W {
                TIM3EN_W { w: self }
            }
            #[doc = "Bit 10 - RTC APB clock enable"]
            #[inline(always)]
            pub fn rtcapben(&mut self) -> RTCAPBEN_W {
                RTCAPBEN_W { w: self }
            }
            #[doc = "Bit 11 - WWDG clock enable"]
            #[inline(always)]
            pub fn wwdgen(&mut self) -> WWDGEN_W {
                WWDGEN_W { w: self }
            }
            #[doc = "Bit 14 - SPI2 clock enable"]
            #[inline(always)]
            pub fn spi2en(&mut self) -> SPI2EN_W {
                SPI2EN_W { w: self }
            }
            #[doc = "Bit 17 - USART2 clock enable"]
            #[inline(always)]
            pub fn usart2en(&mut self) -> USART2EN_W {
                USART2EN_W { w: self }
            }
            #[doc = "Bit 20 - LPUART1 clock enable"]
            #[inline(always)]
            pub fn lpuart1en(&mut self) -> LPUART1EN_W {
                LPUART1EN_W { w: self }
            }
            #[doc = "Bit 21 - I2C1 clock enable"]
            #[inline(always)]
            pub fn i2c1en(&mut self) -> I2C1EN_W {
                I2C1EN_W { w: self }
            }
            #[doc = "Bit 22 - I2C2 clock enable"]
            #[inline(always)]
            pub fn i2c2en(&mut self) -> I2C2EN_W {
                I2C2EN_W { w: self }
            }
            #[doc = "Bit 27 - Debug support clock enable"]
            #[inline(always)]
            pub fn dbgen(&mut self) -> DBGEN_W {
                DBGEN_W { w: self }
            }
            #[doc = "Bit 28 - Power interface clock enable"]
            #[inline(always)]
            pub fn pwren(&mut self) -> PWREN_W {
                PWREN_W { w: self }
            }
            #[doc = "Bit 30 - LPTIM2 clock enable"]
            #[inline(always)]
            pub fn lptim2en(&mut self) -> LPTIM2EN_W {
                LPTIM2EN_W { w: self }
            }
            #[doc = "Bit 31 - LPTIM1 clock enable"]
            #[inline(always)]
            pub fn lptim1en(&mut self) -> LPTIM1EN_W {
                LPTIM1EN_W { w: self }
            }
        }
    }
    #[doc = "APB peripheral clock enable register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apbenr2](apbenr2) module"]
    pub type APBENR2 = crate::Reg<u32, _APBENR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APBENR2;
    #[doc = "`read()` method returns [apbenr2::R](apbenr2::R) reader structure"]
    impl crate::Readable for APBENR2 {}
    #[doc = "`write(|w| ..)` method takes [apbenr2::W](apbenr2::W) writer structure"]
    impl crate::Writable for APBENR2 {}
    #[doc = "APB peripheral clock enable register 2"]
    pub mod apbenr2 {
        #[doc = "Reader of register APBENR2"]
        pub type R = crate::R<u32, super::APBENR2>;
        #[doc = "Writer for register APBENR2"]
        pub type W = crate::W<u32, super::APBENR2>;
        #[doc = "Register APBENR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::APBENR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SYSCFGEN`"]
        pub type SYSCFGEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYSCFGEN`"]
        pub struct SYSCFGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSCFGEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TIM1EN`"]
        pub type TIM1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM1EN`"]
        pub struct TIM1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `SPI1EN`"]
        pub type SPI1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI1EN`"]
        pub struct SPI1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `USART1EN`"]
        pub type USART1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART1EN`"]
        pub struct USART1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `TIM14EN`"]
        pub type TIM14EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM14EN`"]
        pub struct TIM14EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM14EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `TIM16EN`"]
        pub type TIM16EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM16EN`"]
        pub struct TIM16EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM16EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `TIM17EN`"]
        pub type TIM17EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM17EN`"]
        pub struct TIM17EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM17EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `ADCEN`"]
        pub type ADCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADCEN`"]
        pub struct ADCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SYSCFG, COMP and VREFBUF clock enable"]
            #[inline(always)]
            pub fn syscfgen(&self) -> SYSCFGEN_R {
                SYSCFGEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 11 - TIM1 timer clock enable"]
            #[inline(always)]
            pub fn tim1en(&self) -> TIM1EN_R {
                TIM1EN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - SPI1 clock enable"]
            #[inline(always)]
            pub fn spi1en(&self) -> SPI1EN_R {
                SPI1EN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 14 - USART1 clock enable"]
            #[inline(always)]
            pub fn usart1en(&self) -> USART1EN_R {
                USART1EN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - TIM14 timer clock enable"]
            #[inline(always)]
            pub fn tim14en(&self) -> TIM14EN_R {
                TIM14EN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 17 - TIM16 timer clock enable"]
            #[inline(always)]
            pub fn tim16en(&self) -> TIM16EN_R {
                TIM16EN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - TIM16 timer clock enable"]
            #[inline(always)]
            pub fn tim17en(&self) -> TIM17EN_R {
                TIM17EN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 20 - ADC clock enable"]
            #[inline(always)]
            pub fn adcen(&self) -> ADCEN_R {
                ADCEN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SYSCFG, COMP and VREFBUF clock enable"]
            #[inline(always)]
            pub fn syscfgen(&mut self) -> SYSCFGEN_W {
                SYSCFGEN_W { w: self }
            }
            #[doc = "Bit 11 - TIM1 timer clock enable"]
            #[inline(always)]
            pub fn tim1en(&mut self) -> TIM1EN_W {
                TIM1EN_W { w: self }
            }
            #[doc = "Bit 12 - SPI1 clock enable"]
            #[inline(always)]
            pub fn spi1en(&mut self) -> SPI1EN_W {
                SPI1EN_W { w: self }
            }
            #[doc = "Bit 14 - USART1 clock enable"]
            #[inline(always)]
            pub fn usart1en(&mut self) -> USART1EN_W {
                USART1EN_W { w: self }
            }
            #[doc = "Bit 15 - TIM14 timer clock enable"]
            #[inline(always)]
            pub fn tim14en(&mut self) -> TIM14EN_W {
                TIM14EN_W { w: self }
            }
            #[doc = "Bit 17 - TIM16 timer clock enable"]
            #[inline(always)]
            pub fn tim16en(&mut self) -> TIM16EN_W {
                TIM16EN_W { w: self }
            }
            #[doc = "Bit 18 - TIM16 timer clock enable"]
            #[inline(always)]
            pub fn tim17en(&mut self) -> TIM17EN_W {
                TIM17EN_W { w: self }
            }
            #[doc = "Bit 20 - ADC clock enable"]
            #[inline(always)]
            pub fn adcen(&mut self) -> ADCEN_W {
                ADCEN_W { w: self }
            }
        }
    }
    #[doc = "GPIO in Sleep mode clock enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [iopsmenr](iopsmenr) module"]
    pub type IOPSMENR = crate::Reg<u32, _IOPSMENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IOPSMENR;
    #[doc = "`read()` method returns [iopsmenr::R](iopsmenr::R) reader structure"]
    impl crate::Readable for IOPSMENR {}
    #[doc = "`write(|w| ..)` method takes [iopsmenr::W](iopsmenr::W) writer structure"]
    impl crate::Writable for IOPSMENR {}
    #[doc = "GPIO in Sleep mode clock enable register"]
    pub mod iopsmenr {
        #[doc = "Reader of register IOPSMENR"]
        pub type R = crate::R<u32, super::IOPSMENR>;
        #[doc = "Writer for register IOPSMENR"]
        pub type W = crate::W<u32, super::IOPSMENR>;
        #[doc = "Register IOPSMENR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IOPSMENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IOPASMEN`"]
        pub type IOPASMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPASMEN`"]
        pub struct IOPASMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPASMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `IOPBSMEN`"]
        pub type IOPBSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPBSMEN`"]
        pub struct IOPBSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPBSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `IOPCSMEN`"]
        pub type IOPCSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPCSMEN`"]
        pub struct IOPCSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPCSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `IOPDSMEN`"]
        pub type IOPDSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPDSMEN`"]
        pub struct IOPDSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPDSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `IOPFSMEN`"]
        pub type IOPFSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOPFSMEN`"]
        pub struct IOPFSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOPFSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - I/O port A clock enable during Sleep mode"]
            #[inline(always)]
            pub fn iopasmen(&self) -> IOPASMEN_R {
                IOPASMEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - I/O port B clock enable during Sleep mode"]
            #[inline(always)]
            pub fn iopbsmen(&self) -> IOPBSMEN_R {
                IOPBSMEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - I/O port C clock enable during Sleep mode"]
            #[inline(always)]
            pub fn iopcsmen(&self) -> IOPCSMEN_R {
                IOPCSMEN_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - I/O port D clock enable during Sleep mode"]
            #[inline(always)]
            pub fn iopdsmen(&self) -> IOPDSMEN_R {
                IOPDSMEN_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 5 - I/O port F clock enable during Sleep mode"]
            #[inline(always)]
            pub fn iopfsmen(&self) -> IOPFSMEN_R {
                IOPFSMEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - I/O port A clock enable during Sleep mode"]
            #[inline(always)]
            pub fn iopasmen(&mut self) -> IOPASMEN_W {
                IOPASMEN_W { w: self }
            }
            #[doc = "Bit 1 - I/O port B clock enable during Sleep mode"]
            #[inline(always)]
            pub fn iopbsmen(&mut self) -> IOPBSMEN_W {
                IOPBSMEN_W { w: self }
            }
            #[doc = "Bit 2 - I/O port C clock enable during Sleep mode"]
            #[inline(always)]
            pub fn iopcsmen(&mut self) -> IOPCSMEN_W {
                IOPCSMEN_W { w: self }
            }
            #[doc = "Bit 3 - I/O port D clock enable during Sleep mode"]
            #[inline(always)]
            pub fn iopdsmen(&mut self) -> IOPDSMEN_W {
                IOPDSMEN_W { w: self }
            }
            #[doc = "Bit 5 - I/O port F clock enable during Sleep mode"]
            #[inline(always)]
            pub fn iopfsmen(&mut self) -> IOPFSMEN_W {
                IOPFSMEN_W { w: self }
            }
        }
    }
    #[doc = "AHB peripheral clock enable in Sleep mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ahbsmenr](ahbsmenr) module"]
    pub type AHBSMENR = crate::Reg<u32, _AHBSMENR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AHBSMENR;
    #[doc = "`read()` method returns [ahbsmenr::R](ahbsmenr::R) reader structure"]
    impl crate::Readable for AHBSMENR {}
    #[doc = "`write(|w| ..)` method takes [ahbsmenr::W](ahbsmenr::W) writer structure"]
    impl crate::Writable for AHBSMENR {}
    #[doc = "AHB peripheral clock enable in Sleep mode register"]
    pub mod ahbsmenr {
        #[doc = "Reader of register AHBSMENR"]
        pub type R = crate::R<u32, super::AHBSMENR>;
        #[doc = "Writer for register AHBSMENR"]
        pub type W = crate::W<u32, super::AHBSMENR>;
        #[doc = "Register AHBSMENR `reset()`'s with value 0"]
        impl crate::ResetValue for super::AHBSMENR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMASMEN`"]
        pub type DMASMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMASMEN`"]
        pub struct DMASMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMASMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `FLASHSMEN`"]
        pub type FLASHSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FLASHSMEN`"]
        pub struct FLASHSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FLASHSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SRAMSMEN`"]
        pub type SRAMSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SRAMSMEN`"]
        pub struct SRAMSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRAMSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CRCSMEN`"]
        pub type CRCSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCSMEN`"]
        pub struct CRCSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - DMA clock enable during Sleep mode"]
            #[inline(always)]
            pub fn dmasmen(&self) -> DMASMEN_R {
                DMASMEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 8 - Flash memory interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn flashsmen(&self) -> FLASHSMEN_R {
                FLASHSMEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - SRAM clock enable during Sleep mode"]
            #[inline(always)]
            pub fn sramsmen(&self) -> SRAMSMEN_R {
                SRAMSMEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CRC clock enable during Sleep mode"]
            #[inline(always)]
            pub fn crcsmen(&self) -> CRCSMEN_R {
                CRCSMEN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DMA clock enable during Sleep mode"]
            #[inline(always)]
            pub fn dmasmen(&mut self) -> DMASMEN_W {
                DMASMEN_W { w: self }
            }
            #[doc = "Bit 8 - Flash memory interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn flashsmen(&mut self) -> FLASHSMEN_W {
                FLASHSMEN_W { w: self }
            }
            #[doc = "Bit 9 - SRAM clock enable during Sleep mode"]
            #[inline(always)]
            pub fn sramsmen(&mut self) -> SRAMSMEN_W {
                SRAMSMEN_W { w: self }
            }
            #[doc = "Bit 12 - CRC clock enable during Sleep mode"]
            #[inline(always)]
            pub fn crcsmen(&mut self) -> CRCSMEN_W {
                CRCSMEN_W { w: self }
            }
        }
    }
    #[doc = "APB peripheral clock enable in Sleep mode register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apbsmenr1](apbsmenr1) module"]
    pub type APBSMENR1 = crate::Reg<u32, _APBSMENR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APBSMENR1;
    #[doc = "`read()` method returns [apbsmenr1::R](apbsmenr1::R) reader structure"]
    impl crate::Readable for APBSMENR1 {}
    #[doc = "`write(|w| ..)` method takes [apbsmenr1::W](apbsmenr1::W) writer structure"]
    impl crate::Writable for APBSMENR1 {}
    #[doc = "APB peripheral clock enable in Sleep mode register 1"]
    pub mod apbsmenr1 {
        #[doc = "Reader of register APBSMENR1"]
        pub type R = crate::R<u32, super::APBSMENR1>;
        #[doc = "Writer for register APBSMENR1"]
        pub type W = crate::W<u32, super::APBSMENR1>;
        #[doc = "Register APBSMENR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::APBSMENR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TIM2SMEN`"]
        pub type TIM2SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM2SMEN`"]
        pub struct TIM2SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM2SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TIM3SMEN`"]
        pub type TIM3SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM3SMEN`"]
        pub struct TIM3SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM3SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RTCAPBSMEN`"]
        pub type RTCAPBSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCAPBSMEN`"]
        pub struct RTCAPBSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCAPBSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `WWDGSMEN`"]
        pub type WWDGSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WWDGSMEN`"]
        pub struct WWDGSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `SPI2SMEN`"]
        pub type SPI2SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI2SMEN`"]
        pub struct SPI2SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI2SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `USART2SMEN`"]
        pub type USART2SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART2SMEN`"]
        pub struct USART2SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART2SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `LPUART1SMEN`"]
        pub type LPUART1SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPUART1SMEN`"]
        pub struct LPUART1SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPUART1SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `I2C1SMEN`"]
        pub type I2C1SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C1SMEN`"]
        pub struct I2C1SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `I2C2SMEN`"]
        pub type I2C2SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C2SMEN`"]
        pub struct I2C2SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `DBGSMEN`"]
        pub type DBGSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBGSMEN`"]
        pub struct DBGSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBGSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `PWRSMEN`"]
        pub type PWRSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PWRSMEN`"]
        pub struct PWRSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `LPTIM2SMEN`"]
        pub type LPTIM2SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPTIM2SMEN`"]
        pub struct LPTIM2SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPTIM2SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `LPTIM1SMEN`"]
        pub type LPTIM1SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPTIM1SMEN`"]
        pub struct LPTIM1SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPTIM1SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - TIM2 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim2smen(&self) -> TIM2SMEN_R {
                TIM2SMEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TIM3 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim3smen(&self) -> TIM3SMEN_R {
                TIM3SMEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 10 - RTC APB clock enable during Sleep mode"]
            #[inline(always)]
            pub fn rtcapbsmen(&self) -> RTCAPBSMEN_R {
                RTCAPBSMEN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - WWDG clock enable during Sleep mode"]
            #[inline(always)]
            pub fn wwdgsmen(&self) -> WWDGSMEN_R {
                WWDGSMEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 14 - SPI2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn spi2smen(&self) -> SPI2SMEN_R {
                SPI2SMEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 17 - USART2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usart2smen(&self) -> USART2SMEN_R {
                USART2SMEN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 20 - LPUART1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn lpuart1smen(&self) -> LPUART1SMEN_R {
                LPUART1SMEN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - I2C1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn i2c1smen(&self) -> I2C1SMEN_R {
                I2C1SMEN_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - I2C2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn i2c2smen(&self) -> I2C2SMEN_R {
                I2C2SMEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Debug support clock enable during Sleep mode"]
            #[inline(always)]
            pub fn dbgsmen(&self) -> DBGSMEN_R {
                DBGSMEN_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Power interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn pwrsmen(&self) -> PWRSMEN_R {
                PWRSMEN_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Low Power Timer 2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn lptim2smen(&self) -> LPTIM2SMEN_R {
                LPTIM2SMEN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Low Power Timer 1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn lptim1smen(&self) -> LPTIM1SMEN_R {
                LPTIM1SMEN_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TIM2 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim2smen(&mut self) -> TIM2SMEN_W {
                TIM2SMEN_W { w: self }
            }
            #[doc = "Bit 1 - TIM3 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim3smen(&mut self) -> TIM3SMEN_W {
                TIM3SMEN_W { w: self }
            }
            #[doc = "Bit 10 - RTC APB clock enable during Sleep mode"]
            #[inline(always)]
            pub fn rtcapbsmen(&mut self) -> RTCAPBSMEN_W {
                RTCAPBSMEN_W { w: self }
            }
            #[doc = "Bit 11 - WWDG clock enable during Sleep mode"]
            #[inline(always)]
            pub fn wwdgsmen(&mut self) -> WWDGSMEN_W {
                WWDGSMEN_W { w: self }
            }
            #[doc = "Bit 14 - SPI2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn spi2smen(&mut self) -> SPI2SMEN_W {
                SPI2SMEN_W { w: self }
            }
            #[doc = "Bit 17 - USART2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usart2smen(&mut self) -> USART2SMEN_W {
                USART2SMEN_W { w: self }
            }
            #[doc = "Bit 20 - LPUART1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn lpuart1smen(&mut self) -> LPUART1SMEN_W {
                LPUART1SMEN_W { w: self }
            }
            #[doc = "Bit 21 - I2C1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn i2c1smen(&mut self) -> I2C1SMEN_W {
                I2C1SMEN_W { w: self }
            }
            #[doc = "Bit 22 - I2C2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn i2c2smen(&mut self) -> I2C2SMEN_W {
                I2C2SMEN_W { w: self }
            }
            #[doc = "Bit 27 - Debug support clock enable during Sleep mode"]
            #[inline(always)]
            pub fn dbgsmen(&mut self) -> DBGSMEN_W {
                DBGSMEN_W { w: self }
            }
            #[doc = "Bit 28 - Power interface clock enable during Sleep mode"]
            #[inline(always)]
            pub fn pwrsmen(&mut self) -> PWRSMEN_W {
                PWRSMEN_W { w: self }
            }
            #[doc = "Bit 30 - Low Power Timer 2 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn lptim2smen(&mut self) -> LPTIM2SMEN_W {
                LPTIM2SMEN_W { w: self }
            }
            #[doc = "Bit 31 - Low Power Timer 1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn lptim1smen(&mut self) -> LPTIM1SMEN_W {
                LPTIM1SMEN_W { w: self }
            }
        }
    }
    #[doc = "APB peripheral clock enable in Sleep mode register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apbsmenr2](apbsmenr2) module"]
    pub type APBSMENR2 = crate::Reg<u32, _APBSMENR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APBSMENR2;
    #[doc = "`read()` method returns [apbsmenr2::R](apbsmenr2::R) reader structure"]
    impl crate::Readable for APBSMENR2 {}
    #[doc = "`write(|w| ..)` method takes [apbsmenr2::W](apbsmenr2::W) writer structure"]
    impl crate::Writable for APBSMENR2 {}
    #[doc = "APB peripheral clock enable in Sleep mode register 2"]
    pub mod apbsmenr2 {
        #[doc = "Reader of register APBSMENR2"]
        pub type R = crate::R<u32, super::APBSMENR2>;
        #[doc = "Writer for register APBSMENR2"]
        pub type W = crate::W<u32, super::APBSMENR2>;
        #[doc = "Register APBSMENR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::APBSMENR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SYSCFGSMEN`"]
        pub type SYSCFGSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SYSCFGSMEN`"]
        pub struct SYSCFGSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYSCFGSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TIM1SMEN`"]
        pub type TIM1SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM1SMEN`"]
        pub struct TIM1SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM1SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `SPI1SMEN`"]
        pub type SPI1SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPI1SMEN`"]
        pub struct SPI1SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPI1SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `USART1SMEN`"]
        pub type USART1SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USART1SMEN`"]
        pub struct USART1SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `TIM14SMEN`"]
        pub type TIM14SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM14SMEN`"]
        pub struct TIM14SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM14SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `TIM16SMEN`"]
        pub type TIM16SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM16SMEN`"]
        pub struct TIM16SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM16SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `TIM17SMEN`"]
        pub type TIM17SMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM17SMEN`"]
        pub struct TIM17SMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM17SMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `ADCSMEN`"]
        pub type ADCSMEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADCSMEN`"]
        pub struct ADCSMEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCSMEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - SYSCFG, COMP and VREFBUF clock enable during Sleep mode"]
            #[inline(always)]
            pub fn syscfgsmen(&self) -> SYSCFGSMEN_R {
                SYSCFGSMEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 11 - TIM1 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim1smen(&self) -> TIM1SMEN_R {
                TIM1SMEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - SPI1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn spi1smen(&self) -> SPI1SMEN_R {
                SPI1SMEN_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 14 - USART1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usart1smen(&self) -> USART1SMEN_R {
                USART1SMEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - TIM14 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim14smen(&self) -> TIM14SMEN_R {
                TIM14SMEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 17 - TIM16 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim16smen(&self) -> TIM16SMEN_R {
                TIM16SMEN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - TIM16 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim17smen(&self) -> TIM17SMEN_R {
                TIM17SMEN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 20 - ADC clock enable during Sleep mode"]
            #[inline(always)]
            pub fn adcsmen(&self) -> ADCSMEN_R {
                ADCSMEN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - SYSCFG, COMP and VREFBUF clock enable during Sleep mode"]
            #[inline(always)]
            pub fn syscfgsmen(&mut self) -> SYSCFGSMEN_W {
                SYSCFGSMEN_W { w: self }
            }
            #[doc = "Bit 11 - TIM1 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim1smen(&mut self) -> TIM1SMEN_W {
                TIM1SMEN_W { w: self }
            }
            #[doc = "Bit 12 - SPI1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn spi1smen(&mut self) -> SPI1SMEN_W {
                SPI1SMEN_W { w: self }
            }
            #[doc = "Bit 14 - USART1 clock enable during Sleep mode"]
            #[inline(always)]
            pub fn usart1smen(&mut self) -> USART1SMEN_W {
                USART1SMEN_W { w: self }
            }
            #[doc = "Bit 15 - TIM14 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim14smen(&mut self) -> TIM14SMEN_W {
                TIM14SMEN_W { w: self }
            }
            #[doc = "Bit 17 - TIM16 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim16smen(&mut self) -> TIM16SMEN_W {
                TIM16SMEN_W { w: self }
            }
            #[doc = "Bit 18 - TIM16 timer clock enable during Sleep mode"]
            #[inline(always)]
            pub fn tim17smen(&mut self) -> TIM17SMEN_W {
                TIM17SMEN_W { w: self }
            }
            #[doc = "Bit 20 - ADC clock enable during Sleep mode"]
            #[inline(always)]
            pub fn adcsmen(&mut self) -> ADCSMEN_W {
                ADCSMEN_W { w: self }
            }
        }
    }
    #[doc = "Peripherals independent clock configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccipr](ccipr) module"]
    pub type CCIPR = crate::Reg<u32, _CCIPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCIPR;
    #[doc = "`read()` method returns [ccipr::R](ccipr::R) reader structure"]
    impl crate::Readable for CCIPR {}
    #[doc = "`write(|w| ..)` method takes [ccipr::W](ccipr::W) writer structure"]
    impl crate::Writable for CCIPR {}
    #[doc = "Peripherals independent clock configuration register"]
    pub mod ccipr {
        #[doc = "Reader of register CCIPR"]
        pub type R = crate::R<u32, super::CCIPR>;
        #[doc = "Writer for register CCIPR"]
        pub type W = crate::W<u32, super::CCIPR>;
        #[doc = "Register CCIPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCIPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `USART1SEL`"]
        pub type USART1SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `USART1SEL`"]
        pub struct USART1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USART1SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `LPUART1SEL`"]
        pub type LPUART1SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LPUART1SEL`"]
        pub struct LPUART1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPUART1SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `I2C1SEL`"]
        pub type I2C1SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2C1SEL`"]
        pub struct I2C1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `I2S2SEL`"]
        pub type I2S2SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2S2SEL`"]
        pub struct I2S2SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2S2SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `LPTIM1SEL`"]
        pub type LPTIM1SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LPTIM1SEL`"]
        pub struct LPTIM1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPTIM1SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `LPTIM2SEL`"]
        pub type LPTIM2SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LPTIM2SEL`"]
        pub struct LPTIM2SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPTIM2SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `TIM1SEL`"]
        pub type TIM1SEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIM1SEL`"]
        pub struct TIM1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIM1SEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `RNGSEL`"]
        pub type RNGSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RNGSEL`"]
        pub struct RNGSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RNGSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `RNGDIV`"]
        pub type RNGDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RNGDIV`"]
        pub struct RNGDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RNGDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `ADCSEL`"]
        pub type ADCSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADCSEL`"]
        pub struct ADCSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - USART1 clock source selection"]
            #[inline(always)]
            pub fn usart1sel(&self) -> USART1SEL_R {
                USART1SEL_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - LPUART1 clock source selection"]
            #[inline(always)]
            pub fn lpuart1sel(&self) -> LPUART1SEL_R {
                LPUART1SEL_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - I2C1 clock source selection"]
            #[inline(always)]
            pub fn i2c1sel(&self) -> I2C1SEL_R {
                I2C1SEL_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - I2S1 clock source selection"]
            #[inline(always)]
            pub fn i2s2sel(&self) -> I2S2SEL_R {
                I2S2SEL_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - LPTIM1 clock source selection"]
            #[inline(always)]
            pub fn lptim1sel(&self) -> LPTIM1SEL_R {
                LPTIM1SEL_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - LPTIM2 clock source selection"]
            #[inline(always)]
            pub fn lptim2sel(&self) -> LPTIM2SEL_R {
                LPTIM2SEL_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bit 22 - TIM1 clock source selection"]
            #[inline(always)]
            pub fn tim1sel(&self) -> TIM1SEL_R {
                TIM1SEL_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 26:27 - RNG clock source selection"]
            #[inline(always)]
            pub fn rngsel(&self) -> RNGSEL_R {
                RNGSEL_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Division factor of RNG clock divider"]
            #[inline(always)]
            pub fn rngdiv(&self) -> RNGDIV_R {
                RNGDIV_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 30:31 - ADCs clock source selection"]
            #[inline(always)]
            pub fn adcsel(&self) -> ADCSEL_R {
                ADCSEL_R::new(((self.bits >> 30) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - USART1 clock source selection"]
            #[inline(always)]
            pub fn usart1sel(&mut self) -> USART1SEL_W {
                USART1SEL_W { w: self }
            }
            #[doc = "Bits 10:11 - LPUART1 clock source selection"]
            #[inline(always)]
            pub fn lpuart1sel(&mut self) -> LPUART1SEL_W {
                LPUART1SEL_W { w: self }
            }
            #[doc = "Bits 12:13 - I2C1 clock source selection"]
            #[inline(always)]
            pub fn i2c1sel(&mut self) -> I2C1SEL_W {
                I2C1SEL_W { w: self }
            }
            #[doc = "Bits 14:15 - I2S1 clock source selection"]
            #[inline(always)]
            pub fn i2s2sel(&mut self) -> I2S2SEL_W {
                I2S2SEL_W { w: self }
            }
            #[doc = "Bits 18:19 - LPTIM1 clock source selection"]
            #[inline(always)]
            pub fn lptim1sel(&mut self) -> LPTIM1SEL_W {
                LPTIM1SEL_W { w: self }
            }
            #[doc = "Bits 20:21 - LPTIM2 clock source selection"]
            #[inline(always)]
            pub fn lptim2sel(&mut self) -> LPTIM2SEL_W {
                LPTIM2SEL_W { w: self }
            }
            #[doc = "Bit 22 - TIM1 clock source selection"]
            #[inline(always)]
            pub fn tim1sel(&mut self) -> TIM1SEL_W {
                TIM1SEL_W { w: self }
            }
            #[doc = "Bits 26:27 - RNG clock source selection"]
            #[inline(always)]
            pub fn rngsel(&mut self) -> RNGSEL_W {
                RNGSEL_W { w: self }
            }
            #[doc = "Bits 28:29 - Division factor of RNG clock divider"]
            #[inline(always)]
            pub fn rngdiv(&mut self) -> RNGDIV_W {
                RNGDIV_W { w: self }
            }
            #[doc = "Bits 30:31 - ADCs clock source selection"]
            #[inline(always)]
            pub fn adcsel(&mut self) -> ADCSEL_W {
                ADCSEL_W { w: self }
            }
        }
    }
    #[doc = "RTC domain control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdcr](bdcr) module"]
    pub type BDCR = crate::Reg<u32, _BDCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BDCR;
    #[doc = "`read()` method returns [bdcr::R](bdcr::R) reader structure"]
    impl crate::Readable for BDCR {}
    #[doc = "`write(|w| ..)` method takes [bdcr::W](bdcr::W) writer structure"]
    impl crate::Writable for BDCR {}
    #[doc = "RTC domain control register"]
    pub mod bdcr {
        #[doc = "Reader of register BDCR"]
        pub type R = crate::R<u32, super::BDCR>;
        #[doc = "Writer for register BDCR"]
        pub type W = crate::W<u32, super::BDCR>;
        #[doc = "Register BDCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BDCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LSEON`"]
        pub type LSEON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSEON`"]
        pub struct LSEON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSEON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `LSERDY`"]
        pub type LSERDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSERDY`"]
        pub struct LSERDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSERDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `LSEBYP`"]
        pub type LSEBYP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSEBYP`"]
        pub struct LSEBYP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSEBYP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `LSEDRV`"]
        pub type LSEDRV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LSEDRV`"]
        pub struct LSEDRV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSEDRV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `LSECSSON`"]
        pub type LSECSSON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSECSSON`"]
        pub struct LSECSSON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSECSSON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `LSECSSD`"]
        pub type LSECSSD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSECSSD`"]
        pub struct LSECSSD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSECSSD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RTCSEL`"]
        pub type RTCSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RTCSEL`"]
        pub struct RTCSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `RTCEN`"]
        pub type RTCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTCEN`"]
        pub struct RTCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `BDRST`"]
        pub type BDRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BDRST`"]
        pub struct BDRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BDRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `LSCOEN`"]
        pub type LSCOEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSCOEN`"]
        pub struct LSCOEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSCOEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `LSCOSEL`"]
        pub type LSCOSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSCOSEL`"]
        pub struct LSCOSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSCOSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - LSE oscillator enable"]
            #[inline(always)]
            pub fn lseon(&self) -> LSEON_R {
                LSEON_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - LSE oscillator ready"]
            #[inline(always)]
            pub fn lserdy(&self) -> LSERDY_R {
                LSERDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - LSE oscillator bypass"]
            #[inline(always)]
            pub fn lsebyp(&self) -> LSEBYP_R {
                LSEBYP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 3:4 - LSE oscillator drive capability"]
            #[inline(always)]
            pub fn lsedrv(&self) -> LSEDRV_R {
                LSEDRV_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bit 5 - CSS on LSE enable"]
            #[inline(always)]
            pub fn lsecsson(&self) -> LSECSSON_R {
                LSECSSON_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - CSS on LSE failure Detection"]
            #[inline(always)]
            pub fn lsecssd(&self) -> LSECSSD_R {
                LSECSSD_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - RTC clock source selection"]
            #[inline(always)]
            pub fn rtcsel(&self) -> RTCSEL_R {
                RTCSEL_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 15 - RTC clock enable"]
            #[inline(always)]
            pub fn rtcen(&self) -> RTCEN_R {
                RTCEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RTC domain software reset"]
            #[inline(always)]
            pub fn bdrst(&self) -> BDRST_R {
                BDRST_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Low-speed clock output (LSCO) enable"]
            #[inline(always)]
            pub fn lscoen(&self) -> LSCOEN_R {
                LSCOEN_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Low-speed clock output selection"]
            #[inline(always)]
            pub fn lscosel(&self) -> LSCOSEL_R {
                LSCOSEL_R::new(((self.bits >> 25) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - LSE oscillator enable"]
            #[inline(always)]
            pub fn lseon(&mut self) -> LSEON_W {
                LSEON_W { w: self }
            }
            #[doc = "Bit 1 - LSE oscillator ready"]
            #[inline(always)]
            pub fn lserdy(&mut self) -> LSERDY_W {
                LSERDY_W { w: self }
            }
            #[doc = "Bit 2 - LSE oscillator bypass"]
            #[inline(always)]
            pub fn lsebyp(&mut self) -> LSEBYP_W {
                LSEBYP_W { w: self }
            }
            #[doc = "Bits 3:4 - LSE oscillator drive capability"]
            #[inline(always)]
            pub fn lsedrv(&mut self) -> LSEDRV_W {
                LSEDRV_W { w: self }
            }
            #[doc = "Bit 5 - CSS on LSE enable"]
            #[inline(always)]
            pub fn lsecsson(&mut self) -> LSECSSON_W {
                LSECSSON_W { w: self }
            }
            #[doc = "Bit 6 - CSS on LSE failure Detection"]
            #[inline(always)]
            pub fn lsecssd(&mut self) -> LSECSSD_W {
                LSECSSD_W { w: self }
            }
            #[doc = "Bits 8:9 - RTC clock source selection"]
            #[inline(always)]
            pub fn rtcsel(&mut self) -> RTCSEL_W {
                RTCSEL_W { w: self }
            }
            #[doc = "Bit 15 - RTC clock enable"]
            #[inline(always)]
            pub fn rtcen(&mut self) -> RTCEN_W {
                RTCEN_W { w: self }
            }
            #[doc = "Bit 16 - RTC domain software reset"]
            #[inline(always)]
            pub fn bdrst(&mut self) -> BDRST_W {
                BDRST_W { w: self }
            }
            #[doc = "Bit 24 - Low-speed clock output (LSCO) enable"]
            #[inline(always)]
            pub fn lscoen(&mut self) -> LSCOEN_W {
                LSCOEN_W { w: self }
            }
            #[doc = "Bit 25 - Low-speed clock output selection"]
            #[inline(always)]
            pub fn lscosel(&mut self) -> LSCOSEL_W {
                LSCOSEL_W { w: self }
            }
        }
    }
    #[doc = "Control/status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "`write(|w| ..)` method takes [csr::W](csr::W) writer structure"]
    impl crate::Writable for CSR {}
    #[doc = "Control/status register"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Writer for register CSR"]
        pub type W = crate::W<u32, super::CSR>;
        #[doc = "Register CSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LSION`"]
        pub type LSION_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSION`"]
        pub struct LSION_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSION_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `LSIRDY`"]
        pub type LSIRDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSIRDY`"]
        pub struct LSIRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSIRDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RMVF`"]
        pub type RMVF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RMVF`"]
        pub struct RMVF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RMVF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `OBLRSTF`"]
        pub type OBLRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OBLRSTF`"]
        pub struct OBLRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OBLRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `PINRSTF`"]
        pub type PINRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PINRSTF`"]
        pub struct PINRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PINRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `PWRRSTF`"]
        pub type PWRRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PWRRSTF`"]
        pub struct PWRRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PWRRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `SFTRSTF`"]
        pub type SFTRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SFTRSTF`"]
        pub struct SFTRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SFTRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `IWDGRSTF`"]
        pub type IWDGRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IWDGRSTF`"]
        pub struct IWDGRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IWDGRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `WWDGRSTF`"]
        pub type WWDGRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WWDGRSTF`"]
        pub struct WWDGRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WWDGRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `LPWRRSTF`"]
        pub type LPWRRSTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPWRRSTF`"]
        pub struct LPWRRSTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPWRRSTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - LSI oscillator enable"]
            #[inline(always)]
            pub fn lsion(&self) -> LSION_R {
                LSION_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - LSI oscillator ready"]
            #[inline(always)]
            pub fn lsirdy(&self) -> LSIRDY_R {
                LSIRDY_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Remove reset flags"]
            #[inline(always)]
            pub fn rmvf(&self) -> RMVF_R {
                RMVF_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Option byte loader reset flag"]
            #[inline(always)]
            pub fn oblrstf(&self) -> OBLRSTF_R {
                OBLRSTF_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Pin reset flag"]
            #[inline(always)]
            pub fn pinrstf(&self) -> PINRSTF_R {
                PINRSTF_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - BOR or POR/PDR flag"]
            #[inline(always)]
            pub fn pwrrstf(&self) -> PWRRSTF_R {
                PWRRSTF_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Software reset flag"]
            #[inline(always)]
            pub fn sftrstf(&self) -> SFTRSTF_R {
                SFTRSTF_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Independent window watchdog reset flag"]
            #[inline(always)]
            pub fn iwdgrstf(&self) -> IWDGRSTF_R {
                IWDGRSTF_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Window watchdog reset flag"]
            #[inline(always)]
            pub fn wwdgrstf(&self) -> WWDGRSTF_R {
                WWDGRSTF_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Low-power reset flag"]
            #[inline(always)]
            pub fn lpwrrstf(&self) -> LPWRRSTF_R {
                LPWRRSTF_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - LSI oscillator enable"]
            #[inline(always)]
            pub fn lsion(&mut self) -> LSION_W {
                LSION_W { w: self }
            }
            #[doc = "Bit 1 - LSI oscillator ready"]
            #[inline(always)]
            pub fn lsirdy(&mut self) -> LSIRDY_W {
                LSIRDY_W { w: self }
            }
            #[doc = "Bit 23 - Remove reset flags"]
            #[inline(always)]
            pub fn rmvf(&mut self) -> RMVF_W {
                RMVF_W { w: self }
            }
            #[doc = "Bit 25 - Option byte loader reset flag"]
            #[inline(always)]
            pub fn oblrstf(&mut self) -> OBLRSTF_W {
                OBLRSTF_W { w: self }
            }
            #[doc = "Bit 26 - Pin reset flag"]
            #[inline(always)]
            pub fn pinrstf(&mut self) -> PINRSTF_W {
                PINRSTF_W { w: self }
            }
            #[doc = "Bit 27 - BOR or POR/PDR flag"]
            #[inline(always)]
            pub fn pwrrstf(&mut self) -> PWRRSTF_W {
                PWRRSTF_W { w: self }
            }
            #[doc = "Bit 28 - Software reset flag"]
            #[inline(always)]
            pub fn sftrstf(&mut self) -> SFTRSTF_W {
                SFTRSTF_W { w: self }
            }
            #[doc = "Bit 29 - Independent window watchdog reset flag"]
            #[inline(always)]
            pub fn iwdgrstf(&mut self) -> IWDGRSTF_W {
                IWDGRSTF_W { w: self }
            }
            #[doc = "Bit 30 - Window watchdog reset flag"]
            #[inline(always)]
            pub fn wwdgrstf(&mut self) -> WWDGRSTF_W {
                WWDGRSTF_W { w: self }
            }
            #[doc = "Bit 31 - Low-power reset flag"]
            #[inline(always)]
            pub fn lpwrrstf(&mut self) -> LPWRRSTF_W {
                LPWRRSTF_W { w: self }
            }
        }
    }
}
#[doc = "Power control"]
pub struct PWR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PWR {}
impl PWR {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwr::RegisterBlock {
        0x4000_7000 as *const _
    }
}
impl Deref for PWR {
    type Target = pwr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*PWR::ptr() }
    }
}
#[doc = "Power control"]
pub mod pwr {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Power control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - Power control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - Power control register 3"]
        pub cr3: CR3,
        #[doc = "0x0c - Power control register 4"]
        pub cr4: CR4,
        #[doc = "0x10 - Power status register 1"]
        pub sr1: SR1,
        #[doc = "0x14 - Power status register 2"]
        pub sr2: SR2,
        #[doc = "0x18 - Power status clear register"]
        pub scr: SCR,
        _reserved7: [u8; 4usize],
        #[doc = "0x20 - Power Port A pull-up control register"]
        pub pucra: PUCRA,
        #[doc = "0x24 - Power Port A pull-down control register"]
        pub pdcra: PDCRA,
        #[doc = "0x28 - Power Port B pull-up control register"]
        pub pucrb: PUCRB,
        #[doc = "0x2c - Power Port B pull-down control register"]
        pub pdcrb: PDCRB,
        #[doc = "0x30 - Power Port C pull-up control register"]
        pub pucrc: PUCRC,
        #[doc = "0x34 - Power Port C pull-down control register"]
        pub pdcrc: PDCRC,
        #[doc = "0x38 - Power Port D pull-up control register"]
        pub pucrd: PUCRD,
        #[doc = "0x3c - Power Port D pull-down control register"]
        pub pdcrd: PDCRD,
        _reserved15: [u8; 8usize],
        #[doc = "0x48 - Power Port F pull-up control register"]
        pub pucrf: PUCRF,
        #[doc = "0x4c - Power Port F pull-down control register"]
        pub pdcrf: PDCRF,
    }
    #[doc = "Power control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "Power control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0x0200"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0200
            }
        }
        #[doc = "Reader of field `LPR`"]
        pub type LPR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LPR`"]
        pub struct LPR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `VOS`"]
        pub type VOS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VOS`"]
        pub struct VOS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VOS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 9)) | (((value as u32) & 0x03) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `DBP`"]
        pub type DBP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBP`"]
        pub struct DBP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `FPD_LPSLP`"]
        pub type FPD_LPSLP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FPD_LPSLP`"]
        pub struct FPD_LPSLP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPD_LPSLP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `FPD_LPRUN`"]
        pub type FPD_LPRUN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FPD_LPRUN`"]
        pub struct FPD_LPRUN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPD_LPRUN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `FPD_STOP`"]
        pub type FPD_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FPD_STOP`"]
        pub struct FPD_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPD_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `LPMS`"]
        pub type LPMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LPMS`"]
        pub struct LPMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LPMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Low-power run"]
            #[inline(always)]
            pub fn lpr(&self) -> LPR_R {
                LPR_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - Voltage scaling range selection"]
            #[inline(always)]
            pub fn vos(&self) -> VOS_R {
                VOS_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bit 8 - Disable backup domain write protection"]
            #[inline(always)]
            pub fn dbp(&self) -> DBP_R {
                DBP_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Flash memory powered down during Low-power sleep mode"]
            #[inline(always)]
            pub fn fpd_lpslp(&self) -> FPD_LPSLP_R {
                FPD_LPSLP_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Flash memory powered down during Low-power run mode"]
            #[inline(always)]
            pub fn fpd_lprun(&self) -> FPD_LPRUN_R {
                FPD_LPRUN_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Flash memory powered down during Stop mode"]
            #[inline(always)]
            pub fn fpd_stop(&self) -> FPD_STOP_R {
                FPD_STOP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 0:2 - Low-power mode selection"]
            #[inline(always)]
            pub fn lpms(&self) -> LPMS_R {
                LPMS_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 14 - Low-power run"]
            #[inline(always)]
            pub fn lpr(&mut self) -> LPR_W {
                LPR_W { w: self }
            }
            #[doc = "Bits 9:10 - Voltage scaling range selection"]
            #[inline(always)]
            pub fn vos(&mut self) -> VOS_W {
                VOS_W { w: self }
            }
            #[doc = "Bit 8 - Disable backup domain write protection"]
            #[inline(always)]
            pub fn dbp(&mut self) -> DBP_W {
                DBP_W { w: self }
            }
            #[doc = "Bit 5 - Flash memory powered down during Low-power sleep mode"]
            #[inline(always)]
            pub fn fpd_lpslp(&mut self) -> FPD_LPSLP_W {
                FPD_LPSLP_W { w: self }
            }
            #[doc = "Bit 4 - Flash memory powered down during Low-power run mode"]
            #[inline(always)]
            pub fn fpd_lprun(&mut self) -> FPD_LPRUN_W {
                FPD_LPRUN_W { w: self }
            }
            #[doc = "Bit 3 - Flash memory powered down during Stop mode"]
            #[inline(always)]
            pub fn fpd_stop(&mut self) -> FPD_STOP_W {
                FPD_STOP_W { w: self }
            }
            #[doc = "Bits 0:2 - Low-power mode selection"]
            #[inline(always)]
            pub fn lpms(&mut self) -> LPMS_W {
                LPMS_W { w: self }
            }
        }
    }
    #[doc = "Power control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "Power control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PVDE`"]
        pub type PVDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PVDE`"]
        pub struct PVDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PVDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `PVDFT`"]
        pub type PVDFT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PVDFT`"]
        pub struct PVDFT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PVDFT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 1)) | (((value as u32) & 0x07) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PVDRT`"]
        pub type PVDRT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PVDRT`"]
        pub struct PVDRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PVDRT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Power voltage detector enable"]
            #[inline(always)]
            pub fn pvde(&self) -> PVDE_R {
                PVDE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bits 1:3 - Power voltage detector falling threshold selection"]
            #[inline(always)]
            pub fn pvdft(&self) -> PVDFT_R {
                PVDFT_R::new(((self.bits >> 1) & 0x07) as u8)
            }
            #[doc = "Bits 4:6 - Power voltage detector rising threshold selection"]
            #[inline(always)]
            pub fn pvdrt(&self) -> PVDRT_R {
                PVDRT_R::new(((self.bits >> 4) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Power voltage detector enable"]
            #[inline(always)]
            pub fn pvde(&mut self) -> PVDE_W {
                PVDE_W { w: self }
            }
            #[doc = "Bits 1:3 - Power voltage detector falling threshold selection"]
            #[inline(always)]
            pub fn pvdft(&mut self) -> PVDFT_W {
                PVDFT_W { w: self }
            }
            #[doc = "Bits 4:6 - Power voltage detector rising threshold selection"]
            #[inline(always)]
            pub fn pvdrt(&mut self) -> PVDRT_W {
                PVDRT_W { w: self }
            }
        }
    }
    #[doc = "Power control register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr3](cr3) module"]
    pub type CR3 = crate::Reg<u32, _CR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR3;
    #[doc = "`read()` method returns [cr3::R](cr3::R) reader structure"]
    impl crate::Readable for CR3 {}
    #[doc = "`write(|w| ..)` method takes [cr3::W](cr3::W) writer structure"]
    impl crate::Writable for CR3 {}
    #[doc = "Power control register 3"]
    pub mod cr3 {
        #[doc = "Reader of register CR3"]
        pub type R = crate::R<u32, super::CR3>;
        #[doc = "Writer for register CR3"]
        pub type W = crate::W<u32, super::CR3>;
        #[doc = "Register CR3 `reset()`'s with value 0x8000"]
        impl crate::ResetValue for super::CR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x8000
            }
        }
        #[doc = "Reader of field `EWUP1`"]
        pub type EWUP1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP1`"]
        pub struct EWUP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP2`"]
        pub type EWUP2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP2`"]
        pub struct EWUP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP4`"]
        pub type EWUP4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP4`"]
        pub struct EWUP4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP5`"]
        pub type EWUP5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP5`"]
        pub struct EWUP5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `EWUP6`"]
        pub type EWUP6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EWUP6`"]
        pub struct EWUP6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EWUP6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `RRS`"]
        pub type RRS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RRS`"]
        pub struct RRS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RRS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ULPEN`"]
        pub type ULPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ULPEN`"]
        pub struct ULPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ULPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `APC`"]
        pub type APC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `APC`"]
        pub struct APC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> APC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `EIWUL`"]
        pub type EIWUL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EIWUL`"]
        pub struct EIWUL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EIWUL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Enable Wakeup pin WKUP1"]
            #[inline(always)]
            pub fn ewup1(&self) -> EWUP1_R {
                EWUP1_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Enable Wakeup pin WKUP2"]
            #[inline(always)]
            pub fn ewup2(&self) -> EWUP2_R {
                EWUP2_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Enable Wakeup pin WKUP4"]
            #[inline(always)]
            pub fn ewup4(&self) -> EWUP4_R {
                EWUP4_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Enable WKUP5 wakeup pin"]
            #[inline(always)]
            pub fn ewup5(&self) -> EWUP5_R {
                EWUP5_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Enable WKUP6 wakeup pin"]
            #[inline(always)]
            pub fn ewup6(&self) -> EWUP6_R {
                EWUP6_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 8 - SRAM retention in Standby mode"]
            #[inline(always)]
            pub fn rrs(&self) -> RRS_R {
                RRS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Enable the periodical sampling mode for PDR detection"]
            #[inline(always)]
            pub fn ulpen(&self) -> ULPEN_R {
                ULPEN_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Apply pull-up and pull-down configuration"]
            #[inline(always)]
            pub fn apc(&self) -> APC_R {
                APC_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Enable internal wakeup line"]
            #[inline(always)]
            pub fn eiwul(&self) -> EIWUL_R {
                EIWUL_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Enable Wakeup pin WKUP1"]
            #[inline(always)]
            pub fn ewup1(&mut self) -> EWUP1_W {
                EWUP1_W { w: self }
            }
            #[doc = "Bit 1 - Enable Wakeup pin WKUP2"]
            #[inline(always)]
            pub fn ewup2(&mut self) -> EWUP2_W {
                EWUP2_W { w: self }
            }
            #[doc = "Bit 3 - Enable Wakeup pin WKUP4"]
            #[inline(always)]
            pub fn ewup4(&mut self) -> EWUP4_W {
                EWUP4_W { w: self }
            }
            #[doc = "Bit 4 - Enable WKUP5 wakeup pin"]
            #[inline(always)]
            pub fn ewup5(&mut self) -> EWUP5_W {
                EWUP5_W { w: self }
            }
            #[doc = "Bit 5 - Enable WKUP6 wakeup pin"]
            #[inline(always)]
            pub fn ewup6(&mut self) -> EWUP6_W {
                EWUP6_W { w: self }
            }
            #[doc = "Bit 8 - SRAM retention in Standby mode"]
            #[inline(always)]
            pub fn rrs(&mut self) -> RRS_W {
                RRS_W { w: self }
            }
            #[doc = "Bit 9 - Enable the periodical sampling mode for PDR detection"]
            #[inline(always)]
            pub fn ulpen(&mut self) -> ULPEN_W {
                ULPEN_W { w: self }
            }
            #[doc = "Bit 10 - Apply pull-up and pull-down configuration"]
            #[inline(always)]
            pub fn apc(&mut self) -> APC_W {
                APC_W { w: self }
            }
            #[doc = "Bit 15 - Enable internal wakeup line"]
            #[inline(always)]
            pub fn eiwul(&mut self) -> EIWUL_W {
                EIWUL_W { w: self }
            }
        }
    }
    #[doc = "Power control register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr4](cr4) module"]
    pub type CR4 = crate::Reg<u32, _CR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR4;
    #[doc = "`read()` method returns [cr4::R](cr4::R) reader structure"]
    impl crate::Readable for CR4 {}
    #[doc = "`write(|w| ..)` method takes [cr4::W](cr4::W) writer structure"]
    impl crate::Writable for CR4 {}
    #[doc = "Power control register 4"]
    pub mod cr4 {
        #[doc = "Reader of register CR4"]
        pub type R = crate::R<u32, super::CR4>;
        #[doc = "Writer for register CR4"]
        pub type W = crate::W<u32, super::CR4>;
        #[doc = "Register CR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WP1`"]
        pub type WP1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WP1`"]
        pub struct WP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WP1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `WP2`"]
        pub type WP2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WP2`"]
        pub struct WP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WP2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `WP4`"]
        pub type WP4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WP4`"]
        pub struct WP4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WP4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `WP5`"]
        pub type WP5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WP5`"]
        pub struct WP5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WP5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `WP6`"]
        pub type WP6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WP6`"]
        pub struct WP6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WP6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `VBE`"]
        pub type VBE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VBE`"]
        pub struct VBE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VBE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `VBRS`"]
        pub type VBRS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VBRS`"]
        pub struct VBRS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VBRS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Wakeup pin WKUP1 polarity"]
            #[inline(always)]
            pub fn wp1(&self) -> WP1_R {
                WP1_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Wakeup pin WKUP2 polarity"]
            #[inline(always)]
            pub fn wp2(&self) -> WP2_R {
                WP2_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Wakeup pin WKUP4 polarity"]
            #[inline(always)]
            pub fn wp4(&self) -> WP4_R {
                WP4_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Wakeup pin WKUP5 polarity"]
            #[inline(always)]
            pub fn wp5(&self) -> WP5_R {
                WP5_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - WKUP6 wakeup pin polarity"]
            #[inline(always)]
            pub fn wp6(&self) -> WP6_R {
                WP6_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 8 - VBAT battery charging enable"]
            #[inline(always)]
            pub fn vbe(&self) -> VBE_R {
                VBE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - VBAT battery charging resistor selection"]
            #[inline(always)]
            pub fn vbrs(&self) -> VBRS_R {
                VBRS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Wakeup pin WKUP1 polarity"]
            #[inline(always)]
            pub fn wp1(&mut self) -> WP1_W {
                WP1_W { w: self }
            }
            #[doc = "Bit 1 - Wakeup pin WKUP2 polarity"]
            #[inline(always)]
            pub fn wp2(&mut self) -> WP2_W {
                WP2_W { w: self }
            }
            #[doc = "Bit 3 - Wakeup pin WKUP4 polarity"]
            #[inline(always)]
            pub fn wp4(&mut self) -> WP4_W {
                WP4_W { w: self }
            }
            #[doc = "Bit 4 - Wakeup pin WKUP5 polarity"]
            #[inline(always)]
            pub fn wp5(&mut self) -> WP5_W {
                WP5_W { w: self }
            }
            #[doc = "Bit 5 - WKUP6 wakeup pin polarity"]
            #[inline(always)]
            pub fn wp6(&mut self) -> WP6_W {
                WP6_W { w: self }
            }
            #[doc = "Bit 8 - VBAT battery charging enable"]
            #[inline(always)]
            pub fn vbe(&mut self) -> VBE_W {
                VBE_W { w: self }
            }
            #[doc = "Bit 9 - VBAT battery charging resistor selection"]
            #[inline(always)]
            pub fn vbrs(&mut self) -> VBRS_W {
                VBRS_W { w: self }
            }
        }
    }
    #[doc = "Power status register 1\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr1](sr1) module"]
    pub type SR1 = crate::Reg<u32, _SR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR1;
    #[doc = "`read()` method returns [sr1::R](sr1::R) reader structure"]
    impl crate::Readable for SR1 {}
    #[doc = "Power status register 1"]
    pub mod sr1 {
        #[doc = "Reader of register SR1"]
        pub type R = crate::R<u32, super::SR1>;
        #[doc = "Reader of field `WUF1`"]
        pub type WUF1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUF2`"]
        pub type WUF2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUF4`"]
        pub type WUF4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUF5`"]
        pub type WUF5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUF6`"]
        pub type WUF6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SBF`"]
        pub type SBF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUFI`"]
        pub type WUFI_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - Wakeup flag 1"]
            #[inline(always)]
            pub fn wuf1(&self) -> WUF1_R {
                WUF1_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Wakeup flag 2"]
            #[inline(always)]
            pub fn wuf2(&self) -> WUF2_R {
                WUF2_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Wakeup flag 4"]
            #[inline(always)]
            pub fn wuf4(&self) -> WUF4_R {
                WUF4_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Wakeup flag 5"]
            #[inline(always)]
            pub fn wuf5(&self) -> WUF5_R {
                WUF5_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Wakeup flag 6"]
            #[inline(always)]
            pub fn wuf6(&self) -> WUF6_R {
                WUF6_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Standby flag"]
            #[inline(always)]
            pub fn sbf(&self) -> SBF_R {
                SBF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Wakeup flag internal"]
            #[inline(always)]
            pub fn wufi(&self) -> WUFI_R {
                WUFI_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
    }
    #[doc = "Power status register 2\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr2](sr2) module"]
    pub type SR2 = crate::Reg<u32, _SR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR2;
    #[doc = "`read()` method returns [sr2::R](sr2::R) reader structure"]
    impl crate::Readable for SR2 {}
    #[doc = "Power status register 2"]
    pub mod sr2 {
        #[doc = "Reader of register SR2"]
        pub type R = crate::R<u32, super::SR2>;
        #[doc = "Reader of field `PVDO`"]
        pub type PVDO_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VOSF`"]
        pub type VOSF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `REGLPF`"]
        pub type REGLPF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `REGLPS`"]
        pub type REGLPS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FLASH_RDY`"]
        pub type FLASH_RDY_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 11 - Power voltage detector output"]
            #[inline(always)]
            pub fn pvdo(&self) -> PVDO_R {
                PVDO_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Voltage scaling flag"]
            #[inline(always)]
            pub fn vosf(&self) -> VOSF_R {
                VOSF_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Low-power regulator flag"]
            #[inline(always)]
            pub fn reglpf(&self) -> REGLPF_R {
                REGLPF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Low-power regulator started"]
            #[inline(always)]
            pub fn reglps(&self) -> REGLPS_R {
                REGLPS_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Flash ready flag"]
            #[inline(always)]
            pub fn flash_rdy(&self) -> FLASH_RDY_R {
                FLASH_RDY_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
    }
    #[doc = "Power status clear register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [scr](scr) module"]
    pub type SCR = crate::Reg<u32, _SCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SCR;
    #[doc = "`write(|w| ..)` method takes [scr::W](scr::W) writer structure"]
    impl crate::Writable for SCR {}
    #[doc = "Power status clear register"]
    pub mod scr {
        #[doc = "Writer for register SCR"]
        pub type W = crate::W<u32, super::SCR>;
        #[doc = "Register SCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CSBF`"]
        pub struct CSBF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CSBF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `CWUF6`"]
        pub struct CWUF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CWUF6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `CWUF5`"]
        pub struct CWUF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CWUF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `CWUF4`"]
        pub struct CWUF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CWUF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `CWUF2`"]
        pub struct CWUF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CWUF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `CWUF1`"]
        pub struct CWUF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CWUF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 8 - Clear standby flag"]
            #[inline(always)]
            pub fn csbf(&mut self) -> CSBF_W {
                CSBF_W { w: self }
            }
            #[doc = "Bit 5 - Clear wakeup flag 6"]
            #[inline(always)]
            pub fn cwuf6(&mut self) -> CWUF6_W {
                CWUF6_W { w: self }
            }
            #[doc = "Bit 4 - Clear wakeup flag 5"]
            #[inline(always)]
            pub fn cwuf5(&mut self) -> CWUF5_W {
                CWUF5_W { w: self }
            }
            #[doc = "Bit 3 - Clear wakeup flag 4"]
            #[inline(always)]
            pub fn cwuf4(&mut self) -> CWUF4_W {
                CWUF4_W { w: self }
            }
            #[doc = "Bit 1 - Clear wakeup flag 2"]
            #[inline(always)]
            pub fn cwuf2(&mut self) -> CWUF2_W {
                CWUF2_W { w: self }
            }
            #[doc = "Bit 0 - Clear wakeup flag 1"]
            #[inline(always)]
            pub fn cwuf1(&mut self) -> CWUF1_W {
                CWUF1_W { w: self }
            }
        }
    }
    #[doc = "Power Port A pull-up control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pucra](pucra) module"]
    pub type PUCRA = crate::Reg<u32, _PUCRA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUCRA;
    #[doc = "`read()` method returns [pucra::R](pucra::R) reader structure"]
    impl crate::Readable for PUCRA {}
    #[doc = "`write(|w| ..)` method takes [pucra::W](pucra::W) writer structure"]
    impl crate::Writable for PUCRA {}
    #[doc = "Power Port A pull-up control register"]
    pub mod pucra {
        #[doc = "Reader of register PUCRA"]
        pub type R = crate::R<u32, super::PUCRA>;
        #[doc = "Writer for register PUCRA"]
        pub type W = crate::W<u32, super::PUCRA>;
        #[doc = "Register PUCRA `reset()`'s with value 0"]
        impl crate::ResetValue for super::PUCRA {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PU15`"]
        pub type PU15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU15`"]
        pub struct PU15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `PU14`"]
        pub type PU14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU14`"]
        pub struct PU14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PU13`"]
        pub type PU13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU13`"]
        pub struct PU13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `PU12`"]
        pub type PU12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU12`"]
        pub struct PU12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `PU11`"]
        pub type PU11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU11`"]
        pub struct PU11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `PU10`"]
        pub type PU10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU10`"]
        pub struct PU10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PU9`"]
        pub type PU9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU9`"]
        pub struct PU9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PU8`"]
        pub type PU8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU8`"]
        pub struct PU8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PU7`"]
        pub type PU7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU7`"]
        pub struct PU7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PU6`"]
        pub type PU6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU6`"]
        pub struct PU6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `PU5`"]
        pub type PU5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU5`"]
        pub struct PU5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `PU4`"]
        pub type PU4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU4`"]
        pub struct PU4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PU3`"]
        pub type PU3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU3`"]
        pub struct PU3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PU2`"]
        pub type PU2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU2`"]
        pub struct PU2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PU1`"]
        pub type PU1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU1`"]
        pub struct PU1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PU0`"]
        pub type PU0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU0`"]
        pub struct PU0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu15(&self) -> PU15_R {
                PU15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu14(&self) -> PU14_R {
                PU14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu13(&self) -> PU13_R {
                PU13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu12(&self) -> PU12_R {
                PU12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu11(&self) -> PU11_R {
                PU11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu10(&self) -> PU10_R {
                PU10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu9(&self) -> PU9_R {
                PU9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu8(&self) -> PU8_R {
                PU8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu7(&self) -> PU7_R {
                PU7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu6(&self) -> PU6_R {
                PU6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu5(&self) -> PU5_R {
                PU5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu4(&self) -> PU4_R {
                PU4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu3(&self) -> PU3_R {
                PU3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu2(&self) -> PU2_R {
                PU2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu1(&self) -> PU1_R {
                PU1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu0(&self) -> PU0_R {
                PU0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu15(&mut self) -> PU15_W {
                PU15_W { w: self }
            }
            #[doc = "Bit 14 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu14(&mut self) -> PU14_W {
                PU14_W { w: self }
            }
            #[doc = "Bit 13 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu13(&mut self) -> PU13_W {
                PU13_W { w: self }
            }
            #[doc = "Bit 12 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu12(&mut self) -> PU12_W {
                PU12_W { w: self }
            }
            #[doc = "Bit 11 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu11(&mut self) -> PU11_W {
                PU11_W { w: self }
            }
            #[doc = "Bit 10 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu10(&mut self) -> PU10_W {
                PU10_W { w: self }
            }
            #[doc = "Bit 9 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu9(&mut self) -> PU9_W {
                PU9_W { w: self }
            }
            #[doc = "Bit 8 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu8(&mut self) -> PU8_W {
                PU8_W { w: self }
            }
            #[doc = "Bit 7 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu7(&mut self) -> PU7_W {
                PU7_W { w: self }
            }
            #[doc = "Bit 6 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu6(&mut self) -> PU6_W {
                PU6_W { w: self }
            }
            #[doc = "Bit 5 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu5(&mut self) -> PU5_W {
                PU5_W { w: self }
            }
            #[doc = "Bit 4 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu4(&mut self) -> PU4_W {
                PU4_W { w: self }
            }
            #[doc = "Bit 3 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu3(&mut self) -> PU3_W {
                PU3_W { w: self }
            }
            #[doc = "Bit 2 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu2(&mut self) -> PU2_W {
                PU2_W { w: self }
            }
            #[doc = "Bit 1 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu1(&mut self) -> PU1_W {
                PU1_W { w: self }
            }
            #[doc = "Bit 0 - Port A pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu0(&mut self) -> PU0_W {
                PU0_W { w: self }
            }
        }
    }
    #[doc = "Power Port A pull-down control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdcra](pdcra) module"]
    pub type PDCRA = crate::Reg<u32, _PDCRA>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCRA;
    #[doc = "`read()` method returns [pdcra::R](pdcra::R) reader structure"]
    impl crate::Readable for PDCRA {}
    #[doc = "`write(|w| ..)` method takes [pdcra::W](pdcra::W) writer structure"]
    impl crate::Writable for PDCRA {}
    #[doc = "Power Port A pull-down control register"]
    pub mod pdcra {
        #[doc = "Reader of register PDCRA"]
        pub type R = crate::R<u32, super::PDCRA>;
        #[doc = "Writer for register PDCRA"]
        pub type W = crate::W<u32, super::PDCRA>;
        #[doc = "Register PDCRA `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDCRA {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PD15`"]
        pub type PD15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD15`"]
        pub struct PD15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `PD14`"]
        pub type PD14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD14`"]
        pub struct PD14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PD13`"]
        pub type PD13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD13`"]
        pub struct PD13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `PD12`"]
        pub type PD12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD12`"]
        pub struct PD12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `PD11`"]
        pub type PD11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD11`"]
        pub struct PD11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `PD10`"]
        pub type PD10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD10`"]
        pub struct PD10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PD9`"]
        pub type PD9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD9`"]
        pub struct PD9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PD8`"]
        pub type PD8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD8`"]
        pub struct PD8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PD7`"]
        pub type PD7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD7`"]
        pub struct PD7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PD6`"]
        pub type PD6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD6`"]
        pub struct PD6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `PD5`"]
        pub type PD5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD5`"]
        pub struct PD5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `PD4`"]
        pub type PD4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD4`"]
        pub struct PD4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PD3`"]
        pub type PD3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD3`"]
        pub struct PD3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PD2`"]
        pub type PD2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD2`"]
        pub struct PD2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PD1`"]
        pub type PD1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD1`"]
        pub struct PD1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PD0`"]
        pub type PD0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD0`"]
        pub struct PD0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd15(&self) -> PD15_R {
                PD15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd14(&self) -> PD14_R {
                PD14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd13(&self) -> PD13_R {
                PD13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd12(&self) -> PD12_R {
                PD12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd11(&self) -> PD11_R {
                PD11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd10(&self) -> PD10_R {
                PD10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd9(&self) -> PD9_R {
                PD9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd8(&self) -> PD8_R {
                PD8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd7(&self) -> PD7_R {
                PD7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd6(&self) -> PD6_R {
                PD6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd5(&self) -> PD5_R {
                PD5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd4(&self) -> PD4_R {
                PD4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd3(&self) -> PD3_R {
                PD3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd2(&self) -> PD2_R {
                PD2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd1(&self) -> PD1_R {
                PD1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd0(&self) -> PD0_R {
                PD0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd15(&mut self) -> PD15_W {
                PD15_W { w: self }
            }
            #[doc = "Bit 14 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd14(&mut self) -> PD14_W {
                PD14_W { w: self }
            }
            #[doc = "Bit 13 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd13(&mut self) -> PD13_W {
                PD13_W { w: self }
            }
            #[doc = "Bit 12 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd12(&mut self) -> PD12_W {
                PD12_W { w: self }
            }
            #[doc = "Bit 11 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd11(&mut self) -> PD11_W {
                PD11_W { w: self }
            }
            #[doc = "Bit 10 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd10(&mut self) -> PD10_W {
                PD10_W { w: self }
            }
            #[doc = "Bit 9 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd9(&mut self) -> PD9_W {
                PD9_W { w: self }
            }
            #[doc = "Bit 8 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd8(&mut self) -> PD8_W {
                PD8_W { w: self }
            }
            #[doc = "Bit 7 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd7(&mut self) -> PD7_W {
                PD7_W { w: self }
            }
            #[doc = "Bit 6 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd6(&mut self) -> PD6_W {
                PD6_W { w: self }
            }
            #[doc = "Bit 5 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd5(&mut self) -> PD5_W {
                PD5_W { w: self }
            }
            #[doc = "Bit 4 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd4(&mut self) -> PD4_W {
                PD4_W { w: self }
            }
            #[doc = "Bit 3 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd3(&mut self) -> PD3_W {
                PD3_W { w: self }
            }
            #[doc = "Bit 2 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd2(&mut self) -> PD2_W {
                PD2_W { w: self }
            }
            #[doc = "Bit 1 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd1(&mut self) -> PD1_W {
                PD1_W { w: self }
            }
            #[doc = "Bit 0 - Port A pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd0(&mut self) -> PD0_W {
                PD0_W { w: self }
            }
        }
    }
    #[doc = "Power Port B pull-up control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pucrb](pucrb) module"]
    pub type PUCRB = crate::Reg<u32, _PUCRB>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUCRB;
    #[doc = "`read()` method returns [pucrb::R](pucrb::R) reader structure"]
    impl crate::Readable for PUCRB {}
    #[doc = "`write(|w| ..)` method takes [pucrb::W](pucrb::W) writer structure"]
    impl crate::Writable for PUCRB {}
    #[doc = "Power Port B pull-up control register"]
    pub mod pucrb {
        #[doc = "Reader of register PUCRB"]
        pub type R = crate::R<u32, super::PUCRB>;
        #[doc = "Writer for register PUCRB"]
        pub type W = crate::W<u32, super::PUCRB>;
        #[doc = "Register PUCRB `reset()`'s with value 0"]
        impl crate::ResetValue for super::PUCRB {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PU15`"]
        pub type PU15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU15`"]
        pub struct PU15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `PU14`"]
        pub type PU14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU14`"]
        pub struct PU14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PU13`"]
        pub type PU13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU13`"]
        pub struct PU13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `PU12`"]
        pub type PU12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU12`"]
        pub struct PU12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `PU11`"]
        pub type PU11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU11`"]
        pub struct PU11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `PU10`"]
        pub type PU10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU10`"]
        pub struct PU10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PU9`"]
        pub type PU9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU9`"]
        pub struct PU9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PU8`"]
        pub type PU8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU8`"]
        pub struct PU8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PU7`"]
        pub type PU7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU7`"]
        pub struct PU7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PU6`"]
        pub type PU6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU6`"]
        pub struct PU6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `PU5`"]
        pub type PU5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU5`"]
        pub struct PU5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `PU4`"]
        pub type PU4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU4`"]
        pub struct PU4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PU3`"]
        pub type PU3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU3`"]
        pub struct PU3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PU2`"]
        pub type PU2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU2`"]
        pub struct PU2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PU1`"]
        pub type PU1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU1`"]
        pub struct PU1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PU0`"]
        pub type PU0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU0`"]
        pub struct PU0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu15(&self) -> PU15_R {
                PU15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu14(&self) -> PU14_R {
                PU14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu13(&self) -> PU13_R {
                PU13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu12(&self) -> PU12_R {
                PU12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu11(&self) -> PU11_R {
                PU11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu10(&self) -> PU10_R {
                PU10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu9(&self) -> PU9_R {
                PU9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu8(&self) -> PU8_R {
                PU8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu7(&self) -> PU7_R {
                PU7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu6(&self) -> PU6_R {
                PU6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu5(&self) -> PU5_R {
                PU5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu4(&self) -> PU4_R {
                PU4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu3(&self) -> PU3_R {
                PU3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu2(&self) -> PU2_R {
                PU2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu1(&self) -> PU1_R {
                PU1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu0(&self) -> PU0_R {
                PU0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu15(&mut self) -> PU15_W {
                PU15_W { w: self }
            }
            #[doc = "Bit 14 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu14(&mut self) -> PU14_W {
                PU14_W { w: self }
            }
            #[doc = "Bit 13 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu13(&mut self) -> PU13_W {
                PU13_W { w: self }
            }
            #[doc = "Bit 12 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu12(&mut self) -> PU12_W {
                PU12_W { w: self }
            }
            #[doc = "Bit 11 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu11(&mut self) -> PU11_W {
                PU11_W { w: self }
            }
            #[doc = "Bit 10 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu10(&mut self) -> PU10_W {
                PU10_W { w: self }
            }
            #[doc = "Bit 9 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu9(&mut self) -> PU9_W {
                PU9_W { w: self }
            }
            #[doc = "Bit 8 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu8(&mut self) -> PU8_W {
                PU8_W { w: self }
            }
            #[doc = "Bit 7 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu7(&mut self) -> PU7_W {
                PU7_W { w: self }
            }
            #[doc = "Bit 6 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu6(&mut self) -> PU6_W {
                PU6_W { w: self }
            }
            #[doc = "Bit 5 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu5(&mut self) -> PU5_W {
                PU5_W { w: self }
            }
            #[doc = "Bit 4 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu4(&mut self) -> PU4_W {
                PU4_W { w: self }
            }
            #[doc = "Bit 3 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu3(&mut self) -> PU3_W {
                PU3_W { w: self }
            }
            #[doc = "Bit 2 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu2(&mut self) -> PU2_W {
                PU2_W { w: self }
            }
            #[doc = "Bit 1 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu1(&mut self) -> PU1_W {
                PU1_W { w: self }
            }
            #[doc = "Bit 0 - Port B pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu0(&mut self) -> PU0_W {
                PU0_W { w: self }
            }
        }
    }
    #[doc = "Power Port B pull-down control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdcrb](pdcrb) module"]
    pub type PDCRB = crate::Reg<u32, _PDCRB>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCRB;
    #[doc = "`read()` method returns [pdcrb::R](pdcrb::R) reader structure"]
    impl crate::Readable for PDCRB {}
    #[doc = "`write(|w| ..)` method takes [pdcrb::W](pdcrb::W) writer structure"]
    impl crate::Writable for PDCRB {}
    #[doc = "Power Port B pull-down control register"]
    pub mod pdcrb {
        #[doc = "Reader of register PDCRB"]
        pub type R = crate::R<u32, super::PDCRB>;
        #[doc = "Writer for register PDCRB"]
        pub type W = crate::W<u32, super::PDCRB>;
        #[doc = "Register PDCRB `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDCRB {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PD15`"]
        pub type PD15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD15`"]
        pub struct PD15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `PD14`"]
        pub type PD14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD14`"]
        pub struct PD14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PD13`"]
        pub type PD13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD13`"]
        pub struct PD13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `PD12`"]
        pub type PD12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD12`"]
        pub struct PD12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `PD11`"]
        pub type PD11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD11`"]
        pub struct PD11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `PD10`"]
        pub type PD10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD10`"]
        pub struct PD10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PD9`"]
        pub type PD9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD9`"]
        pub struct PD9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PD8`"]
        pub type PD8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD8`"]
        pub struct PD8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PD7`"]
        pub type PD7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD7`"]
        pub struct PD7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PD6`"]
        pub type PD6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD6`"]
        pub struct PD6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `PD5`"]
        pub type PD5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD5`"]
        pub struct PD5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `PD4`"]
        pub type PD4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD4`"]
        pub struct PD4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PD3`"]
        pub type PD3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD3`"]
        pub struct PD3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PD2`"]
        pub type PD2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD2`"]
        pub struct PD2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PD1`"]
        pub type PD1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD1`"]
        pub struct PD1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PD0`"]
        pub type PD0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD0`"]
        pub struct PD0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd15(&self) -> PD15_R {
                PD15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd14(&self) -> PD14_R {
                PD14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd13(&self) -> PD13_R {
                PD13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd12(&self) -> PD12_R {
                PD12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd11(&self) -> PD11_R {
                PD11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd10(&self) -> PD10_R {
                PD10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd9(&self) -> PD9_R {
                PD9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd8(&self) -> PD8_R {
                PD8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd7(&self) -> PD7_R {
                PD7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd6(&self) -> PD6_R {
                PD6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd5(&self) -> PD5_R {
                PD5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd4(&self) -> PD4_R {
                PD4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd3(&self) -> PD3_R {
                PD3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd2(&self) -> PD2_R {
                PD2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd1(&self) -> PD1_R {
                PD1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd0(&self) -> PD0_R {
                PD0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd15(&mut self) -> PD15_W {
                PD15_W { w: self }
            }
            #[doc = "Bit 14 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd14(&mut self) -> PD14_W {
                PD14_W { w: self }
            }
            #[doc = "Bit 13 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd13(&mut self) -> PD13_W {
                PD13_W { w: self }
            }
            #[doc = "Bit 12 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd12(&mut self) -> PD12_W {
                PD12_W { w: self }
            }
            #[doc = "Bit 11 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd11(&mut self) -> PD11_W {
                PD11_W { w: self }
            }
            #[doc = "Bit 10 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd10(&mut self) -> PD10_W {
                PD10_W { w: self }
            }
            #[doc = "Bit 9 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd9(&mut self) -> PD9_W {
                PD9_W { w: self }
            }
            #[doc = "Bit 8 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd8(&mut self) -> PD8_W {
                PD8_W { w: self }
            }
            #[doc = "Bit 7 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd7(&mut self) -> PD7_W {
                PD7_W { w: self }
            }
            #[doc = "Bit 6 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd6(&mut self) -> PD6_W {
                PD6_W { w: self }
            }
            #[doc = "Bit 5 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd5(&mut self) -> PD5_W {
                PD5_W { w: self }
            }
            #[doc = "Bit 4 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd4(&mut self) -> PD4_W {
                PD4_W { w: self }
            }
            #[doc = "Bit 3 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd3(&mut self) -> PD3_W {
                PD3_W { w: self }
            }
            #[doc = "Bit 2 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd2(&mut self) -> PD2_W {
                PD2_W { w: self }
            }
            #[doc = "Bit 1 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd1(&mut self) -> PD1_W {
                PD1_W { w: self }
            }
            #[doc = "Bit 0 - Port B pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd0(&mut self) -> PD0_W {
                PD0_W { w: self }
            }
        }
    }
    #[doc = "Power Port C pull-up control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pucrc](pucrc) module"]
    pub type PUCRC = crate::Reg<u32, _PUCRC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUCRC;
    #[doc = "`read()` method returns [pucrc::R](pucrc::R) reader structure"]
    impl crate::Readable for PUCRC {}
    #[doc = "`write(|w| ..)` method takes [pucrc::W](pucrc::W) writer structure"]
    impl crate::Writable for PUCRC {}
    #[doc = "Power Port C pull-up control register"]
    pub mod pucrc {
        #[doc = "Reader of register PUCRC"]
        pub type R = crate::R<u32, super::PUCRC>;
        #[doc = "Writer for register PUCRC"]
        pub type W = crate::W<u32, super::PUCRC>;
        #[doc = "Register PUCRC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PUCRC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PU15`"]
        pub type PU15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU15`"]
        pub struct PU15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `PU14`"]
        pub type PU14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU14`"]
        pub struct PU14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PU13`"]
        pub type PU13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU13`"]
        pub struct PU13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `PU7`"]
        pub type PU7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU7`"]
        pub struct PU7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PU6`"]
        pub type PU6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU6`"]
        pub struct PU6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port C pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu15(&self) -> PU15_R {
                PU15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port C pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu14(&self) -> PU14_R {
                PU14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port C pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu13(&self) -> PU13_R {
                PU13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port C pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu7(&self) -> PU7_R {
                PU7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port C pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu6(&self) -> PU6_R {
                PU6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port C pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu15(&mut self) -> PU15_W {
                PU15_W { w: self }
            }
            #[doc = "Bit 14 - Port C pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu14(&mut self) -> PU14_W {
                PU14_W { w: self }
            }
            #[doc = "Bit 13 - Port C pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu13(&mut self) -> PU13_W {
                PU13_W { w: self }
            }
            #[doc = "Bit 7 - Port C pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu7(&mut self) -> PU7_W {
                PU7_W { w: self }
            }
            #[doc = "Bit 6 - Port C pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu6(&mut self) -> PU6_W {
                PU6_W { w: self }
            }
        }
    }
    #[doc = "Power Port C pull-down control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdcrc](pdcrc) module"]
    pub type PDCRC = crate::Reg<u32, _PDCRC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCRC;
    #[doc = "`read()` method returns [pdcrc::R](pdcrc::R) reader structure"]
    impl crate::Readable for PDCRC {}
    #[doc = "`write(|w| ..)` method takes [pdcrc::W](pdcrc::W) writer structure"]
    impl crate::Writable for PDCRC {}
    #[doc = "Power Port C pull-down control register"]
    pub mod pdcrc {
        #[doc = "Reader of register PDCRC"]
        pub type R = crate::R<u32, super::PDCRC>;
        #[doc = "Writer for register PDCRC"]
        pub type W = crate::W<u32, super::PDCRC>;
        #[doc = "Register PDCRC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDCRC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PD15`"]
        pub type PD15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD15`"]
        pub struct PD15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `PD14`"]
        pub type PD14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD14`"]
        pub struct PD14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PD13`"]
        pub type PD13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD13`"]
        pub struct PD13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `PD12`"]
        pub type PD12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD12`"]
        pub struct PD12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `PD11`"]
        pub type PD11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD11`"]
        pub struct PD11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `PD10`"]
        pub type PD10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD10`"]
        pub struct PD10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PD9`"]
        pub type PD9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD9`"]
        pub struct PD9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PD8`"]
        pub type PD8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD8`"]
        pub struct PD8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PD7`"]
        pub type PD7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD7`"]
        pub struct PD7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `PD6`"]
        pub type PD6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD6`"]
        pub struct PD6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `PD5`"]
        pub type PD5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD5`"]
        pub struct PD5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `PD4`"]
        pub type PD4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD4`"]
        pub struct PD4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PD3`"]
        pub type PD3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD3`"]
        pub struct PD3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PD2`"]
        pub type PD2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD2`"]
        pub struct PD2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PD1`"]
        pub type PD1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD1`"]
        pub struct PD1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PD0`"]
        pub type PD0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD0`"]
        pub struct PD0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd15(&self) -> PD15_R {
                PD15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd14(&self) -> PD14_R {
                PD14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd13(&self) -> PD13_R {
                PD13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd12(&self) -> PD12_R {
                PD12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd11(&self) -> PD11_R {
                PD11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd10(&self) -> PD10_R {
                PD10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd9(&self) -> PD9_R {
                PD9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd8(&self) -> PD8_R {
                PD8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd7(&self) -> PD7_R {
                PD7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd6(&self) -> PD6_R {
                PD6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd5(&self) -> PD5_R {
                PD5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd4(&self) -> PD4_R {
                PD4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd3(&self) -> PD3_R {
                PD3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd2(&self) -> PD2_R {
                PD2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd1(&self) -> PD1_R {
                PD1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd0(&self) -> PD0_R {
                PD0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd15(&mut self) -> PD15_W {
                PD15_W { w: self }
            }
            #[doc = "Bit 14 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd14(&mut self) -> PD14_W {
                PD14_W { w: self }
            }
            #[doc = "Bit 13 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd13(&mut self) -> PD13_W {
                PD13_W { w: self }
            }
            #[doc = "Bit 12 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd12(&mut self) -> PD12_W {
                PD12_W { w: self }
            }
            #[doc = "Bit 11 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd11(&mut self) -> PD11_W {
                PD11_W { w: self }
            }
            #[doc = "Bit 10 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd10(&mut self) -> PD10_W {
                PD10_W { w: self }
            }
            #[doc = "Bit 9 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd9(&mut self) -> PD9_W {
                PD9_W { w: self }
            }
            #[doc = "Bit 8 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd8(&mut self) -> PD8_W {
                PD8_W { w: self }
            }
            #[doc = "Bit 7 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd7(&mut self) -> PD7_W {
                PD7_W { w: self }
            }
            #[doc = "Bit 6 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd6(&mut self) -> PD6_W {
                PD6_W { w: self }
            }
            #[doc = "Bit 5 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd5(&mut self) -> PD5_W {
                PD5_W { w: self }
            }
            #[doc = "Bit 4 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd4(&mut self) -> PD4_W {
                PD4_W { w: self }
            }
            #[doc = "Bit 3 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd3(&mut self) -> PD3_W {
                PD3_W { w: self }
            }
            #[doc = "Bit 2 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd2(&mut self) -> PD2_W {
                PD2_W { w: self }
            }
            #[doc = "Bit 1 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd1(&mut self) -> PD1_W {
                PD1_W { w: self }
            }
            #[doc = "Bit 0 - Port C pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd0(&mut self) -> PD0_W {
                PD0_W { w: self }
            }
        }
    }
    #[doc = "Power Port D pull-up control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pucrd](pucrd) module"]
    pub type PUCRD = crate::Reg<u32, _PUCRD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUCRD;
    #[doc = "`read()` method returns [pucrd::R](pucrd::R) reader structure"]
    impl crate::Readable for PUCRD {}
    #[doc = "`write(|w| ..)` method takes [pucrd::W](pucrd::W) writer structure"]
    impl crate::Writable for PUCRD {}
    #[doc = "Power Port D pull-up control register"]
    pub mod pucrd {
        #[doc = "Reader of register PUCRD"]
        pub type R = crate::R<u32, super::PUCRD>;
        #[doc = "Writer for register PUCRD"]
        pub type W = crate::W<u32, super::PUCRD>;
        #[doc = "Register PUCRD `reset()`'s with value 0"]
        impl crate::ResetValue for super::PUCRD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PU3`"]
        pub type PU3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU3`"]
        pub struct PU3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PU2`"]
        pub type PU2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU2`"]
        pub struct PU2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PU1`"]
        pub type PU1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU1`"]
        pub struct PU1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PU0`"]
        pub type PU0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU0`"]
        pub struct PU0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - Port D pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu3(&self) -> PU3_R {
                PU3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port D pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu2(&self) -> PU2_R {
                PU2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port D pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu1(&self) -> PU1_R {
                PU1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port D pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu0(&self) -> PU0_R {
                PU0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Port D pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu3(&mut self) -> PU3_W {
                PU3_W { w: self }
            }
            #[doc = "Bit 2 - Port D pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu2(&mut self) -> PU2_W {
                PU2_W { w: self }
            }
            #[doc = "Bit 1 - Port D pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu1(&mut self) -> PU1_W {
                PU1_W { w: self }
            }
            #[doc = "Bit 0 - Port D pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu0(&mut self) -> PU0_W {
                PU0_W { w: self }
            }
        }
    }
    #[doc = "Power Port D pull-down control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdcrd](pdcrd) module"]
    pub type PDCRD = crate::Reg<u32, _PDCRD>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCRD;
    #[doc = "`read()` method returns [pdcrd::R](pdcrd::R) reader structure"]
    impl crate::Readable for PDCRD {}
    #[doc = "`write(|w| ..)` method takes [pdcrd::W](pdcrd::W) writer structure"]
    impl crate::Writable for PDCRD {}
    #[doc = "Power Port D pull-down control register"]
    pub mod pdcrd {
        #[doc = "Reader of register PDCRD"]
        pub type R = crate::R<u32, super::PDCRD>;
        #[doc = "Writer for register PDCRD"]
        pub type W = crate::W<u32, super::PDCRD>;
        #[doc = "Register PDCRD `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDCRD {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PD9`"]
        pub type PD9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD9`"]
        pub struct PD9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PD8`"]
        pub type PD8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD8`"]
        pub struct PD8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PD6`"]
        pub type PD6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD6`"]
        pub struct PD6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `PD5`"]
        pub type PD5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD5`"]
        pub struct PD5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `PD4`"]
        pub type PD4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD4`"]
        pub struct PD4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PD3`"]
        pub type PD3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD3`"]
        pub struct PD3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `PD2`"]
        pub type PD2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD2`"]
        pub struct PD2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PD1`"]
        pub type PD1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD1`"]
        pub struct PD1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PD0`"]
        pub type PD0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD0`"]
        pub struct PD0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd9(&self) -> PD9_R {
                PD9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd8(&self) -> PD8_R {
                PD8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd6(&self) -> PD6_R {
                PD6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd5(&self) -> PD5_R {
                PD5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd4(&self) -> PD4_R {
                PD4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd3(&self) -> PD3_R {
                PD3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd2(&self) -> PD2_R {
                PD2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd1(&self) -> PD1_R {
                PD1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd0(&self) -> PD0_R {
                PD0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd9(&mut self) -> PD9_W {
                PD9_W { w: self }
            }
            #[doc = "Bit 8 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd8(&mut self) -> PD8_W {
                PD8_W { w: self }
            }
            #[doc = "Bit 6 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd6(&mut self) -> PD6_W {
                PD6_W { w: self }
            }
            #[doc = "Bit 5 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd5(&mut self) -> PD5_W {
                PD5_W { w: self }
            }
            #[doc = "Bit 4 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd4(&mut self) -> PD4_W {
                PD4_W { w: self }
            }
            #[doc = "Bit 3 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd3(&mut self) -> PD3_W {
                PD3_W { w: self }
            }
            #[doc = "Bit 2 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd2(&mut self) -> PD2_W {
                PD2_W { w: self }
            }
            #[doc = "Bit 1 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd1(&mut self) -> PD1_W {
                PD1_W { w: self }
            }
            #[doc = "Bit 0 - Port D pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd0(&mut self) -> PD0_W {
                PD0_W { w: self }
            }
        }
    }
    #[doc = "Power Port F pull-up control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pucrf](pucrf) module"]
    pub type PUCRF = crate::Reg<u32, _PUCRF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUCRF;
    #[doc = "`read()` method returns [pucrf::R](pucrf::R) reader structure"]
    impl crate::Readable for PUCRF {}
    #[doc = "`write(|w| ..)` method takes [pucrf::W](pucrf::W) writer structure"]
    impl crate::Writable for PUCRF {}
    #[doc = "Power Port F pull-up control register"]
    pub mod pucrf {
        #[doc = "Reader of register PUCRF"]
        pub type R = crate::R<u32, super::PUCRF>;
        #[doc = "Writer for register PUCRF"]
        pub type W = crate::W<u32, super::PUCRF>;
        #[doc = "Register PUCRF `reset()`'s with value 0"]
        impl crate::ResetValue for super::PUCRF {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PU2`"]
        pub type PU2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU2`"]
        pub struct PU2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PU1`"]
        pub type PU1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU1`"]
        pub struct PU1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PU0`"]
        pub type PU0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PU0`"]
        pub struct PU0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PU0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - Port F pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu2(&self) -> PU2_R {
                PU2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port F pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu1(&self) -> PU1_R {
                PU1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port F pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu0(&self) -> PU0_R {
                PU0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - Port F pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu2(&mut self) -> PU2_W {
                PU2_W { w: self }
            }
            #[doc = "Bit 1 - Port F pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu1(&mut self) -> PU1_W {
                PU1_W { w: self }
            }
            #[doc = "Bit 0 - Port F pull-up bit y (y=0..15)"]
            #[inline(always)]
            pub fn pu0(&mut self) -> PU0_W {
                PU0_W { w: self }
            }
        }
    }
    #[doc = "Power Port F pull-down control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pdcrf](pdcrf) module"]
    pub type PDCRF = crate::Reg<u32, _PDCRF>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PDCRF;
    #[doc = "`read()` method returns [pdcrf::R](pdcrf::R) reader structure"]
    impl crate::Readable for PDCRF {}
    #[doc = "`write(|w| ..)` method takes [pdcrf::W](pdcrf::W) writer structure"]
    impl crate::Writable for PDCRF {}
    #[doc = "Power Port F pull-down control register"]
    pub mod pdcrf {
        #[doc = "Reader of register PDCRF"]
        pub type R = crate::R<u32, super::PDCRF>;
        #[doc = "Writer for register PDCRF"]
        pub type W = crate::W<u32, super::PDCRF>;
        #[doc = "Register PDCRF `reset()`'s with value 0"]
        impl crate::ResetValue for super::PDCRF {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PD2`"]
        pub type PD2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD2`"]
        pub struct PD2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PD1`"]
        pub type PD1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD1`"]
        pub struct PD1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PD0`"]
        pub type PD0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PD0`"]
        pub struct PD0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PD0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 2 - Port F pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd2(&self) -> PD2_R {
                PD2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port F pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd1(&self) -> PD1_R {
                PD1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port F pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd0(&self) -> PD0_R {
                PD0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - Port F pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd2(&mut self) -> PD2_W {
                PD2_W { w: self }
            }
            #[doc = "Bit 1 - Port F pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd1(&mut self) -> PD1_W {
                PD1_W { w: self }
            }
            #[doc = "Bit 0 - Port F pull-down bit y (y=0..15)"]
            #[inline(always)]
            pub fn pd0(&mut self) -> PD0_W {
                PD0_W { w: self }
            }
        }
    }
}
#[doc = "DMA controller"]
pub struct DMA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMA {}
impl DMA {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma::RegisterBlock {
        0x4002_0000 as *const _
    }
}
impl Deref for DMA {
    type Target = dma::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*DMA::ptr() }
    }
}
#[doc = "DMA controller"]
pub mod dma {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - low interrupt status register"]
        pub isr: ISR,
        #[doc = "0x04 - DMA interrupt flag clear register"]
        pub ifcr: IFCR,
        #[doc = "0x08 - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch1: CH,
        _reserved3: [u8; 4usize],
        #[doc = "0x1c - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch2: CH,
        _reserved4: [u8; 4usize],
        #[doc = "0x30 - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch3: CH,
        _reserved5: [u8; 4usize],
        #[doc = "0x44 - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch4: CH,
        _reserved6: [u8; 4usize],
        #[doc = "0x58 - Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
        pub ch5: CH,
    }
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct CH {
        #[doc = "0x00 - DMA channel x configuration register"]
        pub cr: self::ch::CR,
        #[doc = "0x04 - DMA channel x number of data register"]
        pub ndtr: self::ch::NDTR,
        #[doc = "0x08 - DMA channel x peripheral address register"]
        pub par: self::ch::PAR,
        #[doc = "0x0c - DMA channel x memory address register"]
        pub mar: self::ch::MAR,
    }
    #[doc = r"Register block"]
    #[doc = "Channel cluster: CCR?, CNDTR?, CPAR?, and CMAR? registers"]
    pub mod ch {
        #[doc = "DMA channel x configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
        pub type CR = crate::Reg<u32, _CR>;
        #[allow(missing_docs)]
        #[doc(hidden)]
        pub struct _CR;
        #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
        impl crate::Readable for CR {}
        #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
        impl crate::Writable for CR {}
        #[doc = "DMA channel x configuration register"]
        pub mod cr {
            #[doc = "Reader of register CR"]
            pub type R = crate::R<u32, super::CR>;
            #[doc = "Writer for register CR"]
            pub type W = crate::W<u32, super::CR>;
            #[doc = "Register CR `reset()`'s with value 0"]
            impl crate::ResetValue for super::CR {
                type Type = u32;
                #[inline(always)]
                fn reset_value() -> Self::Type {
                    0
                }
            }
            #[doc = "Reader of field `EN`"]
            pub type EN_R = crate::R<bool, bool>;
            #[doc = "Write proxy for field `EN`"]
            pub struct EN_W<'a> {
                w: &'a mut W,
            }
            impl<'a> EN_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                    self.w
                }
            }
            #[doc = "Reader of field `TCIE`"]
            pub type TCIE_R = crate::R<bool, bool>;
            #[doc = "Write proxy for field `TCIE`"]
            pub struct TCIE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> TCIE_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                    self.w
                }
            }
            #[doc = "Reader of field `HTIE`"]
            pub type HTIE_R = crate::R<bool, bool>;
            #[doc = "Write proxy for field `HTIE`"]
            pub struct HTIE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> HTIE_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                    self.w
                }
            }
            #[doc = "Reader of field `TEIE`"]
            pub type TEIE_R = crate::R<bool, bool>;
            #[doc = "Write proxy for field `TEIE`"]
            pub struct TEIE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> TEIE_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                    self.w
                }
            }
            #[doc = "Reader of field `DIR`"]
            pub type DIR_R = crate::R<bool, bool>;
            #[doc = "Write proxy for field `DIR`"]
            pub struct DIR_W<'a> {
                w: &'a mut W,
            }
            impl<'a> DIR_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                    self.w
                }
            }
            #[doc = "Reader of field `CIRC`"]
            pub type CIRC_R = crate::R<bool, bool>;
            #[doc = "Write proxy for field `CIRC`"]
            pub struct CIRC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> CIRC_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                    self.w
                }
            }
            #[doc = "Reader of field `PINC`"]
            pub type PINC_R = crate::R<bool, bool>;
            #[doc = "Write proxy for field `PINC`"]
            pub struct PINC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PINC_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                    self.w
                }
            }
            #[doc = "Reader of field `MINC`"]
            pub type MINC_R = crate::R<bool, bool>;
            #[doc = "Write proxy for field `MINC`"]
            pub struct MINC_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MINC_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                    self.w
                }
            }
            #[doc = "Reader of field `PSIZE`"]
            pub type PSIZE_R = crate::R<u8, u8>;
            #[doc = "Write proxy for field `PSIZE`"]
            pub struct PSIZE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PSIZE_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                    self.w
                }
            }
            #[doc = "Reader of field `MSIZE`"]
            pub type MSIZE_R = crate::R<u8, u8>;
            #[doc = "Write proxy for field `MSIZE`"]
            pub struct MSIZE_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MSIZE_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                    self.w
                }
            }
            #[doc = "Reader of field `PL`"]
            pub type PL_R = crate::R<u8, u8>;
            #[doc = "Write proxy for field `PL`"]
            pub struct PL_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PL_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u8) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                    self.w
                }
            }
            #[doc = "Reader of field `MEM2MEM`"]
            pub type MEM2MEM_R = crate::R<bool, bool>;
            #[doc = "Write proxy for field `MEM2MEM`"]
            pub struct MEM2MEM_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MEM2MEM_W<'a> {
                #[doc = r"Sets the field bit"]
                #[inline(always)]
                pub fn set_bit(self) -> &'a mut W {
                    self.bit(true)
                }
                #[doc = r"Clears the field bit"]
                #[inline(always)]
                pub fn clear_bit(self) -> &'a mut W {
                    self.bit(false)
                }
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W {
                    self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                    self.w
                }
            }
            impl R {
                #[doc = "Bit 0 - Channel enable"]
                #[inline(always)]
                pub fn en(&self) -> EN_R {
                    EN_R::new((self.bits & 0x01) != 0)
                }
                #[doc = "Bit 1 - Transfer complete interrupt enable"]
                #[inline(always)]
                pub fn tcie(&self) -> TCIE_R {
                    TCIE_R::new(((self.bits >> 1) & 0x01) != 0)
                }
                #[doc = "Bit 2 - Half transfer interrupt enable"]
                #[inline(always)]
                pub fn htie(&self) -> HTIE_R {
                    HTIE_R::new(((self.bits >> 2) & 0x01) != 0)
                }
                #[doc = "Bit 3 - Transfer error interrupt enable"]
                #[inline(always)]
                pub fn teie(&self) -> TEIE_R {
                    TEIE_R::new(((self.bits >> 3) & 0x01) != 0)
                }
                #[doc = "Bit 4 - Data transfer direction"]
                #[inline(always)]
                pub fn dir(&self) -> DIR_R {
                    DIR_R::new(((self.bits >> 4) & 0x01) != 0)
                }
                #[doc = "Bit 5 - Circular mode"]
                #[inline(always)]
                pub fn circ(&self) -> CIRC_R {
                    CIRC_R::new(((self.bits >> 5) & 0x01) != 0)
                }
                #[doc = "Bit 6 - Peripheral increment mode"]
                #[inline(always)]
                pub fn pinc(&self) -> PINC_R {
                    PINC_R::new(((self.bits >> 6) & 0x01) != 0)
                }
                #[doc = "Bit 7 - Memory increment mode"]
                #[inline(always)]
                pub fn minc(&self) -> MINC_R {
                    MINC_R::new(((self.bits >> 7) & 0x01) != 0)
                }
                #[doc = "Bits 8:9 - Peripheral size"]
                #[inline(always)]
                pub fn psize(&self) -> PSIZE_R {
                    PSIZE_R::new(((self.bits >> 8) & 0x03) as u8)
                }
                #[doc = "Bits 10:11 - Memory size"]
                #[inline(always)]
                pub fn msize(&self) -> MSIZE_R {
                    MSIZE_R::new(((self.bits >> 10) & 0x03) as u8)
                }
                #[doc = "Bits 12:13 - Channel priority level"]
                #[inline(always)]
                pub fn pl(&self) -> PL_R {
                    PL_R::new(((self.bits >> 12) & 0x03) as u8)
                }
                #[doc = "Bit 14 - Memory to memory mode"]
                #[inline(always)]
                pub fn mem2mem(&self) -> MEM2MEM_R {
                    MEM2MEM_R::new(((self.bits >> 14) & 0x01) != 0)
                }
            }
            impl W {
                #[doc = "Bit 0 - Channel enable"]
                #[inline(always)]
                pub fn en(&mut self) -> EN_W {
                    EN_W { w: self }
                }
                #[doc = "Bit 1 - Transfer complete interrupt enable"]
                #[inline(always)]
                pub fn tcie(&mut self) -> TCIE_W {
                    TCIE_W { w: self }
                }
                #[doc = "Bit 2 - Half transfer interrupt enable"]
                #[inline(always)]
                pub fn htie(&mut self) -> HTIE_W {
                    HTIE_W { w: self }
                }
                #[doc = "Bit 3 - Transfer error interrupt enable"]
                #[inline(always)]
                pub fn teie(&mut self) -> TEIE_W {
                    TEIE_W { w: self }
                }
                #[doc = "Bit 4 - Data transfer direction"]
                #[inline(always)]
                pub fn dir(&mut self) -> DIR_W {
                    DIR_W { w: self }
                }
                #[doc = "Bit 5 - Circular mode"]
                #[inline(always)]
                pub fn circ(&mut self) -> CIRC_W {
                    CIRC_W { w: self }
                }
                #[doc = "Bit 6 - Peripheral increment mode"]
                #[inline(always)]
                pub fn pinc(&mut self) -> PINC_W {
                    PINC_W { w: self }
                }
                #[doc = "Bit 7 - Memory increment mode"]
                #[inline(always)]
                pub fn minc(&mut self) -> MINC_W {
                    MINC_W { w: self }
                }
                #[doc = "Bits 8:9 - Peripheral size"]
                #[inline(always)]
                pub fn psize(&mut self) -> PSIZE_W {
                    PSIZE_W { w: self }
                }
                #[doc = "Bits 10:11 - Memory size"]
                #[inline(always)]
                pub fn msize(&mut self) -> MSIZE_W {
                    MSIZE_W { w: self }
                }
                #[doc = "Bits 12:13 - Channel priority level"]
                #[inline(always)]
                pub fn pl(&mut self) -> PL_W {
                    PL_W { w: self }
                }
                #[doc = "Bit 14 - Memory to memory mode"]
                #[inline(always)]
                pub fn mem2mem(&mut self) -> MEM2MEM_W {
                    MEM2MEM_W { w: self }
                }
            }
        }
        #[doc = "DMA channel x number of data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ndtr](ndtr) module"]
        pub type NDTR = crate::Reg<u32, _NDTR>;
        #[allow(missing_docs)]
        #[doc(hidden)]
        pub struct _NDTR;
        #[doc = "`read()` method returns [ndtr::R](ndtr::R) reader structure"]
        impl crate::Readable for NDTR {}
        #[doc = "`write(|w| ..)` method takes [ndtr::W](ndtr::W) writer structure"]
        impl crate::Writable for NDTR {}
        #[doc = "DMA channel x number of data register"]
        pub mod ndtr {
            #[doc = "Reader of register NDTR"]
            pub type R = crate::R<u32, super::NDTR>;
            #[doc = "Writer for register NDTR"]
            pub type W = crate::W<u32, super::NDTR>;
            #[doc = "Register NDTR `reset()`'s with value 0"]
            impl crate::ResetValue for super::NDTR {
                type Type = u32;
                #[inline(always)]
                fn reset_value() -> Self::Type {
                    0
                }
            }
            #[doc = "Reader of field `NDT`"]
            pub type NDT_R = crate::R<u16, u16>;
            #[doc = "Write proxy for field `NDT`"]
            pub struct NDT_W<'a> {
                w: &'a mut W,
            }
            impl<'a> NDT_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u16) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:15 - Number of data to transfer"]
                #[inline(always)]
                pub fn ndt(&self) -> NDT_R {
                    NDT_R::new((self.bits & 0xffff) as u16)
                }
            }
            impl W {
                #[doc = "Bits 0:15 - Number of data to transfer"]
                #[inline(always)]
                pub fn ndt(&mut self) -> NDT_W {
                    NDT_W { w: self }
                }
            }
        }
        #[doc = "DMA channel x peripheral address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [par](par) module"]
        pub type PAR = crate::Reg<u32, _PAR>;
        #[allow(missing_docs)]
        #[doc(hidden)]
        pub struct _PAR;
        #[doc = "`read()` method returns [par::R](par::R) reader structure"]
        impl crate::Readable for PAR {}
        #[doc = "`write(|w| ..)` method takes [par::W](par::W) writer structure"]
        impl crate::Writable for PAR {}
        #[doc = "DMA channel x peripheral address register"]
        pub mod par {
            #[doc = "Reader of register PAR"]
            pub type R = crate::R<u32, super::PAR>;
            #[doc = "Writer for register PAR"]
            pub type W = crate::W<u32, super::PAR>;
            #[doc = "Register PAR `reset()`'s with value 0"]
            impl crate::ResetValue for super::PAR {
                type Type = u32;
                #[inline(always)]
                fn reset_value() -> Self::Type {
                    0
                }
            }
            #[doc = "Reader of field `PA`"]
            pub type PA_R = crate::R<u32, u32>;
            #[doc = "Write proxy for field `PA`"]
            pub struct PA_W<'a> {
                w: &'a mut W,
            }
            impl<'a> PA_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u32) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:31 - Peripheral address"]
                #[inline(always)]
                pub fn pa(&self) -> PA_R {
                    PA_R::new((self.bits & 0xffff_ffff) as u32)
                }
            }
            impl W {
                #[doc = "Bits 0:31 - Peripheral address"]
                #[inline(always)]
                pub fn pa(&mut self) -> PA_W {
                    PA_W { w: self }
                }
            }
        }
        #[doc = "DMA channel x memory address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mar](mar) module"]
        pub type MAR = crate::Reg<u32, _MAR>;
        #[allow(missing_docs)]
        #[doc(hidden)]
        pub struct _MAR;
        #[doc = "`read()` method returns [mar::R](mar::R) reader structure"]
        impl crate::Readable for MAR {}
        #[doc = "`write(|w| ..)` method takes [mar::W](mar::W) writer structure"]
        impl crate::Writable for MAR {}
        #[doc = "DMA channel x memory address register"]
        pub mod mar {
            #[doc = "Reader of register MAR"]
            pub type R = crate::R<u32, super::MAR>;
            #[doc = "Writer for register MAR"]
            pub type W = crate::W<u32, super::MAR>;
            #[doc = "Register MAR `reset()`'s with value 0"]
            impl crate::ResetValue for super::MAR {
                type Type = u32;
                #[inline(always)]
                fn reset_value() -> Self::Type {
                    0
                }
            }
            #[doc = "Reader of field `MA`"]
            pub type MA_R = crate::R<u32, u32>;
            #[doc = "Write proxy for field `MA`"]
            pub struct MA_W<'a> {
                w: &'a mut W,
            }
            impl<'a> MA_W<'a> {
                #[doc = r"Writes raw bits to the field"]
                #[inline(always)]
                pub unsafe fn bits(self, value: u32) -> &'a mut W {
                    self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                    self.w
                }
            }
            impl R {
                #[doc = "Bits 0:31 - Memory address"]
                #[inline(always)]
                pub fn ma(&self) -> MA_R {
                    MA_R::new((self.bits & 0xffff_ffff) as u32)
                }
            }
            impl W {
                #[doc = "Bits 0:31 - Memory address"]
                #[inline(always)]
                pub fn ma(&mut self) -> MA_W {
                    MA_W { w: self }
                }
            }
        }
    }
    #[doc = "low interrupt status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "low interrupt status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Reader of field `GIF1`"]
        pub type GIF1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF1`"]
        pub type TCIF1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF1`"]
        pub type HTIF1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF1`"]
        pub type TEIF1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF2`"]
        pub type GIF2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF2`"]
        pub type TCIF2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF2`"]
        pub type HTIF2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF2`"]
        pub type TEIF2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF3`"]
        pub type GIF3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF3`"]
        pub type TCIF3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF3`"]
        pub type HTIF3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF3`"]
        pub type TEIF3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF4`"]
        pub type GIF4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF4`"]
        pub type TCIF4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF4`"]
        pub type HTIF4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF4`"]
        pub type TEIF4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `GIF5`"]
        pub type GIF5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCIF5`"]
        pub type TCIF5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `HTIF5`"]
        pub type HTIF5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEIF5`"]
        pub type TEIF5_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - Channel 1 global interrupt flag"]
            #[inline(always)]
            pub fn gif1(&self) -> GIF1_R {
                GIF1_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Channel 1 transfer complete flag"]
            #[inline(always)]
            pub fn tcif1(&self) -> TCIF1_R {
                TCIF1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel 1 half transfer flag"]
            #[inline(always)]
            pub fn htif1(&self) -> HTIF1_R {
                HTIF1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Channel 1 transfer error flag"]
            #[inline(always)]
            pub fn teif1(&self) -> TEIF1_R {
                TEIF1_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Channel 2 global interrupt flag"]
            #[inline(always)]
            pub fn gif2(&self) -> GIF2_R {
                GIF2_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Channel 2 transfer complete flag"]
            #[inline(always)]
            pub fn tcif2(&self) -> TCIF2_R {
                TCIF2_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Channel 2 half transfer flag"]
            #[inline(always)]
            pub fn htif2(&self) -> HTIF2_R {
                HTIF2_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Channel 2 transfer error flag"]
            #[inline(always)]
            pub fn teif2(&self) -> TEIF2_R {
                TEIF2_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Channel 3 global interrupt flag"]
            #[inline(always)]
            pub fn gif3(&self) -> GIF3_R {
                GIF3_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Channel 3 transfer complete flag"]
            #[inline(always)]
            pub fn tcif3(&self) -> TCIF3_R {
                TCIF3_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Channel 3 half transfer flag"]
            #[inline(always)]
            pub fn htif3(&self) -> HTIF3_R {
                HTIF3_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Channel 3 transfer error flag"]
            #[inline(always)]
            pub fn teif3(&self) -> TEIF3_R {
                TEIF3_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Channel 4 global interrupt flag"]
            #[inline(always)]
            pub fn gif4(&self) -> GIF4_R {
                GIF4_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Channel 4 transfer complete flag"]
            #[inline(always)]
            pub fn tcif4(&self) -> TCIF4_R {
                TCIF4_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Channel 4 half transfer flag"]
            #[inline(always)]
            pub fn htif4(&self) -> HTIF4_R {
                HTIF4_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Channel 4 transfer error flag"]
            #[inline(always)]
            pub fn teif4(&self) -> TEIF4_R {
                TEIF4_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Channel 5 global interrupt flag"]
            #[inline(always)]
            pub fn gif5(&self) -> GIF5_R {
                GIF5_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Channel 5 transfer complete flag"]
            #[inline(always)]
            pub fn tcif5(&self) -> TCIF5_R {
                TCIF5_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Channel 5 half transfer flag"]
            #[inline(always)]
            pub fn htif5(&self) -> HTIF5_R {
                HTIF5_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Channel 5 transfer error flag"]
            #[inline(always)]
            pub fn teif5(&self) -> TEIF5_R {
                TEIF5_R::new(((self.bits >> 19) & 0x01) != 0)
            }
        }
    }
    #[doc = "DMA interrupt flag clear register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ifcr](ifcr) module"]
    pub type IFCR = crate::Reg<u32, _IFCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IFCR;
    #[doc = "`write(|w| ..)` method takes [ifcr::W](ifcr::W) writer structure"]
    impl crate::Writable for IFCR {}
    #[doc = "DMA interrupt flag clear register"]
    pub mod ifcr {
        #[doc = "Writer for register IFCR"]
        pub type W = crate::W<u32, super::IFCR>;
        #[doc = "Register IFCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IFCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CGIF1`"]
        pub struct CGIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF1`"]
        pub struct CTCIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF1`"]
        pub struct CHTIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF1`"]
        pub struct CTEIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF2`"]
        pub struct CGIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF2`"]
        pub struct CTCIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF2`"]
        pub struct CHTIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF2`"]
        pub struct CTEIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF3`"]
        pub struct CGIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF3`"]
        pub struct CTCIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF3`"]
        pub struct CHTIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF3`"]
        pub struct CTEIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF4`"]
        pub struct CGIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF4`"]
        pub struct CTCIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF4`"]
        pub struct CHTIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF4`"]
        pub struct CTEIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Write proxy for field `CGIF5`"]
        pub struct CGIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CGIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTCIF5`"]
        pub struct CTCIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTCIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Write proxy for field `CHTIF5`"]
        pub struct CHTIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHTIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTEIF5`"]
        pub struct CTEIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTEIF5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Clear channel 1 global interrupt flag"]
            #[inline(always)]
            pub fn cgif1(&mut self) -> CGIF1_W {
                CGIF1_W { w: self }
            }
            #[doc = "Bit 1 - Clear channel 1 transfer complete flag"]
            #[inline(always)]
            pub fn ctcif1(&mut self) -> CTCIF1_W {
                CTCIF1_W { w: self }
            }
            #[doc = "Bit 2 - Clear channel 1 half transfer flag"]
            #[inline(always)]
            pub fn chtif1(&mut self) -> CHTIF1_W {
                CHTIF1_W { w: self }
            }
            #[doc = "Bit 3 - Clear channel 1 transfer error flag"]
            #[inline(always)]
            pub fn cteif1(&mut self) -> CTEIF1_W {
                CTEIF1_W { w: self }
            }
            #[doc = "Bit 4 - Clear channel 2 global interrupt flag"]
            #[inline(always)]
            pub fn cgif2(&mut self) -> CGIF2_W {
                CGIF2_W { w: self }
            }
            #[doc = "Bit 5 - Clear channel 2 transfer complete flag"]
            #[inline(always)]
            pub fn ctcif2(&mut self) -> CTCIF2_W {
                CTCIF2_W { w: self }
            }
            #[doc = "Bit 6 - Clear channel 2 half transfer flag"]
            #[inline(always)]
            pub fn chtif2(&mut self) -> CHTIF2_W {
                CHTIF2_W { w: self }
            }
            #[doc = "Bit 7 - Clear channel 2 transfer error flag"]
            #[inline(always)]
            pub fn cteif2(&mut self) -> CTEIF2_W {
                CTEIF2_W { w: self }
            }
            #[doc = "Bit 8 - Clear channel 3 global interrupt flag"]
            #[inline(always)]
            pub fn cgif3(&mut self) -> CGIF3_W {
                CGIF3_W { w: self }
            }
            #[doc = "Bit 9 - Clear channel 3 transfer complete flag"]
            #[inline(always)]
            pub fn ctcif3(&mut self) -> CTCIF3_W {
                CTCIF3_W { w: self }
            }
            #[doc = "Bit 10 - Clear channel 3 half transfer flag"]
            #[inline(always)]
            pub fn chtif3(&mut self) -> CHTIF3_W {
                CHTIF3_W { w: self }
            }
            #[doc = "Bit 11 - Clear channel 3 transfer error flag"]
            #[inline(always)]
            pub fn cteif3(&mut self) -> CTEIF3_W {
                CTEIF3_W { w: self }
            }
            #[doc = "Bit 12 - Clear channel 4 global interrupt flag"]
            #[inline(always)]
            pub fn cgif4(&mut self) -> CGIF4_W {
                CGIF4_W { w: self }
            }
            #[doc = "Bit 13 - Clear channel 4 transfer complete flag"]
            #[inline(always)]
            pub fn ctcif4(&mut self) -> CTCIF4_W {
                CTCIF4_W { w: self }
            }
            #[doc = "Bit 14 - Clear channel 4 half transfer flag"]
            #[inline(always)]
            pub fn chtif4(&mut self) -> CHTIF4_W {
                CHTIF4_W { w: self }
            }
            #[doc = "Bit 15 - Clear channel 4 transfer error flag"]
            #[inline(always)]
            pub fn cteif4(&mut self) -> CTEIF4_W {
                CTEIF4_W { w: self }
            }
            #[doc = "Bit 16 - Clear channel 5 global interrupt flag"]
            #[inline(always)]
            pub fn cgif5(&mut self) -> CGIF5_W {
                CGIF5_W { w: self }
            }
            #[doc = "Bit 17 - Clear channel 5 transfer complete flag"]
            #[inline(always)]
            pub fn ctcif5(&mut self) -> CTCIF5_W {
                CTCIF5_W { w: self }
            }
            #[doc = "Bit 18 - Clear channel 5 half transfer flag"]
            #[inline(always)]
            pub fn chtif5(&mut self) -> CHTIF5_W {
                CHTIF5_W { w: self }
            }
            #[doc = "Bit 19 - Clear channel 5 transfer error flag"]
            #[inline(always)]
            pub fn cteif5(&mut self) -> CTEIF5_W {
                CTEIF5_W { w: self }
            }
        }
    }
}
#[doc = "DMAMUX"]
pub struct DMAMUX {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMAMUX {}
impl DMAMUX {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dmamux::RegisterBlock {
        0x4002_0800 as *const _
    }
}
impl Deref for DMAMUX {
    type Target = dmamux::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*DMAMUX::ptr() }
    }
}
#[doc = "DMAMUX"]
pub mod dmamux {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DMAMux - DMA request line multiplexer channel x control register"]
        pub c0cr: C0CR,
        #[doc = "0x04 - DMAMux - DMA request line multiplexer channel x control register"]
        pub c1cr: C1CR,
        #[doc = "0x08 - DMAMux - DMA request line multiplexer channel x control register"]
        pub c2cr: C2CR,
        #[doc = "0x0c - DMAMux - DMA request line multiplexer channel x control register"]
        pub c3cr: C3CR,
        #[doc = "0x10 - DMAMux - DMA request line multiplexer channel x control register"]
        pub c4cr: C4CR,
        #[doc = "0x14 - DMAMux - DMA request line multiplexer channel x control register"]
        pub c5cr: C5CR,
        #[doc = "0x18 - DMAMux - DMA request line multiplexer channel x control register"]
        pub c6cr: C6CR,
        _reserved7: [u8; 228usize],
        #[doc = "0x100 - DMAMux - DMA request generator channel x control register"]
        pub rg0cr: RG0CR,
        #[doc = "0x104 - DMAMux - DMA request generator channel x control register"]
        pub rg1cr: RG1CR,
        #[doc = "0x108 - DMAMux - DMA request generator channel x control register"]
        pub rg2cr: RG2CR,
        #[doc = "0x10c - DMAMux - DMA request generator channel x control register"]
        pub rg3cr: RG3CR,
        _reserved11: [u8; 48usize],
        #[doc = "0x140 - DMAMux - DMA request generator status register"]
        pub rgsr: RGSR,
        #[doc = "0x144 - DMAMux - DMA request generator clear flag register"]
        pub rgcfr: RGCFR,
    }
    #[doc = "DMAMux - DMA request line multiplexer channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c0cr](c0cr) module"]
    pub type C0CR = crate::Reg<u32, _C0CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C0CR;
    #[doc = "`read()` method returns [c0cr::R](c0cr::R) reader structure"]
    impl crate::Readable for C0CR {}
    #[doc = "`write(|w| ..)` method takes [c0cr::W](c0cr::W) writer structure"]
    impl crate::Writable for C0CR {}
    #[doc = "DMAMux - DMA request line multiplexer channel x control register"]
    pub mod c0cr {
        #[doc = "Reader of register C0CR"]
        pub type R = crate::R<u32, super::C0CR>;
        #[doc = "Writer for register C0CR"]
        pub type W = crate::W<u32, super::C0CR>;
        #[doc = "Register C0CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::C0CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAREQ_ID`"]
        pub type DMAREQ_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DMAREQ_ID`"]
        pub struct DMAREQ_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAREQ_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `SOIE`"]
        pub type SOIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SOIE`"]
        pub struct SOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EGE`"]
        pub type EGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EGE`"]
        pub struct EGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SE`"]
        pub type SE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SE`"]
        pub struct SE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SPOL`"]
        pub type SPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SPOL`"]
        pub struct SPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `NBREQ`"]
        pub type NBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NBREQ`"]
        pub struct NBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC_ID`"]
        pub type SYNC_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC_ID`"]
        pub struct SYNC_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 24)) | (((value as u32) & 0x1f) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&self) -> DMAREQ_ID_R {
                DMAREQ_ID_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&self) -> SOIE_R {
                SOIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&self) -> EGE_R {
                EGE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&self) -> SE_R {
                SE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&self) -> SPOL_R {
                SPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&self) -> NBREQ_R {
                NBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&self) -> SYNC_ID_R {
                SYNC_ID_R::new(((self.bits >> 24) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&mut self) -> DMAREQ_ID_W {
                DMAREQ_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&mut self) -> SOIE_W {
                SOIE_W { w: self }
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&mut self) -> EGE_W {
                EGE_W { w: self }
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&mut self) -> SE_W {
                SE_W { w: self }
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&mut self) -> SPOL_W {
                SPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&mut self) -> NBREQ_W {
                NBREQ_W { w: self }
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&mut self) -> SYNC_ID_W {
                SYNC_ID_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request line multiplexer channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c1cr](c1cr) module"]
    pub type C1CR = crate::Reg<u32, _C1CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C1CR;
    #[doc = "`read()` method returns [c1cr::R](c1cr::R) reader structure"]
    impl crate::Readable for C1CR {}
    #[doc = "`write(|w| ..)` method takes [c1cr::W](c1cr::W) writer structure"]
    impl crate::Writable for C1CR {}
    #[doc = "DMAMux - DMA request line multiplexer channel x control register"]
    pub mod c1cr {
        #[doc = "Reader of register C1CR"]
        pub type R = crate::R<u32, super::C1CR>;
        #[doc = "Writer for register C1CR"]
        pub type W = crate::W<u32, super::C1CR>;
        #[doc = "Register C1CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::C1CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAREQ_ID`"]
        pub type DMAREQ_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DMAREQ_ID`"]
        pub struct DMAREQ_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAREQ_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `SOIE`"]
        pub type SOIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SOIE`"]
        pub struct SOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EGE`"]
        pub type EGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EGE`"]
        pub struct EGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SE`"]
        pub type SE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SE`"]
        pub struct SE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SPOL`"]
        pub type SPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SPOL`"]
        pub struct SPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `NBREQ`"]
        pub type NBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NBREQ`"]
        pub struct NBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC_ID`"]
        pub type SYNC_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC_ID`"]
        pub struct SYNC_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 24)) | (((value as u32) & 0x1f) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&self) -> DMAREQ_ID_R {
                DMAREQ_ID_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&self) -> SOIE_R {
                SOIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&self) -> EGE_R {
                EGE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&self) -> SE_R {
                SE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&self) -> SPOL_R {
                SPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&self) -> NBREQ_R {
                NBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&self) -> SYNC_ID_R {
                SYNC_ID_R::new(((self.bits >> 24) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&mut self) -> DMAREQ_ID_W {
                DMAREQ_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&mut self) -> SOIE_W {
                SOIE_W { w: self }
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&mut self) -> EGE_W {
                EGE_W { w: self }
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&mut self) -> SE_W {
                SE_W { w: self }
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&mut self) -> SPOL_W {
                SPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&mut self) -> NBREQ_W {
                NBREQ_W { w: self }
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&mut self) -> SYNC_ID_W {
                SYNC_ID_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request line multiplexer channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c2cr](c2cr) module"]
    pub type C2CR = crate::Reg<u32, _C2CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C2CR;
    #[doc = "`read()` method returns [c2cr::R](c2cr::R) reader structure"]
    impl crate::Readable for C2CR {}
    #[doc = "`write(|w| ..)` method takes [c2cr::W](c2cr::W) writer structure"]
    impl crate::Writable for C2CR {}
    #[doc = "DMAMux - DMA request line multiplexer channel x control register"]
    pub mod c2cr {
        #[doc = "Reader of register C2CR"]
        pub type R = crate::R<u32, super::C2CR>;
        #[doc = "Writer for register C2CR"]
        pub type W = crate::W<u32, super::C2CR>;
        #[doc = "Register C2CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::C2CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAREQ_ID`"]
        pub type DMAREQ_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DMAREQ_ID`"]
        pub struct DMAREQ_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAREQ_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `SOIE`"]
        pub type SOIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SOIE`"]
        pub struct SOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EGE`"]
        pub type EGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EGE`"]
        pub struct EGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SE`"]
        pub type SE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SE`"]
        pub struct SE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SPOL`"]
        pub type SPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SPOL`"]
        pub struct SPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `NBREQ`"]
        pub type NBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NBREQ`"]
        pub struct NBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC_ID`"]
        pub type SYNC_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC_ID`"]
        pub struct SYNC_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 24)) | (((value as u32) & 0x1f) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&self) -> DMAREQ_ID_R {
                DMAREQ_ID_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&self) -> SOIE_R {
                SOIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&self) -> EGE_R {
                EGE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&self) -> SE_R {
                SE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&self) -> SPOL_R {
                SPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&self) -> NBREQ_R {
                NBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&self) -> SYNC_ID_R {
                SYNC_ID_R::new(((self.bits >> 24) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&mut self) -> DMAREQ_ID_W {
                DMAREQ_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&mut self) -> SOIE_W {
                SOIE_W { w: self }
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&mut self) -> EGE_W {
                EGE_W { w: self }
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&mut self) -> SE_W {
                SE_W { w: self }
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&mut self) -> SPOL_W {
                SPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&mut self) -> NBREQ_W {
                NBREQ_W { w: self }
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&mut self) -> SYNC_ID_W {
                SYNC_ID_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request line multiplexer channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c3cr](c3cr) module"]
    pub type C3CR = crate::Reg<u32, _C3CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C3CR;
    #[doc = "`read()` method returns [c3cr::R](c3cr::R) reader structure"]
    impl crate::Readable for C3CR {}
    #[doc = "`write(|w| ..)` method takes [c3cr::W](c3cr::W) writer structure"]
    impl crate::Writable for C3CR {}
    #[doc = "DMAMux - DMA request line multiplexer channel x control register"]
    pub mod c3cr {
        #[doc = "Reader of register C3CR"]
        pub type R = crate::R<u32, super::C3CR>;
        #[doc = "Writer for register C3CR"]
        pub type W = crate::W<u32, super::C3CR>;
        #[doc = "Register C3CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::C3CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAREQ_ID`"]
        pub type DMAREQ_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DMAREQ_ID`"]
        pub struct DMAREQ_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAREQ_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `SOIE`"]
        pub type SOIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SOIE`"]
        pub struct SOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EGE`"]
        pub type EGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EGE`"]
        pub struct EGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SE`"]
        pub type SE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SE`"]
        pub struct SE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SPOL`"]
        pub type SPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SPOL`"]
        pub struct SPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `NBREQ`"]
        pub type NBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NBREQ`"]
        pub struct NBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC_ID`"]
        pub type SYNC_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC_ID`"]
        pub struct SYNC_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 24)) | (((value as u32) & 0x1f) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&self) -> DMAREQ_ID_R {
                DMAREQ_ID_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&self) -> SOIE_R {
                SOIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&self) -> EGE_R {
                EGE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&self) -> SE_R {
                SE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&self) -> SPOL_R {
                SPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&self) -> NBREQ_R {
                NBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&self) -> SYNC_ID_R {
                SYNC_ID_R::new(((self.bits >> 24) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&mut self) -> DMAREQ_ID_W {
                DMAREQ_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&mut self) -> SOIE_W {
                SOIE_W { w: self }
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&mut self) -> EGE_W {
                EGE_W { w: self }
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&mut self) -> SE_W {
                SE_W { w: self }
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&mut self) -> SPOL_W {
                SPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&mut self) -> NBREQ_W {
                NBREQ_W { w: self }
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&mut self) -> SYNC_ID_W {
                SYNC_ID_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request line multiplexer channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c4cr](c4cr) module"]
    pub type C4CR = crate::Reg<u32, _C4CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C4CR;
    #[doc = "`read()` method returns [c4cr::R](c4cr::R) reader structure"]
    impl crate::Readable for C4CR {}
    #[doc = "`write(|w| ..)` method takes [c4cr::W](c4cr::W) writer structure"]
    impl crate::Writable for C4CR {}
    #[doc = "DMAMux - DMA request line multiplexer channel x control register"]
    pub mod c4cr {
        #[doc = "Reader of register C4CR"]
        pub type R = crate::R<u32, super::C4CR>;
        #[doc = "Writer for register C4CR"]
        pub type W = crate::W<u32, super::C4CR>;
        #[doc = "Register C4CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::C4CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAREQ_ID`"]
        pub type DMAREQ_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DMAREQ_ID`"]
        pub struct DMAREQ_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAREQ_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `SOIE`"]
        pub type SOIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SOIE`"]
        pub struct SOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EGE`"]
        pub type EGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EGE`"]
        pub struct EGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SE`"]
        pub type SE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SE`"]
        pub struct SE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SPOL`"]
        pub type SPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SPOL`"]
        pub struct SPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `NBREQ`"]
        pub type NBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NBREQ`"]
        pub struct NBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC_ID`"]
        pub type SYNC_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC_ID`"]
        pub struct SYNC_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 24)) | (((value as u32) & 0x1f) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&self) -> DMAREQ_ID_R {
                DMAREQ_ID_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&self) -> SOIE_R {
                SOIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&self) -> EGE_R {
                EGE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&self) -> SE_R {
                SE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&self) -> SPOL_R {
                SPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&self) -> NBREQ_R {
                NBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&self) -> SYNC_ID_R {
                SYNC_ID_R::new(((self.bits >> 24) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&mut self) -> DMAREQ_ID_W {
                DMAREQ_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&mut self) -> SOIE_W {
                SOIE_W { w: self }
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&mut self) -> EGE_W {
                EGE_W { w: self }
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&mut self) -> SE_W {
                SE_W { w: self }
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&mut self) -> SPOL_W {
                SPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&mut self) -> NBREQ_W {
                NBREQ_W { w: self }
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&mut self) -> SYNC_ID_W {
                SYNC_ID_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request line multiplexer channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c5cr](c5cr) module"]
    pub type C5CR = crate::Reg<u32, _C5CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C5CR;
    #[doc = "`read()` method returns [c5cr::R](c5cr::R) reader structure"]
    impl crate::Readable for C5CR {}
    #[doc = "`write(|w| ..)` method takes [c5cr::W](c5cr::W) writer structure"]
    impl crate::Writable for C5CR {}
    #[doc = "DMAMux - DMA request line multiplexer channel x control register"]
    pub mod c5cr {
        #[doc = "Reader of register C5CR"]
        pub type R = crate::R<u32, super::C5CR>;
        #[doc = "Writer for register C5CR"]
        pub type W = crate::W<u32, super::C5CR>;
        #[doc = "Register C5CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::C5CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAREQ_ID`"]
        pub type DMAREQ_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DMAREQ_ID`"]
        pub struct DMAREQ_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAREQ_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `SOIE`"]
        pub type SOIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SOIE`"]
        pub struct SOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EGE`"]
        pub type EGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EGE`"]
        pub struct EGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SE`"]
        pub type SE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SE`"]
        pub struct SE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SPOL`"]
        pub type SPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SPOL`"]
        pub struct SPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `NBREQ`"]
        pub type NBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NBREQ`"]
        pub struct NBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC_ID`"]
        pub type SYNC_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC_ID`"]
        pub struct SYNC_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 24)) | (((value as u32) & 0x1f) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&self) -> DMAREQ_ID_R {
                DMAREQ_ID_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&self) -> SOIE_R {
                SOIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&self) -> EGE_R {
                EGE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&self) -> SE_R {
                SE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&self) -> SPOL_R {
                SPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&self) -> NBREQ_R {
                NBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&self) -> SYNC_ID_R {
                SYNC_ID_R::new(((self.bits >> 24) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&mut self) -> DMAREQ_ID_W {
                DMAREQ_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&mut self) -> SOIE_W {
                SOIE_W { w: self }
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&mut self) -> EGE_W {
                EGE_W { w: self }
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&mut self) -> SE_W {
                SE_W { w: self }
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&mut self) -> SPOL_W {
                SPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&mut self) -> NBREQ_W {
                NBREQ_W { w: self }
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&mut self) -> SYNC_ID_W {
                SYNC_ID_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request line multiplexer channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [c6cr](c6cr) module"]
    pub type C6CR = crate::Reg<u32, _C6CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _C6CR;
    #[doc = "`read()` method returns [c6cr::R](c6cr::R) reader structure"]
    impl crate::Readable for C6CR {}
    #[doc = "`write(|w| ..)` method takes [c6cr::W](c6cr::W) writer structure"]
    impl crate::Writable for C6CR {}
    #[doc = "DMAMux - DMA request line multiplexer channel x control register"]
    pub mod c6cr {
        #[doc = "Reader of register C6CR"]
        pub type R = crate::R<u32, super::C6CR>;
        #[doc = "Writer for register C6CR"]
        pub type W = crate::W<u32, super::C6CR>;
        #[doc = "Register C6CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::C6CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAREQ_ID`"]
        pub type DMAREQ_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DMAREQ_ID`"]
        pub struct DMAREQ_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAREQ_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `SOIE`"]
        pub type SOIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SOIE`"]
        pub struct SOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SOIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `EGE`"]
        pub type EGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EGE`"]
        pub struct EGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SE`"]
        pub type SE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SE`"]
        pub struct SE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SPOL`"]
        pub type SPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SPOL`"]
        pub struct SPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `NBREQ`"]
        pub type NBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NBREQ`"]
        pub struct NBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `SYNC_ID`"]
        pub type SYNC_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SYNC_ID`"]
        pub struct SYNC_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SYNC_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 24)) | (((value as u32) & 0x1f) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&self) -> DMAREQ_ID_R {
                DMAREQ_ID_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&self) -> SOIE_R {
                SOIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&self) -> EGE_R {
                EGE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&self) -> SE_R {
                SE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&self) -> SPOL_R {
                SPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&self) -> NBREQ_R {
                NBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&self) -> SYNC_ID_R {
                SYNC_ID_R::new(((self.bits >> 24) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Input DMA request line selected"]
            #[inline(always)]
            pub fn dmareq_id(&mut self) -> DMAREQ_ID_W {
                DMAREQ_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at synchronization event overrun"]
            #[inline(always)]
            pub fn soie(&mut self) -> SOIE_W {
                SOIE_W { w: self }
            }
            #[doc = "Bit 9 - Event generation enable/disable"]
            #[inline(always)]
            pub fn ege(&mut self) -> EGE_W {
                EGE_W { w: self }
            }
            #[doc = "Bit 16 - Synchronous operating mode enable/disable"]
            #[inline(always)]
            pub fn se(&mut self) -> SE_W {
                SE_W { w: self }
            }
            #[doc = "Bits 17:18 - Synchronization event type selector Defines the synchronization event on the selected synchronization input:"]
            #[inline(always)]
            pub fn spol(&mut self) -> SPOL_W {
                SPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to forward Defines the number of DMA requests forwarded before output event is generated. In synchronous mode, it also defines the number of DMA requests to forward after a synchronization event, then stop forwarding. The actual number of DMA requests forwarded is NBREQ+1. Note: This field can only be written when both SE and EGE bits are reset."]
            #[inline(always)]
            pub fn nbreq(&mut self) -> NBREQ_W {
                NBREQ_W { w: self }
            }
            #[doc = "Bits 24:28 - Synchronization input selected"]
            #[inline(always)]
            pub fn sync_id(&mut self) -> SYNC_ID_W {
                SYNC_ID_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request generator channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rg0cr](rg0cr) module"]
    pub type RG0CR = crate::Reg<u32, _RG0CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RG0CR;
    #[doc = "`read()` method returns [rg0cr::R](rg0cr::R) reader structure"]
    impl crate::Readable for RG0CR {}
    #[doc = "`write(|w| ..)` method takes [rg0cr::W](rg0cr::W) writer structure"]
    impl crate::Writable for RG0CR {}
    #[doc = "DMAMux - DMA request generator channel x control register"]
    pub mod rg0cr {
        #[doc = "Reader of register RG0CR"]
        pub type R = crate::R<u32, super::RG0CR>;
        #[doc = "Writer for register RG0CR"]
        pub type W = crate::W<u32, super::RG0CR>;
        #[doc = "Register RG0CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RG0CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SIG_ID`"]
        pub type SIG_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SIG_ID`"]
        pub struct SIG_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIG_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        #[doc = "Reader of field `OIE`"]
        pub type OIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIE`"]
        pub struct OIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `GE`"]
        pub type GE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GE`"]
        pub struct GE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `GPOL`"]
        pub type GPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOL`"]
        pub struct GPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `GNBREQ`"]
        pub type GNBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GNBREQ`"]
        pub struct GNBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GNBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - DMA request trigger input selected"]
            #[inline(always)]
            pub fn sig_id(&self) -> SIG_ID_R {
                SIG_ID_R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at trigger event overrun"]
            #[inline(always)]
            pub fn oie(&self) -> OIE_R {
                OIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DMA request generator channel enable/disable"]
            #[inline(always)]
            pub fn ge(&self) -> GE_R {
                GE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - DMA request generator trigger event type selection Defines the trigger event on the selected DMA request trigger input"]
            #[inline(always)]
            pub fn gpol(&self) -> GPOL_R {
                GPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to generate Defines the number of DMA requests generated after a trigger event, then stop generating. The actual number of generated DMA requests is GNBREQ+1. Note: This field can only be written when GE bit is reset."]
            #[inline(always)]
            pub fn gnbreq(&self) -> GNBREQ_R {
                GNBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - DMA request trigger input selected"]
            #[inline(always)]
            pub fn sig_id(&mut self) -> SIG_ID_W {
                SIG_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at trigger event overrun"]
            #[inline(always)]
            pub fn oie(&mut self) -> OIE_W {
                OIE_W { w: self }
            }
            #[doc = "Bit 16 - DMA request generator channel enable/disable"]
            #[inline(always)]
            pub fn ge(&mut self) -> GE_W {
                GE_W { w: self }
            }
            #[doc = "Bits 17:18 - DMA request generator trigger event type selection Defines the trigger event on the selected DMA request trigger input"]
            #[inline(always)]
            pub fn gpol(&mut self) -> GPOL_W {
                GPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to generate Defines the number of DMA requests generated after a trigger event, then stop generating. The actual number of generated DMA requests is GNBREQ+1. Note: This field can only be written when GE bit is reset."]
            #[inline(always)]
            pub fn gnbreq(&mut self) -> GNBREQ_W {
                GNBREQ_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request generator channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rg1cr](rg1cr) module"]
    pub type RG1CR = crate::Reg<u32, _RG1CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RG1CR;
    #[doc = "`read()` method returns [rg1cr::R](rg1cr::R) reader structure"]
    impl crate::Readable for RG1CR {}
    #[doc = "`write(|w| ..)` method takes [rg1cr::W](rg1cr::W) writer structure"]
    impl crate::Writable for RG1CR {}
    #[doc = "DMAMux - DMA request generator channel x control register"]
    pub mod rg1cr {
        #[doc = "Reader of register RG1CR"]
        pub type R = crate::R<u32, super::RG1CR>;
        #[doc = "Writer for register RG1CR"]
        pub type W = crate::W<u32, super::RG1CR>;
        #[doc = "Register RG1CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RG1CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SIG_ID`"]
        pub type SIG_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SIG_ID`"]
        pub struct SIG_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIG_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        #[doc = "Reader of field `OIE`"]
        pub type OIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIE`"]
        pub struct OIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `GE`"]
        pub type GE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GE`"]
        pub struct GE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `GPOL`"]
        pub type GPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOL`"]
        pub struct GPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `GNBREQ`"]
        pub type GNBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GNBREQ`"]
        pub struct GNBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GNBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - DMA request trigger input selected"]
            #[inline(always)]
            pub fn sig_id(&self) -> SIG_ID_R {
                SIG_ID_R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at trigger event overrun"]
            #[inline(always)]
            pub fn oie(&self) -> OIE_R {
                OIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DMA request generator channel enable/disable"]
            #[inline(always)]
            pub fn ge(&self) -> GE_R {
                GE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - DMA request generator trigger event type selection Defines the trigger event on the selected DMA request trigger input"]
            #[inline(always)]
            pub fn gpol(&self) -> GPOL_R {
                GPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to generate Defines the number of DMA requests generated after a trigger event, then stop generating. The actual number of generated DMA requests is GNBREQ+1. Note: This field can only be written when GE bit is reset."]
            #[inline(always)]
            pub fn gnbreq(&self) -> GNBREQ_R {
                GNBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - DMA request trigger input selected"]
            #[inline(always)]
            pub fn sig_id(&mut self) -> SIG_ID_W {
                SIG_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at trigger event overrun"]
            #[inline(always)]
            pub fn oie(&mut self) -> OIE_W {
                OIE_W { w: self }
            }
            #[doc = "Bit 16 - DMA request generator channel enable/disable"]
            #[inline(always)]
            pub fn ge(&mut self) -> GE_W {
                GE_W { w: self }
            }
            #[doc = "Bits 17:18 - DMA request generator trigger event type selection Defines the trigger event on the selected DMA request trigger input"]
            #[inline(always)]
            pub fn gpol(&mut self) -> GPOL_W {
                GPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to generate Defines the number of DMA requests generated after a trigger event, then stop generating. The actual number of generated DMA requests is GNBREQ+1. Note: This field can only be written when GE bit is reset."]
            #[inline(always)]
            pub fn gnbreq(&mut self) -> GNBREQ_W {
                GNBREQ_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request generator channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rg2cr](rg2cr) module"]
    pub type RG2CR = crate::Reg<u32, _RG2CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RG2CR;
    #[doc = "`read()` method returns [rg2cr::R](rg2cr::R) reader structure"]
    impl crate::Readable for RG2CR {}
    #[doc = "`write(|w| ..)` method takes [rg2cr::W](rg2cr::W) writer structure"]
    impl crate::Writable for RG2CR {}
    #[doc = "DMAMux - DMA request generator channel x control register"]
    pub mod rg2cr {
        #[doc = "Reader of register RG2CR"]
        pub type R = crate::R<u32, super::RG2CR>;
        #[doc = "Writer for register RG2CR"]
        pub type W = crate::W<u32, super::RG2CR>;
        #[doc = "Register RG2CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RG2CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SIG_ID`"]
        pub type SIG_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SIG_ID`"]
        pub struct SIG_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIG_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        #[doc = "Reader of field `OIE`"]
        pub type OIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIE`"]
        pub struct OIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `GE`"]
        pub type GE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GE`"]
        pub struct GE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `GPOL`"]
        pub type GPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOL`"]
        pub struct GPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `GNBREQ`"]
        pub type GNBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GNBREQ`"]
        pub struct GNBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GNBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - DMA request trigger input selected"]
            #[inline(always)]
            pub fn sig_id(&self) -> SIG_ID_R {
                SIG_ID_R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at trigger event overrun"]
            #[inline(always)]
            pub fn oie(&self) -> OIE_R {
                OIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DMA request generator channel enable/disable"]
            #[inline(always)]
            pub fn ge(&self) -> GE_R {
                GE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - DMA request generator trigger event type selection Defines the trigger event on the selected DMA request trigger input"]
            #[inline(always)]
            pub fn gpol(&self) -> GPOL_R {
                GPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to generate Defines the number of DMA requests generated after a trigger event, then stop generating. The actual number of generated DMA requests is GNBREQ+1. Note: This field can only be written when GE bit is reset."]
            #[inline(always)]
            pub fn gnbreq(&self) -> GNBREQ_R {
                GNBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - DMA request trigger input selected"]
            #[inline(always)]
            pub fn sig_id(&mut self) -> SIG_ID_W {
                SIG_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at trigger event overrun"]
            #[inline(always)]
            pub fn oie(&mut self) -> OIE_W {
                OIE_W { w: self }
            }
            #[doc = "Bit 16 - DMA request generator channel enable/disable"]
            #[inline(always)]
            pub fn ge(&mut self) -> GE_W {
                GE_W { w: self }
            }
            #[doc = "Bits 17:18 - DMA request generator trigger event type selection Defines the trigger event on the selected DMA request trigger input"]
            #[inline(always)]
            pub fn gpol(&mut self) -> GPOL_W {
                GPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to generate Defines the number of DMA requests generated after a trigger event, then stop generating. The actual number of generated DMA requests is GNBREQ+1. Note: This field can only be written when GE bit is reset."]
            #[inline(always)]
            pub fn gnbreq(&mut self) -> GNBREQ_W {
                GNBREQ_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request generator channel x control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rg3cr](rg3cr) module"]
    pub type RG3CR = crate::Reg<u32, _RG3CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RG3CR;
    #[doc = "`read()` method returns [rg3cr::R](rg3cr::R) reader structure"]
    impl crate::Readable for RG3CR {}
    #[doc = "`write(|w| ..)` method takes [rg3cr::W](rg3cr::W) writer structure"]
    impl crate::Writable for RG3CR {}
    #[doc = "DMAMux - DMA request generator channel x control register"]
    pub mod rg3cr {
        #[doc = "Reader of register RG3CR"]
        pub type R = crate::R<u32, super::RG3CR>;
        #[doc = "Writer for register RG3CR"]
        pub type W = crate::W<u32, super::RG3CR>;
        #[doc = "Register RG3CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RG3CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SIG_ID`"]
        pub type SIG_ID_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SIG_ID`"]
        pub struct SIG_ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SIG_ID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        #[doc = "Reader of field `OIE`"]
        pub type OIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIE`"]
        pub struct OIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `GE`"]
        pub type GE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GE`"]
        pub struct GE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `GPOL`"]
        pub type GPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GPOL`"]
        pub struct GPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `GNBREQ`"]
        pub type GNBREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GNBREQ`"]
        pub struct GNBREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GNBREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 19)) | (((value as u32) & 0x1f) << 19);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:4 - DMA request trigger input selected"]
            #[inline(always)]
            pub fn sig_id(&self) -> SIG_ID_R {
                SIG_ID_R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bit 8 - Interrupt enable at trigger event overrun"]
            #[inline(always)]
            pub fn oie(&self) -> OIE_R {
                OIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 16 - DMA request generator channel enable/disable"]
            #[inline(always)]
            pub fn ge(&self) -> GE_R {
                GE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - DMA request generator trigger event type selection Defines the trigger event on the selected DMA request trigger input"]
            #[inline(always)]
            pub fn gpol(&self) -> GPOL_R {
                GPOL_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 19:23 - Number of DMA requests to generate Defines the number of DMA requests generated after a trigger event, then stop generating. The actual number of generated DMA requests is GNBREQ+1. Note: This field can only be written when GE bit is reset."]
            #[inline(always)]
            pub fn gnbreq(&self) -> GNBREQ_R {
                GNBREQ_R::new(((self.bits >> 19) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - DMA request trigger input selected"]
            #[inline(always)]
            pub fn sig_id(&mut self) -> SIG_ID_W {
                SIG_ID_W { w: self }
            }
            #[doc = "Bit 8 - Interrupt enable at trigger event overrun"]
            #[inline(always)]
            pub fn oie(&mut self) -> OIE_W {
                OIE_W { w: self }
            }
            #[doc = "Bit 16 - DMA request generator channel enable/disable"]
            #[inline(always)]
            pub fn ge(&mut self) -> GE_W {
                GE_W { w: self }
            }
            #[doc = "Bits 17:18 - DMA request generator trigger event type selection Defines the trigger event on the selected DMA request trigger input"]
            #[inline(always)]
            pub fn gpol(&mut self) -> GPOL_W {
                GPOL_W { w: self }
            }
            #[doc = "Bits 19:23 - Number of DMA requests to generate Defines the number of DMA requests generated after a trigger event, then stop generating. The actual number of generated DMA requests is GNBREQ+1. Note: This field can only be written when GE bit is reset."]
            #[inline(always)]
            pub fn gnbreq(&mut self) -> GNBREQ_W {
                GNBREQ_W { w: self }
            }
        }
    }
    #[doc = "DMAMux - DMA request generator status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rgsr](rgsr) module"]
    pub type RGSR = crate::Reg<u32, _RGSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RGSR;
    #[doc = "`read()` method returns [rgsr::R](rgsr::R) reader structure"]
    impl crate::Readable for RGSR {}
    #[doc = "DMAMux - DMA request generator status register"]
    pub mod rgsr {
        #[doc = "Reader of register RGSR"]
        pub type R = crate::R<u32, super::RGSR>;
        #[doc = "Reader of field `OF`"]
        pub type OF_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:3 - Trigger event overrun flag The flag is set when a trigger event occurs on DMA request generator channel x, while the DMA request generator counter value is lower than GNBREQ. The flag is cleared by writing 1 to the corresponding COFx bit in DMAMUX_RGCFR register."]
            #[inline(always)]
            pub fn of(&self) -> OF_R {
                OF_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "DMAMux - DMA request generator clear flag register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rgcfr](rgcfr) module"]
    pub type RGCFR = crate::Reg<u32, _RGCFR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RGCFR;
    #[doc = "`write(|w| ..)` method takes [rgcfr::W](rgcfr::W) writer structure"]
    impl crate::Writable for RGCFR {}
    #[doc = "DMAMux - DMA request generator clear flag register"]
    pub mod rgcfr {
        #[doc = "Writer for register RGCFR"]
        pub type W = crate::W<u32, super::RGCFR>;
        #[doc = "Register RGCFR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RGCFR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `COF`"]
        pub struct COF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Clear trigger event overrun flag Upon setting, this bit clears the corresponding overrun flag OFx in the DMAMUX_RGCSR register."]
            #[inline(always)]
            pub fn cof(&mut self) -> COF_W {
                COF_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOA {}
impl GPIOA {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        0x5000_0000 as *const _
    }
}
impl Deref for GPIOA {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOA::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioa {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - GPIO port mode register"]
        pub moder: MODER,
        #[doc = "0x04 - GPIO port output type register"]
        pub otyper: OTYPER,
        #[doc = "0x08 - GPIO port output speed register"]
        pub ospeedr: OSPEEDR,
        #[doc = "0x0c - GPIO port pull-up/pull-down register"]
        pub pupdr: PUPDR,
        #[doc = "0x10 - GPIO port input data register"]
        pub idr: IDR,
        #[doc = "0x14 - GPIO port output data register"]
        pub odr: ODR,
        #[doc = "0x18 - GPIO port bit set/reset register"]
        pub bsrr: BSRR,
        #[doc = "0x1c - GPIO port configuration lock register"]
        pub lckr: LCKR,
        #[doc = "0x20 - GPIO alternate function low register"]
        pub afrl: AFRL,
        #[doc = "0x24 - GPIO alternate function high register"]
        pub afrh: AFRH,
        #[doc = "0x28 - port bit reset register"]
        pub brr: BRR,
    }
    #[doc = "GPIO port mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [moder](moder) module"]
    pub type MODER = crate::Reg<u32, _MODER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODER;
    #[doc = "`read()` method returns [moder::R](moder::R) reader structure"]
    impl crate::Readable for MODER {}
    #[doc = "`write(|w| ..)` method takes [moder::W](moder::W) writer structure"]
    impl crate::Writable for MODER {}
    #[doc = "GPIO port mode register"]
    pub mod moder {
        #[doc = "Reader of register MODER"]
        pub type R = crate::R<u32, super::MODER>;
        #[doc = "Writer for register MODER"]
        pub type W = crate::W<u32, super::MODER>;
        #[doc = "Register MODER `reset()`'s with value 0xebff_ffff"]
        impl crate::ResetValue for super::MODER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xebff_ffff
            }
        }
        #[doc = "Reader of field `MODER15`"]
        pub type MODER15_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER15`"]
        pub struct MODER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `MODER14`"]
        pub type MODER14_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER14`"]
        pub struct MODER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `MODER13`"]
        pub type MODER13_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER13`"]
        pub struct MODER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `MODER12`"]
        pub type MODER12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER12`"]
        pub struct MODER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `MODER11`"]
        pub type MODER11_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER11`"]
        pub struct MODER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `MODER10`"]
        pub type MODER10_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER10`"]
        pub struct MODER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `MODER9`"]
        pub type MODER9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER9`"]
        pub struct MODER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `MODER8`"]
        pub type MODER8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER8`"]
        pub struct MODER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MODER7`"]
        pub type MODER7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER7`"]
        pub struct MODER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `MODER6`"]
        pub type MODER6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER6`"]
        pub struct MODER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MODER5`"]
        pub type MODER5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER5`"]
        pub struct MODER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `MODER4`"]
        pub type MODER4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER4`"]
        pub struct MODER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MODER3`"]
        pub type MODER3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER3`"]
        pub struct MODER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `MODER2`"]
        pub type MODER2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER2`"]
        pub struct MODER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MODER1`"]
        pub type MODER1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER1`"]
        pub struct MODER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `MODER0`"]
        pub type MODER0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER0`"]
        pub struct MODER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&self) -> MODER15_R {
                MODER15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&self) -> MODER14_R {
                MODER14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&self) -> MODER13_R {
                MODER13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&self) -> MODER12_R {
                MODER12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&self) -> MODER11_R {
                MODER11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&self) -> MODER10_R {
                MODER10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&self) -> MODER9_R {
                MODER9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&self) -> MODER8_R {
                MODER8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&self) -> MODER7_R {
                MODER7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&self) -> MODER6_R {
                MODER6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&self) -> MODER5_R {
                MODER5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&self) -> MODER4_R {
                MODER4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&self) -> MODER3_R {
                MODER3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&self) -> MODER2_R {
                MODER2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&self) -> MODER1_R {
                MODER1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&self) -> MODER0_R {
                MODER0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&mut self) -> MODER15_W {
                MODER15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&mut self) -> MODER14_W {
                MODER14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&mut self) -> MODER13_W {
                MODER13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&mut self) -> MODER12_W {
                MODER12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&mut self) -> MODER11_W {
                MODER11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&mut self) -> MODER10_W {
                MODER10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&mut self) -> MODER9_W {
                MODER9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&mut self) -> MODER8_W {
                MODER8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&mut self) -> MODER7_W {
                MODER7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&mut self) -> MODER6_W {
                MODER6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&mut self) -> MODER5_W {
                MODER5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&mut self) -> MODER4_W {
                MODER4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&mut self) -> MODER3_W {
                MODER3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&mut self) -> MODER2_W {
                MODER2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&mut self) -> MODER1_W {
                MODER1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&mut self) -> MODER0_W {
                MODER0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output type register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [otyper](otyper) module"]
    pub type OTYPER = crate::Reg<u32, _OTYPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OTYPER;
    #[doc = "`read()` method returns [otyper::R](otyper::R) reader structure"]
    impl crate::Readable for OTYPER {}
    #[doc = "`write(|w| ..)` method takes [otyper::W](otyper::W) writer structure"]
    impl crate::Writable for OTYPER {}
    #[doc = "GPIO port output type register"]
    pub mod otyper {
        #[doc = "Reader of register OTYPER"]
        pub type R = crate::R<u32, super::OTYPER>;
        #[doc = "Writer for register OTYPER"]
        pub type W = crate::W<u32, super::OTYPER>;
        #[doc = "Register OTYPER `reset()`'s with value 0"]
        impl crate::ResetValue for super::OTYPER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OT15`"]
        pub type OT15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT15`"]
        pub struct OT15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `OT14`"]
        pub type OT14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT14`"]
        pub struct OT14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `OT13`"]
        pub type OT13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT13`"]
        pub struct OT13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `OT12`"]
        pub type OT12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT12`"]
        pub struct OT12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OT11`"]
        pub type OT11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT11`"]
        pub struct OT11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OT10`"]
        pub type OT10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT10`"]
        pub struct OT10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OT9`"]
        pub type OT9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT9`"]
        pub struct OT9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `OT8`"]
        pub type OT8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT8`"]
        pub struct OT8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OT7`"]
        pub type OT7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT7`"]
        pub struct OT7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OT6`"]
        pub type OT6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT6`"]
        pub struct OT6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `OT5`"]
        pub type OT5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT5`"]
        pub struct OT5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `OT4`"]
        pub type OT4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT4`"]
        pub struct OT4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OT3`"]
        pub type OT3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT3`"]
        pub struct OT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OT2`"]
        pub type OT2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT2`"]
        pub struct OT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OT1`"]
        pub type OT1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT1`"]
        pub struct OT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `OT0`"]
        pub type OT0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT0`"]
        pub struct OT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&self) -> OT15_R {
                OT15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&self) -> OT14_R {
                OT14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&self) -> OT13_R {
                OT13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&self) -> OT12_R {
                OT12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&self) -> OT11_R {
                OT11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&self) -> OT10_R {
                OT10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&self) -> OT9_R {
                OT9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&self) -> OT8_R {
                OT8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&self) -> OT7_R {
                OT7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&self) -> OT6_R {
                OT6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&self) -> OT5_R {
                OT5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&self) -> OT4_R {
                OT4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&self) -> OT3_R {
                OT3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&self) -> OT2_R {
                OT2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&self) -> OT1_R {
                OT1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&self) -> OT0_R {
                OT0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&mut self) -> OT15_W {
                OT15_W { w: self }
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&mut self) -> OT14_W {
                OT14_W { w: self }
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&mut self) -> OT13_W {
                OT13_W { w: self }
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&mut self) -> OT12_W {
                OT12_W { w: self }
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&mut self) -> OT11_W {
                OT11_W { w: self }
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&mut self) -> OT10_W {
                OT10_W { w: self }
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&mut self) -> OT9_W {
                OT9_W { w: self }
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&mut self) -> OT8_W {
                OT8_W { w: self }
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&mut self) -> OT7_W {
                OT7_W { w: self }
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&mut self) -> OT6_W {
                OT6_W { w: self }
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&mut self) -> OT5_W {
                OT5_W { w: self }
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&mut self) -> OT4_W {
                OT4_W { w: self }
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&mut self) -> OT3_W {
                OT3_W { w: self }
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&mut self) -> OT2_W {
                OT2_W { w: self }
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&mut self) -> OT1_W {
                OT1_W { w: self }
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&mut self) -> OT0_W {
                OT0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output speed register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ospeedr](ospeedr) module"]
    pub type OSPEEDR = crate::Reg<u32, _OSPEEDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OSPEEDR;
    #[doc = "`read()` method returns [ospeedr::R](ospeedr::R) reader structure"]
    impl crate::Readable for OSPEEDR {}
    #[doc = "`write(|w| ..)` method takes [ospeedr::W](ospeedr::W) writer structure"]
    impl crate::Writable for OSPEEDR {}
    #[doc = "GPIO port output speed register"]
    pub mod ospeedr {
        #[doc = "Reader of register OSPEEDR"]
        pub type R = crate::R<u32, super::OSPEEDR>;
        #[doc = "Writer for register OSPEEDR"]
        pub type W = crate::W<u32, super::OSPEEDR>;
        #[doc = "Register OSPEEDR `reset()`'s with value 0x0c00_0000"]
        impl crate::ResetValue for super::OSPEEDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0c00_0000
            }
        }
        #[doc = "Reader of field `OSPEEDR15`"]
        pub type OSPEEDR15_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR15`"]
        pub struct OSPEEDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR14`"]
        pub type OSPEEDR14_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR14`"]
        pub struct OSPEEDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR13`"]
        pub type OSPEEDR13_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR13`"]
        pub struct OSPEEDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR12`"]
        pub type OSPEEDR12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR12`"]
        pub struct OSPEEDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR11`"]
        pub type OSPEEDR11_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR11`"]
        pub struct OSPEEDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR10`"]
        pub type OSPEEDR10_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR10`"]
        pub struct OSPEEDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR9`"]
        pub type OSPEEDR9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR9`"]
        pub struct OSPEEDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR8`"]
        pub type OSPEEDR8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR8`"]
        pub struct OSPEEDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR7`"]
        pub type OSPEEDR7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR7`"]
        pub struct OSPEEDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR6`"]
        pub type OSPEEDR6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR6`"]
        pub struct OSPEEDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR5`"]
        pub type OSPEEDR5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR5`"]
        pub struct OSPEEDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR4`"]
        pub type OSPEEDR4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR4`"]
        pub struct OSPEEDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR3`"]
        pub type OSPEEDR3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR3`"]
        pub struct OSPEEDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR2`"]
        pub type OSPEEDR2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR2`"]
        pub struct OSPEEDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR1`"]
        pub type OSPEEDR1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR1`"]
        pub struct OSPEEDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR0`"]
        pub type OSPEEDR0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR0`"]
        pub struct OSPEEDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr15(&self) -> OSPEEDR15_R {
                OSPEEDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr14(&self) -> OSPEEDR14_R {
                OSPEEDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr13(&self) -> OSPEEDR13_R {
                OSPEEDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr12(&self) -> OSPEEDR12_R {
                OSPEEDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr11(&self) -> OSPEEDR11_R {
                OSPEEDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr10(&self) -> OSPEEDR10_R {
                OSPEEDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr9(&self) -> OSPEEDR9_R {
                OSPEEDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr8(&self) -> OSPEEDR8_R {
                OSPEEDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr7(&self) -> OSPEEDR7_R {
                OSPEEDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr6(&self) -> OSPEEDR6_R {
                OSPEEDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr5(&self) -> OSPEEDR5_R {
                OSPEEDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr4(&self) -> OSPEEDR4_R {
                OSPEEDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr3(&self) -> OSPEEDR3_R {
                OSPEEDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr2(&self) -> OSPEEDR2_R {
                OSPEEDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr1(&self) -> OSPEEDR1_R {
                OSPEEDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr0(&self) -> OSPEEDR0_R {
                OSPEEDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr15(&mut self) -> OSPEEDR15_W {
                OSPEEDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr14(&mut self) -> OSPEEDR14_W {
                OSPEEDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr13(&mut self) -> OSPEEDR13_W {
                OSPEEDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr12(&mut self) -> OSPEEDR12_W {
                OSPEEDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr11(&mut self) -> OSPEEDR11_W {
                OSPEEDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr10(&mut self) -> OSPEEDR10_W {
                OSPEEDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr9(&mut self) -> OSPEEDR9_W {
                OSPEEDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr8(&mut self) -> OSPEEDR8_W {
                OSPEEDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr7(&mut self) -> OSPEEDR7_W {
                OSPEEDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr6(&mut self) -> OSPEEDR6_W {
                OSPEEDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr5(&mut self) -> OSPEEDR5_W {
                OSPEEDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr4(&mut self) -> OSPEEDR4_W {
                OSPEEDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr3(&mut self) -> OSPEEDR3_W {
                OSPEEDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr2(&mut self) -> OSPEEDR2_W {
                OSPEEDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr1(&mut self) -> OSPEEDR1_W {
                OSPEEDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr0(&mut self) -> OSPEEDR0_W {
                OSPEEDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port pull-up/pull-down register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pupdr](pupdr) module"]
    pub type PUPDR = crate::Reg<u32, _PUPDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUPDR;
    #[doc = "`read()` method returns [pupdr::R](pupdr::R) reader structure"]
    impl crate::Readable for PUPDR {}
    #[doc = "`write(|w| ..)` method takes [pupdr::W](pupdr::W) writer structure"]
    impl crate::Writable for PUPDR {}
    #[doc = "GPIO port pull-up/pull-down register"]
    pub mod pupdr {
        #[doc = "Reader of register PUPDR"]
        pub type R = crate::R<u32, super::PUPDR>;
        #[doc = "Writer for register PUPDR"]
        pub type W = crate::W<u32, super::PUPDR>;
        #[doc = "Register PUPDR `reset()`'s with value 0x2400_0000"]
        impl crate::ResetValue for super::PUPDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x2400_0000
            }
        }
        #[doc = "Reader of field `PUPDR15`"]
        pub type PUPDR15_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR15`"]
        pub struct PUPDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR14`"]
        pub type PUPDR14_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR14`"]
        pub struct PUPDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR13`"]
        pub type PUPDR13_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR13`"]
        pub struct PUPDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR12`"]
        pub type PUPDR12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR12`"]
        pub struct PUPDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR11`"]
        pub type PUPDR11_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR11`"]
        pub struct PUPDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR10`"]
        pub type PUPDR10_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR10`"]
        pub struct PUPDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR9`"]
        pub type PUPDR9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR9`"]
        pub struct PUPDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR8`"]
        pub type PUPDR8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR8`"]
        pub struct PUPDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR7`"]
        pub type PUPDR7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR7`"]
        pub struct PUPDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR6`"]
        pub type PUPDR6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR6`"]
        pub struct PUPDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR5`"]
        pub type PUPDR5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR5`"]
        pub struct PUPDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR4`"]
        pub type PUPDR4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR4`"]
        pub struct PUPDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR3`"]
        pub type PUPDR3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR3`"]
        pub struct PUPDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR2`"]
        pub type PUPDR2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR2`"]
        pub struct PUPDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR1`"]
        pub type PUPDR1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR1`"]
        pub struct PUPDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR0`"]
        pub type PUPDR0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR0`"]
        pub struct PUPDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&self) -> PUPDR15_R {
                PUPDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&self) -> PUPDR14_R {
                PUPDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&self) -> PUPDR13_R {
                PUPDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&self) -> PUPDR12_R {
                PUPDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&self) -> PUPDR11_R {
                PUPDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&self) -> PUPDR10_R {
                PUPDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&self) -> PUPDR9_R {
                PUPDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&self) -> PUPDR8_R {
                PUPDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&self) -> PUPDR7_R {
                PUPDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&self) -> PUPDR6_R {
                PUPDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&self) -> PUPDR5_R {
                PUPDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&self) -> PUPDR4_R {
                PUPDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&self) -> PUPDR3_R {
                PUPDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&self) -> PUPDR2_R {
                PUPDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&self) -> PUPDR1_R {
                PUPDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&self) -> PUPDR0_R {
                PUPDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&mut self) -> PUPDR15_W {
                PUPDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&mut self) -> PUPDR14_W {
                PUPDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&mut self) -> PUPDR13_W {
                PUPDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&mut self) -> PUPDR12_W {
                PUPDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&mut self) -> PUPDR11_W {
                PUPDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&mut self) -> PUPDR10_W {
                PUPDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&mut self) -> PUPDR9_W {
                PUPDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&mut self) -> PUPDR8_W {
                PUPDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&mut self) -> PUPDR7_W {
                PUPDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&mut self) -> PUPDR6_W {
                PUPDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&mut self) -> PUPDR5_W {
                PUPDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&mut self) -> PUPDR4_W {
                PUPDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&mut self) -> PUPDR3_W {
                PUPDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&mut self) -> PUPDR2_W {
                PUPDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&mut self) -> PUPDR1_W {
                PUPDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&mut self) -> PUPDR0_W {
                PUPDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port input data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idr](idr) module"]
    pub type IDR = crate::Reg<u32, _IDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDR;
    #[doc = "`read()` method returns [idr::R](idr::R) reader structure"]
    impl crate::Readable for IDR {}
    #[doc = "GPIO port input data register"]
    pub mod idr {
        #[doc = "Reader of register IDR"]
        pub type R = crate::R<u32, super::IDR>;
        #[doc = "Reader of field `IDR15`"]
        pub type IDR15_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR14`"]
        pub type IDR14_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR13`"]
        pub type IDR13_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR12`"]
        pub type IDR12_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR11`"]
        pub type IDR11_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR10`"]
        pub type IDR10_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR9`"]
        pub type IDR9_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR8`"]
        pub type IDR8_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR7`"]
        pub type IDR7_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR6`"]
        pub type IDR6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR5`"]
        pub type IDR5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR4`"]
        pub type IDR4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR3`"]
        pub type IDR3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR2`"]
        pub type IDR2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR1`"]
        pub type IDR1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR0`"]
        pub type IDR0_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 15 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr15(&self) -> IDR15_R {
                IDR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr14(&self) -> IDR14_R {
                IDR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr13(&self) -> IDR13_R {
                IDR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr12(&self) -> IDR12_R {
                IDR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr11(&self) -> IDR11_R {
                IDR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr10(&self) -> IDR10_R {
                IDR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr9(&self) -> IDR9_R {
                IDR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr8(&self) -> IDR8_R {
                IDR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr7(&self) -> IDR7_R {
                IDR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr6(&self) -> IDR6_R {
                IDR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr5(&self) -> IDR5_R {
                IDR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr4(&self) -> IDR4_R {
                IDR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr3(&self) -> IDR3_R {
                IDR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr2(&self) -> IDR2_R {
                IDR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr1(&self) -> IDR1_R {
                IDR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr0(&self) -> IDR0_R {
                IDR0_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "GPIO port output data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [odr](odr) module"]
    pub type ODR = crate::Reg<u32, _ODR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ODR;
    #[doc = "`read()` method returns [odr::R](odr::R) reader structure"]
    impl crate::Readable for ODR {}
    #[doc = "`write(|w| ..)` method takes [odr::W](odr::W) writer structure"]
    impl crate::Writable for ODR {}
    #[doc = "GPIO port output data register"]
    pub mod odr {
        #[doc = "Reader of register ODR"]
        pub type R = crate::R<u32, super::ODR>;
        #[doc = "Writer for register ODR"]
        pub type W = crate::W<u32, super::ODR>;
        #[doc = "Register ODR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ODR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ODR15`"]
        pub type ODR15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR15`"]
        pub struct ODR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `ODR14`"]
        pub type ODR14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR14`"]
        pub struct ODR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `ODR13`"]
        pub type ODR13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR13`"]
        pub struct ODR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `ODR12`"]
        pub type ODR12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR12`"]
        pub struct ODR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `ODR11`"]
        pub type ODR11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR11`"]
        pub struct ODR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `ODR10`"]
        pub type ODR10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR10`"]
        pub struct ODR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `ODR9`"]
        pub type ODR9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR9`"]
        pub struct ODR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ODR8`"]
        pub type ODR8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR8`"]
        pub struct ODR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ODR7`"]
        pub type ODR7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR7`"]
        pub struct ODR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ODR6`"]
        pub type ODR6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR6`"]
        pub struct ODR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ODR5`"]
        pub type ODR5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR5`"]
        pub struct ODR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `ODR4`"]
        pub type ODR4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR4`"]
        pub struct ODR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ODR3`"]
        pub type ODR3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR3`"]
        pub struct ODR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `ODR2`"]
        pub type ODR2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR2`"]
        pub struct ODR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ODR1`"]
        pub type ODR1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR1`"]
        pub struct ODR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `ODR0`"]
        pub type ODR0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR0`"]
        pub struct ODR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&self) -> ODR15_R {
                ODR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&self) -> ODR14_R {
                ODR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&self) -> ODR13_R {
                ODR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&self) -> ODR12_R {
                ODR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&self) -> ODR11_R {
                ODR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&self) -> ODR10_R {
                ODR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&self) -> ODR9_R {
                ODR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&self) -> ODR8_R {
                ODR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&self) -> ODR7_R {
                ODR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&self) -> ODR6_R {
                ODR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&self) -> ODR5_R {
                ODR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&self) -> ODR4_R {
                ODR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&self) -> ODR3_R {
                ODR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&self) -> ODR2_R {
                ODR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&self) -> ODR1_R {
                ODR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&self) -> ODR0_R {
                ODR0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&mut self) -> ODR15_W {
                ODR15_W { w: self }
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&mut self) -> ODR14_W {
                ODR14_W { w: self }
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&mut self) -> ODR13_W {
                ODR13_W { w: self }
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&mut self) -> ODR12_W {
                ODR12_W { w: self }
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&mut self) -> ODR11_W {
                ODR11_W { w: self }
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&mut self) -> ODR10_W {
                ODR10_W { w: self }
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&mut self) -> ODR9_W {
                ODR9_W { w: self }
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&mut self) -> ODR8_W {
                ODR8_W { w: self }
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&mut self) -> ODR7_W {
                ODR7_W { w: self }
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&mut self) -> ODR6_W {
                ODR6_W { w: self }
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&mut self) -> ODR5_W {
                ODR5_W { w: self }
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&mut self) -> ODR4_W {
                ODR4_W { w: self }
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&mut self) -> ODR3_W {
                ODR3_W { w: self }
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&mut self) -> ODR2_W {
                ODR2_W { w: self }
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&mut self) -> ODR1_W {
                ODR1_W { w: self }
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&mut self) -> ODR0_W {
                ODR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port bit set/reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bsrr](bsrr) module"]
    pub type BSRR = crate::Reg<u32, _BSRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BSRR;
    #[doc = "`write(|w| ..)` method takes [bsrr::W](bsrr::W) writer structure"]
    impl crate::Writable for BSRR {}
    #[doc = "GPIO port bit set/reset register"]
    pub mod bsrr {
        #[doc = "Writer for register BSRR"]
        pub type W = crate::W<u32, super::BSRR>;
        #[doc = "Register BSRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BSRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS15`"]
        pub struct BS15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS14`"]
        pub struct BS14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS13`"]
        pub struct BS13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS12`"]
        pub struct BS12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS11`"]
        pub struct BS11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS10`"]
        pub struct BS10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS9`"]
        pub struct BS9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS8`"]
        pub struct BS8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS7`"]
        pub struct BS7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS6`"]
        pub struct BS6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS5`"]
        pub struct BS5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS4`"]
        pub struct BS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS3`"]
        pub struct BS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS2`"]
        pub struct BS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS1`"]
        pub struct BS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS0`"]
        pub struct BS0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
            #[doc = "Bit 30 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 29 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 28 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 27 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 26 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 25 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 24 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 23 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 22 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 21 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 20 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 19 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 18 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 17 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 16 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 15 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs15(&mut self) -> BS15_W {
                BS15_W { w: self }
            }
            #[doc = "Bit 14 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs14(&mut self) -> BS14_W {
                BS14_W { w: self }
            }
            #[doc = "Bit 13 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs13(&mut self) -> BS13_W {
                BS13_W { w: self }
            }
            #[doc = "Bit 12 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs12(&mut self) -> BS12_W {
                BS12_W { w: self }
            }
            #[doc = "Bit 11 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs11(&mut self) -> BS11_W {
                BS11_W { w: self }
            }
            #[doc = "Bit 10 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs10(&mut self) -> BS10_W {
                BS10_W { w: self }
            }
            #[doc = "Bit 9 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs9(&mut self) -> BS9_W {
                BS9_W { w: self }
            }
            #[doc = "Bit 8 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs8(&mut self) -> BS8_W {
                BS8_W { w: self }
            }
            #[doc = "Bit 7 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs7(&mut self) -> BS7_W {
                BS7_W { w: self }
            }
            #[doc = "Bit 6 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs6(&mut self) -> BS6_W {
                BS6_W { w: self }
            }
            #[doc = "Bit 5 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs5(&mut self) -> BS5_W {
                BS5_W { w: self }
            }
            #[doc = "Bit 4 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs4(&mut self) -> BS4_W {
                BS4_W { w: self }
            }
            #[doc = "Bit 3 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs3(&mut self) -> BS3_W {
                BS3_W { w: self }
            }
            #[doc = "Bit 2 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs2(&mut self) -> BS2_W {
                BS2_W { w: self }
            }
            #[doc = "Bit 1 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs1(&mut self) -> BS1_W {
                BS1_W { w: self }
            }
            #[doc = "Bit 0 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs0(&mut self) -> BS0_W {
                BS0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port configuration lock register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lckr](lckr) module"]
    pub type LCKR = crate::Reg<u32, _LCKR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LCKR;
    #[doc = "`read()` method returns [lckr::R](lckr::R) reader structure"]
    impl crate::Readable for LCKR {}
    #[doc = "`write(|w| ..)` method takes [lckr::W](lckr::W) writer structure"]
    impl crate::Writable for LCKR {}
    #[doc = "GPIO port configuration lock register"]
    pub mod lckr {
        #[doc = "Reader of register LCKR"]
        pub type R = crate::R<u32, super::LCKR>;
        #[doc = "Writer for register LCKR"]
        pub type W = crate::W<u32, super::LCKR>;
        #[doc = "Register LCKR `reset()`'s with value 0"]
        impl crate::ResetValue for super::LCKR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LCKK`"]
        pub type LCKK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCKK`"]
        pub struct LCKK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCKK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `LCK15`"]
        pub type LCK15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK15`"]
        pub struct LCK15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `LCK14`"]
        pub type LCK14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK14`"]
        pub struct LCK14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `LCK13`"]
        pub type LCK13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK13`"]
        pub struct LCK13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `LCK12`"]
        pub type LCK12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK12`"]
        pub struct LCK12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `LCK11`"]
        pub type LCK11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK11`"]
        pub struct LCK11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `LCK10`"]
        pub type LCK10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK10`"]
        pub struct LCK10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `LCK9`"]
        pub type LCK9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK9`"]
        pub struct LCK9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `LCK8`"]
        pub type LCK8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK8`"]
        pub struct LCK8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `LCK7`"]
        pub type LCK7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK7`"]
        pub struct LCK7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `LCK6`"]
        pub type LCK6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK6`"]
        pub struct LCK6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `LCK5`"]
        pub type LCK5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK5`"]
        pub struct LCK5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `LCK4`"]
        pub type LCK4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK4`"]
        pub struct LCK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `LCK3`"]
        pub type LCK3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK3`"]
        pub struct LCK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `LCK2`"]
        pub type LCK2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK2`"]
        pub struct LCK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `LCK1`"]
        pub type LCK1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK1`"]
        pub struct LCK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `LCK0`"]
        pub type LCK0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK0`"]
        pub struct LCK0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&self) -> LCKK_R {
                LCKK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&self) -> LCK15_R {
                LCK15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&self) -> LCK14_R {
                LCK14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&self) -> LCK13_R {
                LCK13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&self) -> LCK12_R {
                LCK12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&self) -> LCK11_R {
                LCK11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&self) -> LCK10_R {
                LCK10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&self) -> LCK9_R {
                LCK9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&self) -> LCK8_R {
                LCK8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&self) -> LCK7_R {
                LCK7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&self) -> LCK6_R {
                LCK6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&self) -> LCK5_R {
                LCK5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&self) -> LCK4_R {
                LCK4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&self) -> LCK3_R {
                LCK3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&self) -> LCK2_R {
                LCK2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&self) -> LCK1_R {
                LCK1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&self) -> LCK0_R {
                LCK0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&mut self) -> LCKK_W {
                LCKK_W { w: self }
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&mut self) -> LCK15_W {
                LCK15_W { w: self }
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&mut self) -> LCK14_W {
                LCK14_W { w: self }
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&mut self) -> LCK13_W {
                LCK13_W { w: self }
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&mut self) -> LCK12_W {
                LCK12_W { w: self }
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&mut self) -> LCK11_W {
                LCK11_W { w: self }
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&mut self) -> LCK10_W {
                LCK10_W { w: self }
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&mut self) -> LCK9_W {
                LCK9_W { w: self }
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&mut self) -> LCK8_W {
                LCK8_W { w: self }
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&mut self) -> LCK7_W {
                LCK7_W { w: self }
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&mut self) -> LCK6_W {
                LCK6_W { w: self }
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&mut self) -> LCK5_W {
                LCK5_W { w: self }
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&mut self) -> LCK4_W {
                LCK4_W { w: self }
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&mut self) -> LCK3_W {
                LCK3_W { w: self }
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&mut self) -> LCK2_W {
                LCK2_W { w: self }
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&mut self) -> LCK1_W {
                LCK1_W { w: self }
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&mut self) -> LCK0_W {
                LCK0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function low register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrl](afrl) module"]
    pub type AFRL = crate::Reg<u32, _AFRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRL;
    #[doc = "`read()` method returns [afrl::R](afrl::R) reader structure"]
    impl crate::Readable for AFRL {}
    #[doc = "`write(|w| ..)` method takes [afrl::W](afrl::W) writer structure"]
    impl crate::Writable for AFRL {}
    #[doc = "GPIO alternate function low register"]
    pub mod afrl {
        #[doc = "Reader of register AFRL"]
        pub type R = crate::R<u32, super::AFRL>;
        #[doc = "Writer for register AFRL"]
        pub type W = crate::W<u32, super::AFRL>;
        #[doc = "Register AFRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AFSEL7`"]
        pub type AFSEL7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL7`"]
        pub struct AFSEL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL6`"]
        pub type AFSEL6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL6`"]
        pub struct AFSEL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL5`"]
        pub type AFSEL5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL5`"]
        pub struct AFSEL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL4`"]
        pub type AFSEL4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL4`"]
        pub struct AFSEL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL3`"]
        pub type AFSEL3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL3`"]
        pub struct AFSEL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL2`"]
        pub type AFSEL2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL2`"]
        pub struct AFSEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL1`"]
        pub type AFSEL1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL1`"]
        pub struct AFSEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL0`"]
        pub type AFSEL0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL0`"]
        pub struct AFSEL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel7(&self) -> AFSEL7_R {
                AFSEL7_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel6(&self) -> AFSEL6_R {
                AFSEL6_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel5(&self) -> AFSEL5_R {
                AFSEL5_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel4(&self) -> AFSEL4_R {
                AFSEL4_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel3(&self) -> AFSEL3_R {
                AFSEL3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel2(&self) -> AFSEL2_R {
                AFSEL2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel1(&self) -> AFSEL1_R {
                AFSEL1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel0(&self) -> AFSEL0_R {
                AFSEL0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel7(&mut self) -> AFSEL7_W {
                AFSEL7_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel6(&mut self) -> AFSEL6_W {
                AFSEL6_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel5(&mut self) -> AFSEL5_W {
                AFSEL5_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel4(&mut self) -> AFSEL4_W {
                AFSEL4_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel3(&mut self) -> AFSEL3_W {
                AFSEL3_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel2(&mut self) -> AFSEL2_W {
                AFSEL2_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel1(&mut self) -> AFSEL1_W {
                AFSEL1_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel0(&mut self) -> AFSEL0_W {
                AFSEL0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function high register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrh](afrh) module"]
    pub type AFRH = crate::Reg<u32, _AFRH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRH;
    #[doc = "`read()` method returns [afrh::R](afrh::R) reader structure"]
    impl crate::Readable for AFRH {}
    #[doc = "`write(|w| ..)` method takes [afrh::W](afrh::W) writer structure"]
    impl crate::Writable for AFRH {}
    #[doc = "GPIO alternate function high register"]
    pub mod afrh {
        #[doc = "Reader of register AFRH"]
        pub type R = crate::R<u32, super::AFRH>;
        #[doc = "Writer for register AFRH"]
        pub type W = crate::W<u32, super::AFRH>;
        #[doc = "Register AFRH `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AFSEL15`"]
        pub type AFSEL15_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL15`"]
        pub struct AFSEL15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL14`"]
        pub type AFSEL14_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL14`"]
        pub struct AFSEL14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL13`"]
        pub type AFSEL13_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL13`"]
        pub struct AFSEL13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL12`"]
        pub type AFSEL12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL12`"]
        pub struct AFSEL12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL11`"]
        pub type AFSEL11_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL11`"]
        pub struct AFSEL11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL10`"]
        pub type AFSEL10_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL10`"]
        pub struct AFSEL10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL9`"]
        pub type AFSEL9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL9`"]
        pub struct AFSEL9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL8`"]
        pub type AFSEL8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL8`"]
        pub struct AFSEL8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel15(&self) -> AFSEL15_R {
                AFSEL15_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel14(&self) -> AFSEL14_R {
                AFSEL14_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel13(&self) -> AFSEL13_R {
                AFSEL13_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel12(&self) -> AFSEL12_R {
                AFSEL12_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel11(&self) -> AFSEL11_R {
                AFSEL11_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel10(&self) -> AFSEL10_R {
                AFSEL10_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel9(&self) -> AFSEL9_R {
                AFSEL9_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel8(&self) -> AFSEL8_R {
                AFSEL8_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel15(&mut self) -> AFSEL15_W {
                AFSEL15_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel14(&mut self) -> AFSEL14_W {
                AFSEL14_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel13(&mut self) -> AFSEL13_W {
                AFSEL13_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel12(&mut self) -> AFSEL12_W {
                AFSEL12_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel11(&mut self) -> AFSEL11_W {
                AFSEL11_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel10(&mut self) -> AFSEL10_W {
                AFSEL10_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel9(&mut self) -> AFSEL9_W {
                AFSEL9_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel8(&mut self) -> AFSEL8_W {
                AFSEL8_W { w: self }
            }
        }
    }
    #[doc = "port bit reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [brr](brr) module"]
    pub type BRR = crate::Reg<u32, _BRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BRR;
    #[doc = "`write(|w| ..)` method takes [brr::W](brr::W) writer structure"]
    impl crate::Writable for BRR {}
    #[doc = "port bit reset register"]
    pub mod brr {
        #[doc = "Writer for register BRR"]
        pub type W = crate::W<u32, super::BRR>;
        #[doc = "Register BRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Port Reset bit"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 1 - Port Reset bit"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 2 - Port Reset bit"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 3 - Port Reset bit"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 4 - Port Reset bit"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 5 - Port Reset bit"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 6 - Port Reset bit"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 7 - Port Reset bit"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 8 - Port Reset bit"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 9 - Port Reset bit"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 10 - Port Reset bit"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 11 - Port Reset bit"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 12 - Port Reset bit"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 13 - Port Reset bit"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 14 - Port Reset bit"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 15 - Port Reset bit"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOB {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOB {}
impl GPIOB {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpiob::RegisterBlock {
        0x5000_0400 as *const _
    }
}
impl Deref for GPIOB {
    type Target = gpiob::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOB::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpiob {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - GPIO port mode register"]
        pub moder: MODER,
        #[doc = "0x04 - GPIO port output type register"]
        pub otyper: OTYPER,
        #[doc = "0x08 - GPIO port output speed register"]
        pub ospeedr: OSPEEDR,
        #[doc = "0x0c - GPIO port pull-up/pull-down register"]
        pub pupdr: PUPDR,
        #[doc = "0x10 - GPIO port input data register"]
        pub idr: IDR,
        #[doc = "0x14 - GPIO port output data register"]
        pub odr: ODR,
        #[doc = "0x18 - GPIO port bit set/reset register"]
        pub bsrr: BSRR,
        #[doc = "0x1c - GPIO port configuration lock register"]
        pub lckr: LCKR,
        #[doc = "0x20 - GPIO alternate function low register"]
        pub afrl: AFRL,
        #[doc = "0x24 - GPIO alternate function high register"]
        pub afrh: AFRH,
        #[doc = "0x28 - port bit reset register"]
        pub brr: BRR,
    }
    #[doc = "GPIO port mode register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [moder](moder) module"]
    pub type MODER = crate::Reg<u32, _MODER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MODER;
    #[doc = "`read()` method returns [moder::R](moder::R) reader structure"]
    impl crate::Readable for MODER {}
    #[doc = "`write(|w| ..)` method takes [moder::W](moder::W) writer structure"]
    impl crate::Writable for MODER {}
    #[doc = "GPIO port mode register"]
    pub mod moder {
        #[doc = "Reader of register MODER"]
        pub type R = crate::R<u32, super::MODER>;
        #[doc = "Writer for register MODER"]
        pub type W = crate::W<u32, super::MODER>;
        #[doc = "Register MODER `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::MODER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `MODER15`"]
        pub type MODER15_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER15`"]
        pub struct MODER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `MODER14`"]
        pub type MODER14_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER14`"]
        pub struct MODER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `MODER13`"]
        pub type MODER13_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER13`"]
        pub struct MODER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `MODER12`"]
        pub type MODER12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER12`"]
        pub struct MODER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `MODER11`"]
        pub type MODER11_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER11`"]
        pub struct MODER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `MODER10`"]
        pub type MODER10_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER10`"]
        pub struct MODER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `MODER9`"]
        pub type MODER9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER9`"]
        pub struct MODER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `MODER8`"]
        pub type MODER8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER8`"]
        pub struct MODER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MODER7`"]
        pub type MODER7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER7`"]
        pub struct MODER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `MODER6`"]
        pub type MODER6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER6`"]
        pub struct MODER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MODER5`"]
        pub type MODER5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER5`"]
        pub struct MODER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `MODER4`"]
        pub type MODER4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER4`"]
        pub struct MODER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MODER3`"]
        pub type MODER3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER3`"]
        pub struct MODER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `MODER2`"]
        pub type MODER2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER2`"]
        pub struct MODER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MODER1`"]
        pub type MODER1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER1`"]
        pub struct MODER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `MODER0`"]
        pub type MODER0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MODER0`"]
        pub struct MODER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MODER0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&self) -> MODER15_R {
                MODER15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&self) -> MODER14_R {
                MODER14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&self) -> MODER13_R {
                MODER13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&self) -> MODER12_R {
                MODER12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&self) -> MODER11_R {
                MODER11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&self) -> MODER10_R {
                MODER10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&self) -> MODER9_R {
                MODER9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&self) -> MODER8_R {
                MODER8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&self) -> MODER7_R {
                MODER7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&self) -> MODER6_R {
                MODER6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&self) -> MODER5_R {
                MODER5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&self) -> MODER4_R {
                MODER4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&self) -> MODER3_R {
                MODER3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&self) -> MODER2_R {
                MODER2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&self) -> MODER1_R {
                MODER1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&self) -> MODER0_R {
                MODER0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder15(&mut self) -> MODER15_W {
                MODER15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder14(&mut self) -> MODER14_W {
                MODER14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder13(&mut self) -> MODER13_W {
                MODER13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder12(&mut self) -> MODER12_W {
                MODER12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder11(&mut self) -> MODER11_W {
                MODER11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder10(&mut self) -> MODER10_W {
                MODER10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder9(&mut self) -> MODER9_W {
                MODER9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder8(&mut self) -> MODER8_W {
                MODER8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder7(&mut self) -> MODER7_W {
                MODER7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder6(&mut self) -> MODER6_W {
                MODER6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder5(&mut self) -> MODER5_W {
                MODER5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder4(&mut self) -> MODER4_W {
                MODER4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder3(&mut self) -> MODER3_W {
                MODER3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder2(&mut self) -> MODER2_W {
                MODER2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder1(&mut self) -> MODER1_W {
                MODER1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn moder0(&mut self) -> MODER0_W {
                MODER0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output type register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [otyper](otyper) module"]
    pub type OTYPER = crate::Reg<u32, _OTYPER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OTYPER;
    #[doc = "`read()` method returns [otyper::R](otyper::R) reader structure"]
    impl crate::Readable for OTYPER {}
    #[doc = "`write(|w| ..)` method takes [otyper::W](otyper::W) writer structure"]
    impl crate::Writable for OTYPER {}
    #[doc = "GPIO port output type register"]
    pub mod otyper {
        #[doc = "Reader of register OTYPER"]
        pub type R = crate::R<u32, super::OTYPER>;
        #[doc = "Writer for register OTYPER"]
        pub type W = crate::W<u32, super::OTYPER>;
        #[doc = "Register OTYPER `reset()`'s with value 0"]
        impl crate::ResetValue for super::OTYPER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OT15`"]
        pub type OT15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT15`"]
        pub struct OT15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `OT14`"]
        pub type OT14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT14`"]
        pub struct OT14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `OT13`"]
        pub type OT13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT13`"]
        pub struct OT13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `OT12`"]
        pub type OT12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT12`"]
        pub struct OT12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OT11`"]
        pub type OT11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT11`"]
        pub struct OT11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OT10`"]
        pub type OT10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT10`"]
        pub struct OT10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OT9`"]
        pub type OT9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT9`"]
        pub struct OT9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `OT8`"]
        pub type OT8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT8`"]
        pub struct OT8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OT7`"]
        pub type OT7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT7`"]
        pub struct OT7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OT6`"]
        pub type OT6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT6`"]
        pub struct OT6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `OT5`"]
        pub type OT5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT5`"]
        pub struct OT5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `OT4`"]
        pub type OT4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT4`"]
        pub struct OT4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OT3`"]
        pub type OT3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT3`"]
        pub struct OT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OT2`"]
        pub type OT2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT2`"]
        pub struct OT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OT1`"]
        pub type OT1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT1`"]
        pub struct OT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `OT0`"]
        pub type OT0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OT0`"]
        pub struct OT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OT0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&self) -> OT15_R {
                OT15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&self) -> OT14_R {
                OT14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&self) -> OT13_R {
                OT13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&self) -> OT12_R {
                OT12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&self) -> OT11_R {
                OT11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&self) -> OT10_R {
                OT10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&self) -> OT9_R {
                OT9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&self) -> OT8_R {
                OT8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&self) -> OT7_R {
                OT7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&self) -> OT6_R {
                OT6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&self) -> OT5_R {
                OT5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&self) -> OT4_R {
                OT4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&self) -> OT3_R {
                OT3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&self) -> OT2_R {
                OT2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&self) -> OT1_R {
                OT1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&self) -> OT0_R {
                OT0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot15(&mut self) -> OT15_W {
                OT15_W { w: self }
            }
            #[doc = "Bit 14 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot14(&mut self) -> OT14_W {
                OT14_W { w: self }
            }
            #[doc = "Bit 13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot13(&mut self) -> OT13_W {
                OT13_W { w: self }
            }
            #[doc = "Bit 12 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot12(&mut self) -> OT12_W {
                OT12_W { w: self }
            }
            #[doc = "Bit 11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot11(&mut self) -> OT11_W {
                OT11_W { w: self }
            }
            #[doc = "Bit 10 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot10(&mut self) -> OT10_W {
                OT10_W { w: self }
            }
            #[doc = "Bit 9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot9(&mut self) -> OT9_W {
                OT9_W { w: self }
            }
            #[doc = "Bit 8 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot8(&mut self) -> OT8_W {
                OT8_W { w: self }
            }
            #[doc = "Bit 7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot7(&mut self) -> OT7_W {
                OT7_W { w: self }
            }
            #[doc = "Bit 6 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot6(&mut self) -> OT6_W {
                OT6_W { w: self }
            }
            #[doc = "Bit 5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot5(&mut self) -> OT5_W {
                OT5_W { w: self }
            }
            #[doc = "Bit 4 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot4(&mut self) -> OT4_W {
                OT4_W { w: self }
            }
            #[doc = "Bit 3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot3(&mut self) -> OT3_W {
                OT3_W { w: self }
            }
            #[doc = "Bit 2 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot2(&mut self) -> OT2_W {
                OT2_W { w: self }
            }
            #[doc = "Bit 1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot1(&mut self) -> OT1_W {
                OT1_W { w: self }
            }
            #[doc = "Bit 0 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ot0(&mut self) -> OT0_W {
                OT0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port output speed register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ospeedr](ospeedr) module"]
    pub type OSPEEDR = crate::Reg<u32, _OSPEEDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OSPEEDR;
    #[doc = "`read()` method returns [ospeedr::R](ospeedr::R) reader structure"]
    impl crate::Readable for OSPEEDR {}
    #[doc = "`write(|w| ..)` method takes [ospeedr::W](ospeedr::W) writer structure"]
    impl crate::Writable for OSPEEDR {}
    #[doc = "GPIO port output speed register"]
    pub mod ospeedr {
        #[doc = "Reader of register OSPEEDR"]
        pub type R = crate::R<u32, super::OSPEEDR>;
        #[doc = "Writer for register OSPEEDR"]
        pub type W = crate::W<u32, super::OSPEEDR>;
        #[doc = "Register OSPEEDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::OSPEEDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OSPEEDR15`"]
        pub type OSPEEDR15_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR15`"]
        pub struct OSPEEDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR14`"]
        pub type OSPEEDR14_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR14`"]
        pub struct OSPEEDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR13`"]
        pub type OSPEEDR13_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR13`"]
        pub struct OSPEEDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR12`"]
        pub type OSPEEDR12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR12`"]
        pub struct OSPEEDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR11`"]
        pub type OSPEEDR11_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR11`"]
        pub struct OSPEEDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR10`"]
        pub type OSPEEDR10_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR10`"]
        pub struct OSPEEDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR9`"]
        pub type OSPEEDR9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR9`"]
        pub struct OSPEEDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR8`"]
        pub type OSPEEDR8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR8`"]
        pub struct OSPEEDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR7`"]
        pub type OSPEEDR7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR7`"]
        pub struct OSPEEDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR6`"]
        pub type OSPEEDR6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR6`"]
        pub struct OSPEEDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR5`"]
        pub type OSPEEDR5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR5`"]
        pub struct OSPEEDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR4`"]
        pub type OSPEEDR4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR4`"]
        pub struct OSPEEDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR3`"]
        pub type OSPEEDR3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR3`"]
        pub struct OSPEEDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR2`"]
        pub type OSPEEDR2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR2`"]
        pub struct OSPEEDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR1`"]
        pub type OSPEEDR1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR1`"]
        pub struct OSPEEDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OSPEEDR0`"]
        pub type OSPEEDR0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSPEEDR0`"]
        pub struct OSPEEDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSPEEDR0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr15(&self) -> OSPEEDR15_R {
                OSPEEDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr14(&self) -> OSPEEDR14_R {
                OSPEEDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr13(&self) -> OSPEEDR13_R {
                OSPEEDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr12(&self) -> OSPEEDR12_R {
                OSPEEDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr11(&self) -> OSPEEDR11_R {
                OSPEEDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr10(&self) -> OSPEEDR10_R {
                OSPEEDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr9(&self) -> OSPEEDR9_R {
                OSPEEDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr8(&self) -> OSPEEDR8_R {
                OSPEEDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr7(&self) -> OSPEEDR7_R {
                OSPEEDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr6(&self) -> OSPEEDR6_R {
                OSPEEDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr5(&self) -> OSPEEDR5_R {
                OSPEEDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr4(&self) -> OSPEEDR4_R {
                OSPEEDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr3(&self) -> OSPEEDR3_R {
                OSPEEDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr2(&self) -> OSPEEDR2_R {
                OSPEEDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr1(&self) -> OSPEEDR1_R {
                OSPEEDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr0(&self) -> OSPEEDR0_R {
                OSPEEDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr15(&mut self) -> OSPEEDR15_W {
                OSPEEDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr14(&mut self) -> OSPEEDR14_W {
                OSPEEDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr13(&mut self) -> OSPEEDR13_W {
                OSPEEDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr12(&mut self) -> OSPEEDR12_W {
                OSPEEDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr11(&mut self) -> OSPEEDR11_W {
                OSPEEDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr10(&mut self) -> OSPEEDR10_W {
                OSPEEDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr9(&mut self) -> OSPEEDR9_W {
                OSPEEDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr8(&mut self) -> OSPEEDR8_W {
                OSPEEDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr7(&mut self) -> OSPEEDR7_W {
                OSPEEDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr6(&mut self) -> OSPEEDR6_W {
                OSPEEDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr5(&mut self) -> OSPEEDR5_W {
                OSPEEDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr4(&mut self) -> OSPEEDR4_W {
                OSPEEDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr3(&mut self) -> OSPEEDR3_W {
                OSPEEDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr2(&mut self) -> OSPEEDR2_W {
                OSPEEDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr1(&mut self) -> OSPEEDR1_W {
                OSPEEDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn ospeedr0(&mut self) -> OSPEEDR0_W {
                OSPEEDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port pull-up/pull-down register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pupdr](pupdr) module"]
    pub type PUPDR = crate::Reg<u32, _PUPDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PUPDR;
    #[doc = "`read()` method returns [pupdr::R](pupdr::R) reader structure"]
    impl crate::Readable for PUPDR {}
    #[doc = "`write(|w| ..)` method takes [pupdr::W](pupdr::W) writer structure"]
    impl crate::Writable for PUPDR {}
    #[doc = "GPIO port pull-up/pull-down register"]
    pub mod pupdr {
        #[doc = "Reader of register PUPDR"]
        pub type R = crate::R<u32, super::PUPDR>;
        #[doc = "Writer for register PUPDR"]
        pub type W = crate::W<u32, super::PUPDR>;
        #[doc = "Register PUPDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::PUPDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PUPDR15`"]
        pub type PUPDR15_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR15`"]
        pub struct PUPDR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR14`"]
        pub type PUPDR14_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR14`"]
        pub struct PUPDR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR13`"]
        pub type PUPDR13_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR13`"]
        pub struct PUPDR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR12`"]
        pub type PUPDR12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR12`"]
        pub struct PUPDR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR11`"]
        pub type PUPDR11_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR11`"]
        pub struct PUPDR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR10`"]
        pub type PUPDR10_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR10`"]
        pub struct PUPDR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR9`"]
        pub type PUPDR9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR9`"]
        pub struct PUPDR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR8`"]
        pub type PUPDR8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR8`"]
        pub struct PUPDR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR7`"]
        pub type PUPDR7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR7`"]
        pub struct PUPDR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 14)) | (((value as u32) & 0x03) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR6`"]
        pub type PUPDR6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR6`"]
        pub struct PUPDR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR5`"]
        pub type PUPDR5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR5`"]
        pub struct PUPDR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR4`"]
        pub type PUPDR4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR4`"]
        pub struct PUPDR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR3`"]
        pub type PUPDR3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR3`"]
        pub struct PUPDR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR2`"]
        pub type PUPDR2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR2`"]
        pub struct PUPDR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR1`"]
        pub type PUPDR1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR1`"]
        pub struct PUPDR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `PUPDR0`"]
        pub type PUPDR0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PUPDR0`"]
        pub struct PUPDR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PUPDR0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&self) -> PUPDR15_R {
                PUPDR15_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&self) -> PUPDR14_R {
                PUPDR14_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&self) -> PUPDR13_R {
                PUPDR13_R::new(((self.bits >> 26) & 0x03) as u8)
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&self) -> PUPDR12_R {
                PUPDR12_R::new(((self.bits >> 24) & 0x03) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&self) -> PUPDR11_R {
                PUPDR11_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&self) -> PUPDR10_R {
                PUPDR10_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&self) -> PUPDR9_R {
                PUPDR9_R::new(((self.bits >> 18) & 0x03) as u8)
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&self) -> PUPDR8_R {
                PUPDR8_R::new(((self.bits >> 16) & 0x03) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&self) -> PUPDR7_R {
                PUPDR7_R::new(((self.bits >> 14) & 0x03) as u8)
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&self) -> PUPDR6_R {
                PUPDR6_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&self) -> PUPDR5_R {
                PUPDR5_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&self) -> PUPDR4_R {
                PUPDR4_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&self) -> PUPDR3_R {
                PUPDR3_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&self) -> PUPDR2_R {
                PUPDR2_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&self) -> PUPDR1_R {
                PUPDR1_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&self) -> PUPDR0_R {
                PUPDR0_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr15(&mut self) -> PUPDR15_W {
                PUPDR15_W { w: self }
            }
            #[doc = "Bits 28:29 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr14(&mut self) -> PUPDR14_W {
                PUPDR14_W { w: self }
            }
            #[doc = "Bits 26:27 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr13(&mut self) -> PUPDR13_W {
                PUPDR13_W { w: self }
            }
            #[doc = "Bits 24:25 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr12(&mut self) -> PUPDR12_W {
                PUPDR12_W { w: self }
            }
            #[doc = "Bits 22:23 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr11(&mut self) -> PUPDR11_W {
                PUPDR11_W { w: self }
            }
            #[doc = "Bits 20:21 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr10(&mut self) -> PUPDR10_W {
                PUPDR10_W { w: self }
            }
            #[doc = "Bits 18:19 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr9(&mut self) -> PUPDR9_W {
                PUPDR9_W { w: self }
            }
            #[doc = "Bits 16:17 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr8(&mut self) -> PUPDR8_W {
                PUPDR8_W { w: self }
            }
            #[doc = "Bits 14:15 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr7(&mut self) -> PUPDR7_W {
                PUPDR7_W { w: self }
            }
            #[doc = "Bits 12:13 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr6(&mut self) -> PUPDR6_W {
                PUPDR6_W { w: self }
            }
            #[doc = "Bits 10:11 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr5(&mut self) -> PUPDR5_W {
                PUPDR5_W { w: self }
            }
            #[doc = "Bits 8:9 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr4(&mut self) -> PUPDR4_W {
                PUPDR4_W { w: self }
            }
            #[doc = "Bits 6:7 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr3(&mut self) -> PUPDR3_W {
                PUPDR3_W { w: self }
            }
            #[doc = "Bits 4:5 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr2(&mut self) -> PUPDR2_W {
                PUPDR2_W { w: self }
            }
            #[doc = "Bits 2:3 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr1(&mut self) -> PUPDR1_W {
                PUPDR1_W { w: self }
            }
            #[doc = "Bits 0:1 - Port x configuration bits (y = 0..15)"]
            #[inline(always)]
            pub fn pupdr0(&mut self) -> PUPDR0_W {
                PUPDR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port input data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idr](idr) module"]
    pub type IDR = crate::Reg<u32, _IDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDR;
    #[doc = "`read()` method returns [idr::R](idr::R) reader structure"]
    impl crate::Readable for IDR {}
    #[doc = "GPIO port input data register"]
    pub mod idr {
        #[doc = "Reader of register IDR"]
        pub type R = crate::R<u32, super::IDR>;
        #[doc = "Reader of field `IDR15`"]
        pub type IDR15_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR14`"]
        pub type IDR14_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR13`"]
        pub type IDR13_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR12`"]
        pub type IDR12_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR11`"]
        pub type IDR11_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR10`"]
        pub type IDR10_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR9`"]
        pub type IDR9_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR8`"]
        pub type IDR8_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR7`"]
        pub type IDR7_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR6`"]
        pub type IDR6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR5`"]
        pub type IDR5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR4`"]
        pub type IDR4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR3`"]
        pub type IDR3_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR2`"]
        pub type IDR2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR1`"]
        pub type IDR1_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDR0`"]
        pub type IDR0_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 15 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr15(&self) -> IDR15_R {
                IDR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr14(&self) -> IDR14_R {
                IDR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr13(&self) -> IDR13_R {
                IDR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr12(&self) -> IDR12_R {
                IDR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr11(&self) -> IDR11_R {
                IDR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr10(&self) -> IDR10_R {
                IDR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr9(&self) -> IDR9_R {
                IDR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr8(&self) -> IDR8_R {
                IDR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr7(&self) -> IDR7_R {
                IDR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr6(&self) -> IDR6_R {
                IDR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr5(&self) -> IDR5_R {
                IDR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr4(&self) -> IDR4_R {
                IDR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr3(&self) -> IDR3_R {
                IDR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr2(&self) -> IDR2_R {
                IDR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr1(&self) -> IDR1_R {
                IDR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port input data (y = 0..15)"]
            #[inline(always)]
            pub fn idr0(&self) -> IDR0_R {
                IDR0_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "GPIO port output data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [odr](odr) module"]
    pub type ODR = crate::Reg<u32, _ODR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ODR;
    #[doc = "`read()` method returns [odr::R](odr::R) reader structure"]
    impl crate::Readable for ODR {}
    #[doc = "`write(|w| ..)` method takes [odr::W](odr::W) writer structure"]
    impl crate::Writable for ODR {}
    #[doc = "GPIO port output data register"]
    pub mod odr {
        #[doc = "Reader of register ODR"]
        pub type R = crate::R<u32, super::ODR>;
        #[doc = "Writer for register ODR"]
        pub type W = crate::W<u32, super::ODR>;
        #[doc = "Register ODR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ODR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ODR15`"]
        pub type ODR15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR15`"]
        pub struct ODR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `ODR14`"]
        pub type ODR14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR14`"]
        pub struct ODR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `ODR13`"]
        pub type ODR13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR13`"]
        pub struct ODR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `ODR12`"]
        pub type ODR12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR12`"]
        pub struct ODR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `ODR11`"]
        pub type ODR11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR11`"]
        pub struct ODR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `ODR10`"]
        pub type ODR10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR10`"]
        pub struct ODR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `ODR9`"]
        pub type ODR9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR9`"]
        pub struct ODR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `ODR8`"]
        pub type ODR8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR8`"]
        pub struct ODR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ODR7`"]
        pub type ODR7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR7`"]
        pub struct ODR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ODR6`"]
        pub type ODR6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR6`"]
        pub struct ODR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ODR5`"]
        pub type ODR5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR5`"]
        pub struct ODR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `ODR4`"]
        pub type ODR4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR4`"]
        pub struct ODR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ODR3`"]
        pub type ODR3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR3`"]
        pub struct ODR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `ODR2`"]
        pub type ODR2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR2`"]
        pub struct ODR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ODR1`"]
        pub type ODR1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR1`"]
        pub struct ODR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `ODR0`"]
        pub type ODR0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODR0`"]
        pub struct ODR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&self) -> ODR15_R {
                ODR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&self) -> ODR14_R {
                ODR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&self) -> ODR13_R {
                ODR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&self) -> ODR12_R {
                ODR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&self) -> ODR11_R {
                ODR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&self) -> ODR10_R {
                ODR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&self) -> ODR9_R {
                ODR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&self) -> ODR8_R {
                ODR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&self) -> ODR7_R {
                ODR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&self) -> ODR6_R {
                ODR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&self) -> ODR5_R {
                ODR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&self) -> ODR4_R {
                ODR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&self) -> ODR3_R {
                ODR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&self) -> ODR2_R {
                ODR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&self) -> ODR1_R {
                ODR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&self) -> ODR0_R {
                ODR0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr15(&mut self) -> ODR15_W {
                ODR15_W { w: self }
            }
            #[doc = "Bit 14 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr14(&mut self) -> ODR14_W {
                ODR14_W { w: self }
            }
            #[doc = "Bit 13 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr13(&mut self) -> ODR13_W {
                ODR13_W { w: self }
            }
            #[doc = "Bit 12 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr12(&mut self) -> ODR12_W {
                ODR12_W { w: self }
            }
            #[doc = "Bit 11 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr11(&mut self) -> ODR11_W {
                ODR11_W { w: self }
            }
            #[doc = "Bit 10 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr10(&mut self) -> ODR10_W {
                ODR10_W { w: self }
            }
            #[doc = "Bit 9 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr9(&mut self) -> ODR9_W {
                ODR9_W { w: self }
            }
            #[doc = "Bit 8 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr8(&mut self) -> ODR8_W {
                ODR8_W { w: self }
            }
            #[doc = "Bit 7 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr7(&mut self) -> ODR7_W {
                ODR7_W { w: self }
            }
            #[doc = "Bit 6 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr6(&mut self) -> ODR6_W {
                ODR6_W { w: self }
            }
            #[doc = "Bit 5 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr5(&mut self) -> ODR5_W {
                ODR5_W { w: self }
            }
            #[doc = "Bit 4 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr4(&mut self) -> ODR4_W {
                ODR4_W { w: self }
            }
            #[doc = "Bit 3 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr3(&mut self) -> ODR3_W {
                ODR3_W { w: self }
            }
            #[doc = "Bit 2 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr2(&mut self) -> ODR2_W {
                ODR2_W { w: self }
            }
            #[doc = "Bit 1 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr1(&mut self) -> ODR1_W {
                ODR1_W { w: self }
            }
            #[doc = "Bit 0 - Port output data (y = 0..15)"]
            #[inline(always)]
            pub fn odr0(&mut self) -> ODR0_W {
                ODR0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port bit set/reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bsrr](bsrr) module"]
    pub type BSRR = crate::Reg<u32, _BSRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BSRR;
    #[doc = "`write(|w| ..)` method takes [bsrr::W](bsrr::W) writer structure"]
    impl crate::Writable for BSRR {}
    #[doc = "GPIO port bit set/reset register"]
    pub mod bsrr {
        #[doc = "Writer for register BSRR"]
        pub type W = crate::W<u32, super::BSRR>;
        #[doc = "Register BSRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BSRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS15`"]
        pub struct BS15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS14`"]
        pub struct BS14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS13`"]
        pub struct BS13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS12`"]
        pub struct BS12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS11`"]
        pub struct BS11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS10`"]
        pub struct BS10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS9`"]
        pub struct BS9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS8`"]
        pub struct BS8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS7`"]
        pub struct BS7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS6`"]
        pub struct BS6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS5`"]
        pub struct BS5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS4`"]
        pub struct BS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS3`"]
        pub struct BS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS2`"]
        pub struct BS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS1`"]
        pub struct BS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `BS0`"]
        pub struct BS0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BS0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
            #[doc = "Bit 30 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 29 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 28 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 27 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 26 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 25 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 24 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 23 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 22 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 21 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 20 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 19 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 18 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 17 - Port x reset bit y (y = 0..15)"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 16 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 15 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs15(&mut self) -> BS15_W {
                BS15_W { w: self }
            }
            #[doc = "Bit 14 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs14(&mut self) -> BS14_W {
                BS14_W { w: self }
            }
            #[doc = "Bit 13 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs13(&mut self) -> BS13_W {
                BS13_W { w: self }
            }
            #[doc = "Bit 12 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs12(&mut self) -> BS12_W {
                BS12_W { w: self }
            }
            #[doc = "Bit 11 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs11(&mut self) -> BS11_W {
                BS11_W { w: self }
            }
            #[doc = "Bit 10 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs10(&mut self) -> BS10_W {
                BS10_W { w: self }
            }
            #[doc = "Bit 9 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs9(&mut self) -> BS9_W {
                BS9_W { w: self }
            }
            #[doc = "Bit 8 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs8(&mut self) -> BS8_W {
                BS8_W { w: self }
            }
            #[doc = "Bit 7 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs7(&mut self) -> BS7_W {
                BS7_W { w: self }
            }
            #[doc = "Bit 6 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs6(&mut self) -> BS6_W {
                BS6_W { w: self }
            }
            #[doc = "Bit 5 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs5(&mut self) -> BS5_W {
                BS5_W { w: self }
            }
            #[doc = "Bit 4 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs4(&mut self) -> BS4_W {
                BS4_W { w: self }
            }
            #[doc = "Bit 3 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs3(&mut self) -> BS3_W {
                BS3_W { w: self }
            }
            #[doc = "Bit 2 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs2(&mut self) -> BS2_W {
                BS2_W { w: self }
            }
            #[doc = "Bit 1 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs1(&mut self) -> BS1_W {
                BS1_W { w: self }
            }
            #[doc = "Bit 0 - Port x set bit y (y= 0..15)"]
            #[inline(always)]
            pub fn bs0(&mut self) -> BS0_W {
                BS0_W { w: self }
            }
        }
    }
    #[doc = "GPIO port configuration lock register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [lckr](lckr) module"]
    pub type LCKR = crate::Reg<u32, _LCKR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _LCKR;
    #[doc = "`read()` method returns [lckr::R](lckr::R) reader structure"]
    impl crate::Readable for LCKR {}
    #[doc = "`write(|w| ..)` method takes [lckr::W](lckr::W) writer structure"]
    impl crate::Writable for LCKR {}
    #[doc = "GPIO port configuration lock register"]
    pub mod lckr {
        #[doc = "Reader of register LCKR"]
        pub type R = crate::R<u32, super::LCKR>;
        #[doc = "Writer for register LCKR"]
        pub type W = crate::W<u32, super::LCKR>;
        #[doc = "Register LCKR `reset()`'s with value 0"]
        impl crate::ResetValue for super::LCKR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LCKK`"]
        pub type LCKK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCKK`"]
        pub struct LCKK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCKK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `LCK15`"]
        pub type LCK15_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK15`"]
        pub struct LCK15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `LCK14`"]
        pub type LCK14_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK14`"]
        pub struct LCK14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `LCK13`"]
        pub type LCK13_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK13`"]
        pub struct LCK13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `LCK12`"]
        pub type LCK12_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK12`"]
        pub struct LCK12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `LCK11`"]
        pub type LCK11_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK11`"]
        pub struct LCK11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `LCK10`"]
        pub type LCK10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK10`"]
        pub struct LCK10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `LCK9`"]
        pub type LCK9_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK9`"]
        pub struct LCK9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `LCK8`"]
        pub type LCK8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK8`"]
        pub struct LCK8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `LCK7`"]
        pub type LCK7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK7`"]
        pub struct LCK7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `LCK6`"]
        pub type LCK6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK6`"]
        pub struct LCK6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `LCK5`"]
        pub type LCK5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK5`"]
        pub struct LCK5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `LCK4`"]
        pub type LCK4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK4`"]
        pub struct LCK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `LCK3`"]
        pub type LCK3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK3`"]
        pub struct LCK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `LCK2`"]
        pub type LCK2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK2`"]
        pub struct LCK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `LCK1`"]
        pub type LCK1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK1`"]
        pub struct LCK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `LCK0`"]
        pub type LCK0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LCK0`"]
        pub struct LCK0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LCK0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&self) -> LCKK_R {
                LCKK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&self) -> LCK15_R {
                LCK15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&self) -> LCK14_R {
                LCK14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&self) -> LCK13_R {
                LCK13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&self) -> LCK12_R {
                LCK12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&self) -> LCK11_R {
                LCK11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&self) -> LCK10_R {
                LCK10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&self) -> LCK9_R {
                LCK9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&self) -> LCK8_R {
                LCK8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&self) -> LCK7_R {
                LCK7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&self) -> LCK6_R {
                LCK6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&self) -> LCK5_R {
                LCK5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&self) -> LCK4_R {
                LCK4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&self) -> LCK3_R {
                LCK3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&self) -> LCK2_R {
                LCK2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&self) -> LCK1_R {
                LCK1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&self) -> LCK0_R {
                LCK0_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 16 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lckk(&mut self) -> LCKK_W {
                LCKK_W { w: self }
            }
            #[doc = "Bit 15 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck15(&mut self) -> LCK15_W {
                LCK15_W { w: self }
            }
            #[doc = "Bit 14 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck14(&mut self) -> LCK14_W {
                LCK14_W { w: self }
            }
            #[doc = "Bit 13 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck13(&mut self) -> LCK13_W {
                LCK13_W { w: self }
            }
            #[doc = "Bit 12 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck12(&mut self) -> LCK12_W {
                LCK12_W { w: self }
            }
            #[doc = "Bit 11 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck11(&mut self) -> LCK11_W {
                LCK11_W { w: self }
            }
            #[doc = "Bit 10 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck10(&mut self) -> LCK10_W {
                LCK10_W { w: self }
            }
            #[doc = "Bit 9 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck9(&mut self) -> LCK9_W {
                LCK9_W { w: self }
            }
            #[doc = "Bit 8 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck8(&mut self) -> LCK8_W {
                LCK8_W { w: self }
            }
            #[doc = "Bit 7 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck7(&mut self) -> LCK7_W {
                LCK7_W { w: self }
            }
            #[doc = "Bit 6 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck6(&mut self) -> LCK6_W {
                LCK6_W { w: self }
            }
            #[doc = "Bit 5 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck5(&mut self) -> LCK5_W {
                LCK5_W { w: self }
            }
            #[doc = "Bit 4 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck4(&mut self) -> LCK4_W {
                LCK4_W { w: self }
            }
            #[doc = "Bit 3 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck3(&mut self) -> LCK3_W {
                LCK3_W { w: self }
            }
            #[doc = "Bit 2 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck2(&mut self) -> LCK2_W {
                LCK2_W { w: self }
            }
            #[doc = "Bit 1 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck1(&mut self) -> LCK1_W {
                LCK1_W { w: self }
            }
            #[doc = "Bit 0 - Port x lock bit y (y= 0..15)"]
            #[inline(always)]
            pub fn lck0(&mut self) -> LCK0_W {
                LCK0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function low register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrl](afrl) module"]
    pub type AFRL = crate::Reg<u32, _AFRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRL;
    #[doc = "`read()` method returns [afrl::R](afrl::R) reader structure"]
    impl crate::Readable for AFRL {}
    #[doc = "`write(|w| ..)` method takes [afrl::W](afrl::W) writer structure"]
    impl crate::Writable for AFRL {}
    #[doc = "GPIO alternate function low register"]
    pub mod afrl {
        #[doc = "Reader of register AFRL"]
        pub type R = crate::R<u32, super::AFRL>;
        #[doc = "Writer for register AFRL"]
        pub type W = crate::W<u32, super::AFRL>;
        #[doc = "Register AFRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AFSEL7`"]
        pub type AFSEL7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL7`"]
        pub struct AFSEL7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL6`"]
        pub type AFSEL6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL6`"]
        pub struct AFSEL6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL5`"]
        pub type AFSEL5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL5`"]
        pub struct AFSEL5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL4`"]
        pub type AFSEL4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL4`"]
        pub struct AFSEL4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL3`"]
        pub type AFSEL3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL3`"]
        pub struct AFSEL3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL2`"]
        pub type AFSEL2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL2`"]
        pub struct AFSEL2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL1`"]
        pub type AFSEL1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL1`"]
        pub struct AFSEL1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL0`"]
        pub type AFSEL0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL0`"]
        pub struct AFSEL0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel7(&self) -> AFSEL7_R {
                AFSEL7_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel6(&self) -> AFSEL6_R {
                AFSEL6_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel5(&self) -> AFSEL5_R {
                AFSEL5_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel4(&self) -> AFSEL4_R {
                AFSEL4_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel3(&self) -> AFSEL3_R {
                AFSEL3_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel2(&self) -> AFSEL2_R {
                AFSEL2_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel1(&self) -> AFSEL1_R {
                AFSEL1_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel0(&self) -> AFSEL0_R {
                AFSEL0_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel7(&mut self) -> AFSEL7_W {
                AFSEL7_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel6(&mut self) -> AFSEL6_W {
                AFSEL6_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel5(&mut self) -> AFSEL5_W {
                AFSEL5_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel4(&mut self) -> AFSEL4_W {
                AFSEL4_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel3(&mut self) -> AFSEL3_W {
                AFSEL3_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel2(&mut self) -> AFSEL2_W {
                AFSEL2_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel1(&mut self) -> AFSEL1_W {
                AFSEL1_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 0..7)"]
            #[inline(always)]
            pub fn afsel0(&mut self) -> AFSEL0_W {
                AFSEL0_W { w: self }
            }
        }
    }
    #[doc = "GPIO alternate function high register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [afrh](afrh) module"]
    pub type AFRH = crate::Reg<u32, _AFRH>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AFRH;
    #[doc = "`read()` method returns [afrh::R](afrh::R) reader structure"]
    impl crate::Readable for AFRH {}
    #[doc = "`write(|w| ..)` method takes [afrh::W](afrh::W) writer structure"]
    impl crate::Writable for AFRH {}
    #[doc = "GPIO alternate function high register"]
    pub mod afrh {
        #[doc = "Reader of register AFRH"]
        pub type R = crate::R<u32, super::AFRH>;
        #[doc = "Writer for register AFRH"]
        pub type W = crate::W<u32, super::AFRH>;
        #[doc = "Register AFRH `reset()`'s with value 0"]
        impl crate::ResetValue for super::AFRH {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AFSEL15`"]
        pub type AFSEL15_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL15`"]
        pub struct AFSEL15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL14`"]
        pub type AFSEL14_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL14`"]
        pub struct AFSEL14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL14_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL13`"]
        pub type AFSEL13_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL13`"]
        pub struct AFSEL13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL13_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL12`"]
        pub type AFSEL12_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL12`"]
        pub struct AFSEL12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL12_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL11`"]
        pub type AFSEL11_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL11`"]
        pub struct AFSEL11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL11_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL10`"]
        pub type AFSEL10_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL10`"]
        pub struct AFSEL10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL10_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL9`"]
        pub type AFSEL9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL9`"]
        pub struct AFSEL9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `AFSEL8`"]
        pub type AFSEL8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AFSEL8`"]
        pub struct AFSEL8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AFSEL8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel15(&self) -> AFSEL15_R {
                AFSEL15_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel14(&self) -> AFSEL14_R {
                AFSEL14_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel13(&self) -> AFSEL13_R {
                AFSEL13_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel12(&self) -> AFSEL12_R {
                AFSEL12_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel11(&self) -> AFSEL11_R {
                AFSEL11_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel10(&self) -> AFSEL10_R {
                AFSEL10_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel9(&self) -> AFSEL9_R {
                AFSEL9_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel8(&self) -> AFSEL8_R {
                AFSEL8_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel15(&mut self) -> AFSEL15_W {
                AFSEL15_W { w: self }
            }
            #[doc = "Bits 24:27 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel14(&mut self) -> AFSEL14_W {
                AFSEL14_W { w: self }
            }
            #[doc = "Bits 20:23 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel13(&mut self) -> AFSEL13_W {
                AFSEL13_W { w: self }
            }
            #[doc = "Bits 16:19 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel12(&mut self) -> AFSEL12_W {
                AFSEL12_W { w: self }
            }
            #[doc = "Bits 12:15 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel11(&mut self) -> AFSEL11_W {
                AFSEL11_W { w: self }
            }
            #[doc = "Bits 8:11 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel10(&mut self) -> AFSEL10_W {
                AFSEL10_W { w: self }
            }
            #[doc = "Bits 4:7 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel9(&mut self) -> AFSEL9_W {
                AFSEL9_W { w: self }
            }
            #[doc = "Bits 0:3 - Alternate function selection for port x bit y (y = 8..15)"]
            #[inline(always)]
            pub fn afsel8(&mut self) -> AFSEL8_W {
                AFSEL8_W { w: self }
            }
        }
    }
    #[doc = "port bit reset register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [brr](brr) module"]
    pub type BRR = crate::Reg<u32, _BRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BRR;
    #[doc = "`write(|w| ..)` method takes [brr::W](brr::W) writer structure"]
    impl crate::Writable for BRR {}
    #[doc = "port bit reset register"]
    pub mod brr {
        #[doc = "Writer for register BRR"]
        pub type W = crate::W<u32, super::BRR>;
        #[doc = "Register BRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `BR0`"]
        pub struct BR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR1`"]
        pub struct BR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR2`"]
        pub struct BR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR3`"]
        pub struct BR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR4`"]
        pub struct BR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR5`"]
        pub struct BR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR6`"]
        pub struct BR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR7`"]
        pub struct BR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR8`"]
        pub struct BR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR9`"]
        pub struct BR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR9_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR10`"]
        pub struct BR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR11`"]
        pub struct BR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR11_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR12`"]
        pub struct BR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR12_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR13`"]
        pub struct BR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR13_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR14`"]
        pub struct BR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR14_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Write proxy for field `BR15`"]
        pub struct BR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR15_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Port Reset bit"]
            #[inline(always)]
            pub fn br0(&mut self) -> BR0_W {
                BR0_W { w: self }
            }
            #[doc = "Bit 1 - Port Reset bit"]
            #[inline(always)]
            pub fn br1(&mut self) -> BR1_W {
                BR1_W { w: self }
            }
            #[doc = "Bit 2 - Port Reset bit"]
            #[inline(always)]
            pub fn br2(&mut self) -> BR2_W {
                BR2_W { w: self }
            }
            #[doc = "Bit 3 - Port Reset bit"]
            #[inline(always)]
            pub fn br3(&mut self) -> BR3_W {
                BR3_W { w: self }
            }
            #[doc = "Bit 4 - Port Reset bit"]
            #[inline(always)]
            pub fn br4(&mut self) -> BR4_W {
                BR4_W { w: self }
            }
            #[doc = "Bit 5 - Port Reset bit"]
            #[inline(always)]
            pub fn br5(&mut self) -> BR5_W {
                BR5_W { w: self }
            }
            #[doc = "Bit 6 - Port Reset bit"]
            #[inline(always)]
            pub fn br6(&mut self) -> BR6_W {
                BR6_W { w: self }
            }
            #[doc = "Bit 7 - Port Reset bit"]
            #[inline(always)]
            pub fn br7(&mut self) -> BR7_W {
                BR7_W { w: self }
            }
            #[doc = "Bit 8 - Port Reset bit"]
            #[inline(always)]
            pub fn br8(&mut self) -> BR8_W {
                BR8_W { w: self }
            }
            #[doc = "Bit 9 - Port Reset bit"]
            #[inline(always)]
            pub fn br9(&mut self) -> BR9_W {
                BR9_W { w: self }
            }
            #[doc = "Bit 10 - Port Reset bit"]
            #[inline(always)]
            pub fn br10(&mut self) -> BR10_W {
                BR10_W { w: self }
            }
            #[doc = "Bit 11 - Port Reset bit"]
            #[inline(always)]
            pub fn br11(&mut self) -> BR11_W {
                BR11_W { w: self }
            }
            #[doc = "Bit 12 - Port Reset bit"]
            #[inline(always)]
            pub fn br12(&mut self) -> BR12_W {
                BR12_W { w: self }
            }
            #[doc = "Bit 13 - Port Reset bit"]
            #[inline(always)]
            pub fn br13(&mut self) -> BR13_W {
                BR13_W { w: self }
            }
            #[doc = "Bit 14 - Port Reset bit"]
            #[inline(always)]
            pub fn br14(&mut self) -> BR14_W {
                BR14_W { w: self }
            }
            #[doc = "Bit 15 - Port Reset bit"]
            #[inline(always)]
            pub fn br15(&mut self) -> BR15_W {
                BR15_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOC {}
impl GPIOC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpiob::RegisterBlock {
        0x5000_0800 as *const _
    }
}
impl Deref for GPIOC {
    type Target = gpiob::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOC::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOD {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOD {}
impl GPIOD {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpiob::RegisterBlock {
        0x5000_0c00 as *const _
    }
}
impl Deref for GPIOD {
    type Target = gpiob::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOD::ptr() }
    }
}
#[doc = "General-purpose I/Os"]
pub struct GPIOF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIOF {}
impl GPIOF {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpiob::RegisterBlock {
        0x5000_1400 as *const _
    }
}
impl Deref for GPIOF {
    type Target = gpiob::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*GPIOF::ptr() }
    }
}
#[doc = "Cyclic redundancy check calculation unit"]
pub struct CRC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRC {}
impl CRC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        0x4002_3000 as *const _
    }
}
impl Deref for CRC {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*CRC::ptr() }
    }
}
#[doc = "Cyclic redundancy check calculation unit"]
pub mod crc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Data register"]
        pub dr: DR,
        #[doc = "0x04 - Independent data register"]
        pub idr: IDR,
        #[doc = "0x08 - Control register"]
        pub cr: CR,
        _reserved3: [u8; 4usize],
        #[doc = "0x10 - Initial CRC value"]
        pub init: INIT,
        #[doc = "0x14 - polynomial"]
        pub pol: POL,
    }
    #[doc = "Data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "Data register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `DR`"]
        pub type DR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `DR`"]
        pub struct DR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Data register bits"]
            #[inline(always)]
            pub fn dr(&self) -> DR_R {
                DR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Data register bits"]
            #[inline(always)]
            pub fn dr(&mut self) -> DR_W {
                DR_W { w: self }
            }
        }
    }
    #[doc = "Independent data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idr](idr) module"]
    pub type IDR = crate::Reg<u32, _IDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDR;
    #[doc = "`read()` method returns [idr::R](idr::R) reader structure"]
    impl crate::Readable for IDR {}
    #[doc = "`write(|w| ..)` method takes [idr::W](idr::W) writer structure"]
    impl crate::Writable for IDR {}
    #[doc = "Independent data register"]
    pub mod idr {
        #[doc = "Reader of register IDR"]
        pub type R = crate::R<u32, super::IDR>;
        #[doc = "Writer for register IDR"]
        pub type W = crate::W<u32, super::IDR>;
        #[doc = "Register IDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::IDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IDR`"]
        pub type IDR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `IDR`"]
        pub struct IDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - General-purpose 32-bit data register bits"]
            #[inline(always)]
            pub fn idr(&self) -> IDR_R {
                IDR_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - General-purpose 32-bit data register bits"]
            #[inline(always)]
            pub fn idr(&mut self) -> IDR_W {
                IDR_W { w: self }
            }
        }
    }
    #[doc = "Control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REV_OUT`"]
        pub type REV_OUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REV_OUT`"]
        pub struct REV_OUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REV_OUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `REV_IN`"]
        pub type REV_IN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `REV_IN`"]
        pub struct REV_IN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REV_IN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `POLYSIZE`"]
        pub type POLYSIZE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `POLYSIZE`"]
        pub struct POLYSIZE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POLYSIZE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `RESET`"]
        pub struct RESET_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RESET_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - Reverse output data"]
            #[inline(always)]
            pub fn rev_out(&self) -> REV_OUT_R {
                REV_OUT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - Reverse input data"]
            #[inline(always)]
            pub fn rev_in(&self) -> REV_IN_R {
                REV_IN_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bits 3:4 - Polynomial size"]
            #[inline(always)]
            pub fn polysize(&self) -> POLYSIZE_R {
                POLYSIZE_R::new(((self.bits >> 3) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 7 - Reverse output data"]
            #[inline(always)]
            pub fn rev_out(&mut self) -> REV_OUT_W {
                REV_OUT_W { w: self }
            }
            #[doc = "Bits 5:6 - Reverse input data"]
            #[inline(always)]
            pub fn rev_in(&mut self) -> REV_IN_W {
                REV_IN_W { w: self }
            }
            #[doc = "Bits 3:4 - Polynomial size"]
            #[inline(always)]
            pub fn polysize(&mut self) -> POLYSIZE_W {
                POLYSIZE_W { w: self }
            }
            #[doc = "Bit 0 - RESET bit"]
            #[inline(always)]
            pub fn reset(&mut self) -> RESET_W {
                RESET_W { w: self }
            }
        }
    }
    #[doc = "Initial CRC value\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [init](init) module"]
    pub type INIT = crate::Reg<u32, _INIT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _INIT;
    #[doc = "`read()` method returns [init::R](init::R) reader structure"]
    impl crate::Readable for INIT {}
    #[doc = "`write(|w| ..)` method takes [init::W](init::W) writer structure"]
    impl crate::Writable for INIT {}
    #[doc = "Initial CRC value"]
    pub mod init {
        #[doc = "Reader of register INIT"]
        pub type R = crate::R<u32, super::INIT>;
        #[doc = "Writer for register INIT"]
        pub type W = crate::W<u32, super::INIT>;
        #[doc = "Register INIT `reset()`'s with value 0xffff_ffff"]
        impl crate::ResetValue for super::INIT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_ffff
            }
        }
        #[doc = "Reader of field `CRC_INIT`"]
        pub type CRC_INIT_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CRC_INIT`"]
        pub struct CRC_INIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRC_INIT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Programmable initial CRC value"]
            #[inline(always)]
            pub fn crc_init(&self) -> CRC_INIT_R {
                CRC_INIT_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Programmable initial CRC value"]
            #[inline(always)]
            pub fn crc_init(&mut self) -> CRC_INIT_W {
                CRC_INIT_W { w: self }
            }
        }
    }
    #[doc = "polynomial\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pol](pol) module"]
    pub type POL = crate::Reg<u32, _POL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _POL;
    #[doc = "`read()` method returns [pol::R](pol::R) reader structure"]
    impl crate::Readable for POL {}
    #[doc = "`write(|w| ..)` method takes [pol::W](pol::W) writer structure"]
    impl crate::Writable for POL {}
    #[doc = "polynomial"]
    pub mod pol {
        #[doc = "Reader of register POL"]
        pub type R = crate::R<u32, super::POL>;
        #[doc = "Writer for register POL"]
        pub type W = crate::W<u32, super::POL>;
        #[doc = "Register POL `reset()`'s with value 0x04c1_1db7"]
        impl crate::ResetValue for super::POL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x04c1_1db7
            }
        }
        #[doc = "Reader of field `POL`"]
        pub type POL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `POL`"]
        pub struct POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - Programmable polynomial"]
            #[inline(always)]
            pub fn pol(&self) -> POL_R {
                POL_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Programmable polynomial"]
            #[inline(always)]
            pub fn pol(&mut self) -> POL_W {
                POL_W { w: self }
            }
        }
    }
}
#[doc = "External interrupt/event controller"]
pub struct EXTI {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EXTI {}
impl EXTI {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const exti::RegisterBlock {
        0x4002_1800 as *const _
    }
}
impl Deref for EXTI {
    type Target = exti::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*EXTI::ptr() }
    }
}
#[doc = "External interrupt/event controller"]
pub mod exti {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - EXTI rising trigger selection register"]
        pub rtsr1: RTSR1,
        #[doc = "0x04 - EXTI falling trigger selection register"]
        pub ftsr1: FTSR1,
        #[doc = "0x08 - EXTI software interrupt event register"]
        pub swier1: SWIER1,
        #[doc = "0x0c - EXTI rising edge pending register"]
        pub rpr1: RPR1,
        #[doc = "0x10 - EXTI falling edge pending register"]
        pub fpr1: FPR1,
        _reserved5: [u8; 76usize],
        #[doc = "0x60 - EXTI external interrupt selection register"]
        pub exticr1: EXTICR1,
        #[doc = "0x64 - EXTI external interrupt selection register"]
        pub exticr2: EXTICR2,
        #[doc = "0x68 - EXTI external interrupt selection register"]
        pub exticr3: EXTICR3,
        #[doc = "0x6c - EXTI external interrupt selection register"]
        pub exticr4: EXTICR4,
        _reserved9: [u8; 16usize],
        #[doc = "0x80 - EXTI CPU wakeup with interrupt mask register"]
        pub imr1: IMR1,
        #[doc = "0x84 - EXTI CPU wakeup with event mask register"]
        pub emr1: EMR1,
    }
    #[doc = "EXTI rising trigger selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtsr1](rtsr1) module"]
    pub type RTSR1 = crate::Reg<u32, _RTSR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTSR1;
    #[doc = "`read()` method returns [rtsr1::R](rtsr1::R) reader structure"]
    impl crate::Readable for RTSR1 {}
    #[doc = "`write(|w| ..)` method takes [rtsr1::W](rtsr1::W) writer structure"]
    impl crate::Writable for RTSR1 {}
    #[doc = "EXTI rising trigger selection register"]
    pub mod rtsr1 {
        #[doc = "Reader of register RTSR1"]
        pub type R = crate::R<u32, super::RTSR1>;
        #[doc = "Writer for register RTSR1"]
        pub type W = crate::W<u32, super::RTSR1>;
        #[doc = "Register RTSR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RTSR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TR0_A {
            #[doc = "0: Rising edge trigger is disabled"]
            DISABLED = 0,
            #[doc = "1: Rising edge trigger is enabled"]
            ENABLED = 1,
        }
        impl From<TR0_A> for bool {
            #[inline(always)]
            fn from(variant: TR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TR0`"]
        pub type TR0_R = crate::R<bool, TR0_A>;
        impl TR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TR0_A {
                match self.bits {
                    false => TR0_A::DISABLED,
                    true => TR0_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TR0_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TR0_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TR0`"]
        pub struct TR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR1_A = TR0_A;
        #[doc = "Reader of field `TR1`"]
        pub type TR1_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR1`"]
        pub struct TR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR2_A = TR0_A;
        #[doc = "Reader of field `TR2`"]
        pub type TR2_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR2`"]
        pub struct TR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR3_A = TR0_A;
        #[doc = "Reader of field `TR3`"]
        pub type TR3_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR3`"]
        pub struct TR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR4_A = TR0_A;
        #[doc = "Reader of field `TR4`"]
        pub type TR4_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR4`"]
        pub struct TR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR5_A = TR0_A;
        #[doc = "Reader of field `TR5`"]
        pub type TR5_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR5`"]
        pub struct TR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR6_A = TR0_A;
        #[doc = "Reader of field `TR6`"]
        pub type TR6_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR6`"]
        pub struct TR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR7_A = TR0_A;
        #[doc = "Reader of field `TR7`"]
        pub type TR7_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR7`"]
        pub struct TR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR8_A = TR0_A;
        #[doc = "Reader of field `TR8`"]
        pub type TR8_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR8`"]
        pub struct TR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR9_A = TR0_A;
        #[doc = "Reader of field `TR9`"]
        pub type TR9_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR9`"]
        pub struct TR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR10_A = TR0_A;
        #[doc = "Reader of field `TR10`"]
        pub type TR10_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR10`"]
        pub struct TR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR11_A = TR0_A;
        #[doc = "Reader of field `TR11`"]
        pub type TR11_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR11`"]
        pub struct TR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR12_A = TR0_A;
        #[doc = "Reader of field `TR12`"]
        pub type TR12_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR12`"]
        pub struct TR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR13_A = TR0_A;
        #[doc = "Reader of field `TR13`"]
        pub type TR13_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR13`"]
        pub struct TR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR14_A = TR0_A;
        #[doc = "Reader of field `TR14`"]
        pub type TR14_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR14`"]
        pub struct TR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR15_A = TR0_A;
        #[doc = "Reader of field `TR15`"]
        pub type TR15_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR15`"]
        pub struct TR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR16_A = TR0_A;
        #[doc = "Reader of field `TR16`"]
        pub type TR16_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR16`"]
        pub struct TR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Rising edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Rising edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr0(&self) -> TR0_R {
                TR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr1(&self) -> TR1_R {
                TR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr2(&self) -> TR2_R {
                TR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr3(&self) -> TR3_R {
                TR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr4(&self) -> TR4_R {
                TR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr5(&self) -> TR5_R {
                TR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr6(&self) -> TR6_R {
                TR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr7(&self) -> TR7_R {
                TR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr8(&self) -> TR8_R {
                TR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr9(&self) -> TR9_R {
                TR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr10(&self) -> TR10_R {
                TR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr11(&self) -> TR11_R {
                TR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr12(&self) -> TR12_R {
                TR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr13(&self) -> TR13_R {
                TR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr14(&self) -> TR14_R {
                TR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr15(&self) -> TR15_R {
                TR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr16(&self) -> TR16_R {
                TR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr0(&mut self) -> TR0_W {
                TR0_W { w: self }
            }
            #[doc = "Bit 1 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr1(&mut self) -> TR1_W {
                TR1_W { w: self }
            }
            #[doc = "Bit 2 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr2(&mut self) -> TR2_W {
                TR2_W { w: self }
            }
            #[doc = "Bit 3 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr3(&mut self) -> TR3_W {
                TR3_W { w: self }
            }
            #[doc = "Bit 4 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr4(&mut self) -> TR4_W {
                TR4_W { w: self }
            }
            #[doc = "Bit 5 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr5(&mut self) -> TR5_W {
                TR5_W { w: self }
            }
            #[doc = "Bit 6 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr6(&mut self) -> TR6_W {
                TR6_W { w: self }
            }
            #[doc = "Bit 7 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr7(&mut self) -> TR7_W {
                TR7_W { w: self }
            }
            #[doc = "Bit 8 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr8(&mut self) -> TR8_W {
                TR8_W { w: self }
            }
            #[doc = "Bit 9 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr9(&mut self) -> TR9_W {
                TR9_W { w: self }
            }
            #[doc = "Bit 10 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr10(&mut self) -> TR10_W {
                TR10_W { w: self }
            }
            #[doc = "Bit 11 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr11(&mut self) -> TR11_W {
                TR11_W { w: self }
            }
            #[doc = "Bit 12 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr12(&mut self) -> TR12_W {
                TR12_W { w: self }
            }
            #[doc = "Bit 13 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr13(&mut self) -> TR13_W {
                TR13_W { w: self }
            }
            #[doc = "Bit 14 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr14(&mut self) -> TR14_W {
                TR14_W { w: self }
            }
            #[doc = "Bit 15 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr15(&mut self) -> TR15_W {
                TR15_W { w: self }
            }
            #[doc = "Bit 16 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr16(&mut self) -> TR16_W {
                TR16_W { w: self }
            }
        }
    }
    #[doc = "EXTI falling trigger selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ftsr1](ftsr1) module"]
    pub type FTSR1 = crate::Reg<u32, _FTSR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FTSR1;
    #[doc = "`read()` method returns [ftsr1::R](ftsr1::R) reader structure"]
    impl crate::Readable for FTSR1 {}
    #[doc = "`write(|w| ..)` method takes [ftsr1::W](ftsr1::W) writer structure"]
    impl crate::Writable for FTSR1 {}
    #[doc = "EXTI falling trigger selection register"]
    pub mod ftsr1 {
        #[doc = "Reader of register FTSR1"]
        pub type R = crate::R<u32, super::FTSR1>;
        #[doc = "Writer for register FTSR1"]
        pub type W = crate::W<u32, super::FTSR1>;
        #[doc = "Register FTSR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::FTSR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum TR0_A {
            #[doc = "0: Falling edge trigger is disabled"]
            DISABLED = 0,
            #[doc = "1: Falling edge trigger is enabled"]
            ENABLED = 1,
        }
        impl From<TR0_A> for bool {
            #[inline(always)]
            fn from(variant: TR0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `TR0`"]
        pub type TR0_R = crate::R<bool, TR0_A>;
        impl TR0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> TR0_A {
                match self.bits {
                    false => TR0_A::DISABLED,
                    true => TR0_A::ENABLED,
                }
            }
            #[doc = "Checks if the value of the field is `DISABLED`"]
            #[inline(always)]
            pub fn is_disabled(&self) -> bool {
                *self == TR0_A::DISABLED
            }
            #[doc = "Checks if the value of the field is `ENABLED`"]
            #[inline(always)]
            pub fn is_enabled(&self) -> bool {
                *self == TR0_A::ENABLED
            }
        }
        #[doc = "Write proxy for field `TR0`"]
        pub struct TR0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR1_A = TR0_A;
        #[doc = "Reader of field `TR1`"]
        pub type TR1_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR1`"]
        pub struct TR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR2_A = TR0_A;
        #[doc = "Reader of field `TR2`"]
        pub type TR2_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR2`"]
        pub struct TR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR3_A = TR0_A;
        #[doc = "Reader of field `TR3`"]
        pub type TR3_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR3`"]
        pub struct TR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR4_A = TR0_A;
        #[doc = "Reader of field `TR4`"]
        pub type TR4_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR4`"]
        pub struct TR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR5_A = TR0_A;
        #[doc = "Reader of field `TR5`"]
        pub type TR5_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR5`"]
        pub struct TR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR6_A = TR0_A;
        #[doc = "Reader of field `TR6`"]
        pub type TR6_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR6`"]
        pub struct TR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR7_A = TR0_A;
        #[doc = "Reader of field `TR7`"]
        pub type TR7_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR7`"]
        pub struct TR7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR8_A = TR0_A;
        #[doc = "Reader of field `TR8`"]
        pub type TR8_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR8`"]
        pub struct TR8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR9_A = TR0_A;
        #[doc = "Reader of field `TR9`"]
        pub type TR9_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR9`"]
        pub struct TR9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR10_A = TR0_A;
        #[doc = "Reader of field `TR10`"]
        pub type TR10_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR10`"]
        pub struct TR10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR11_A = TR0_A;
        #[doc = "Reader of field `TR11`"]
        pub type TR11_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR11`"]
        pub struct TR11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR12_A = TR0_A;
        #[doc = "Reader of field `TR12`"]
        pub type TR12_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR12`"]
        pub struct TR12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR13_A = TR0_A;
        #[doc = "Reader of field `TR13`"]
        pub type TR13_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR13`"]
        pub struct TR13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR14_A = TR0_A;
        #[doc = "Reader of field `TR14`"]
        pub type TR14_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR14`"]
        pub struct TR14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR15_A = TR0_A;
        #[doc = "Reader of field `TR15`"]
        pub type TR15_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR15`"]
        pub struct TR15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type TR16_A = TR0_A;
        #[doc = "Reader of field `TR16`"]
        pub type TR16_R = crate::R<bool, TR0_A>;
        #[doc = "Write proxy for field `TR16`"]
        pub struct TR16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TR16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: TR16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Falling edge trigger is disabled"]
            #[inline(always)]
            pub fn disabled(self) -> &'a mut W {
                self.variant(TR0_A::DISABLED)
            }
            #[doc = "Falling edge trigger is enabled"]
            #[inline(always)]
            pub fn enabled(self) -> &'a mut W {
                self.variant(TR0_A::ENABLED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr0(&self) -> TR0_R {
                TR0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr1(&self) -> TR1_R {
                TR1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr2(&self) -> TR2_R {
                TR2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr3(&self) -> TR3_R {
                TR3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr4(&self) -> TR4_R {
                TR4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr5(&self) -> TR5_R {
                TR5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr6(&self) -> TR6_R {
                TR6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr7(&self) -> TR7_R {
                TR7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr8(&self) -> TR8_R {
                TR8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr9(&self) -> TR9_R {
                TR9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr10(&self) -> TR10_R {
                TR10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr11(&self) -> TR11_R {
                TR11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr12(&self) -> TR12_R {
                TR12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr13(&self) -> TR13_R {
                TR13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr14(&self) -> TR14_R {
                TR14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr15(&self) -> TR15_R {
                TR15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr16(&self) -> TR16_R {
                TR16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr0(&mut self) -> TR0_W {
                TR0_W { w: self }
            }
            #[doc = "Bit 1 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr1(&mut self) -> TR1_W {
                TR1_W { w: self }
            }
            #[doc = "Bit 2 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr2(&mut self) -> TR2_W {
                TR2_W { w: self }
            }
            #[doc = "Bit 3 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr3(&mut self) -> TR3_W {
                TR3_W { w: self }
            }
            #[doc = "Bit 4 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr4(&mut self) -> TR4_W {
                TR4_W { w: self }
            }
            #[doc = "Bit 5 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr5(&mut self) -> TR5_W {
                TR5_W { w: self }
            }
            #[doc = "Bit 6 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr6(&mut self) -> TR6_W {
                TR6_W { w: self }
            }
            #[doc = "Bit 7 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr7(&mut self) -> TR7_W {
                TR7_W { w: self }
            }
            #[doc = "Bit 8 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr8(&mut self) -> TR8_W {
                TR8_W { w: self }
            }
            #[doc = "Bit 9 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr9(&mut self) -> TR9_W {
                TR9_W { w: self }
            }
            #[doc = "Bit 10 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr10(&mut self) -> TR10_W {
                TR10_W { w: self }
            }
            #[doc = "Bit 11 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr11(&mut self) -> TR11_W {
                TR11_W { w: self }
            }
            #[doc = "Bit 12 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr12(&mut self) -> TR12_W {
                TR12_W { w: self }
            }
            #[doc = "Bit 13 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr13(&mut self) -> TR13_W {
                TR13_W { w: self }
            }
            #[doc = "Bit 14 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr14(&mut self) -> TR14_W {
                TR14_W { w: self }
            }
            #[doc = "Bit 15 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr15(&mut self) -> TR15_W {
                TR15_W { w: self }
            }
            #[doc = "Bit 16 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn tr16(&mut self) -> TR16_W {
                TR16_W { w: self }
            }
        }
    }
    #[doc = "EXTI software interrupt event register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [swier1](swier1) module"]
    pub type SWIER1 = crate::Reg<u32, _SWIER1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SWIER1;
    #[doc = "`read()` method returns [swier1::R](swier1::R) reader structure"]
    impl crate::Readable for SWIER1 {}
    #[doc = "`write(|w| ..)` method takes [swier1::W](swier1::W) writer structure"]
    impl crate::Writable for SWIER1 {}
    #[doc = "EXTI software interrupt event register"]
    pub mod swier1 {
        #[doc = "Reader of register SWIER1"]
        pub type R = crate::R<u32, super::SWIER1>;
        #[doc = "Writer for register SWIER1"]
        pub type W = crate::W<u32, super::SWIER1>;
        #[doc = "Register SWIER1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::SWIER1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum SWIER0_A {
            #[doc = "1: Generates an interrupt request"]
            PEND = 1,
        }
        impl From<SWIER0_A> for bool {
            #[inline(always)]
            fn from(variant: SWIER0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `SWIER0`"]
        pub type SWIER0_R = crate::R<bool, SWIER0_A>;
        impl SWIER0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<bool, SWIER0_A> {
                use crate::Variant::*;
                match self.bits {
                    true => Val(SWIER0_A::PEND),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PEND`"]
            #[inline(always)]
            pub fn is_pend(&self) -> bool {
                *self == SWIER0_A::PEND
            }
        }
        #[doc = "Write proxy for field `SWIER0`"]
        pub struct SWIER0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER1_A = SWIER0_A;
        #[doc = "Reader of field `SWIER1`"]
        pub type SWIER1_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER1`"]
        pub struct SWIER1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER2_A = SWIER0_A;
        #[doc = "Reader of field `SWIER2`"]
        pub type SWIER2_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER2`"]
        pub struct SWIER2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER3_A = SWIER0_A;
        #[doc = "Reader of field `SWIER3`"]
        pub type SWIER3_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER3`"]
        pub struct SWIER3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER4_A = SWIER0_A;
        #[doc = "Reader of field `SWIER4`"]
        pub type SWIER4_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER4`"]
        pub struct SWIER4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER5_A = SWIER0_A;
        #[doc = "Reader of field `SWIER5`"]
        pub type SWIER5_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER5`"]
        pub struct SWIER5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER6_A = SWIER0_A;
        #[doc = "Reader of field `SWIER6`"]
        pub type SWIER6_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER6`"]
        pub struct SWIER6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER7_A = SWIER0_A;
        #[doc = "Reader of field `SWIER7`"]
        pub type SWIER7_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER7`"]
        pub struct SWIER7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER8_A = SWIER0_A;
        #[doc = "Reader of field `SWIER8`"]
        pub type SWIER8_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER8`"]
        pub struct SWIER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER9_A = SWIER0_A;
        #[doc = "Reader of field `SWIER9`"]
        pub type SWIER9_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER9`"]
        pub struct SWIER9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER10_A = SWIER0_A;
        #[doc = "Reader of field `SWIER10`"]
        pub type SWIER10_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER10`"]
        pub struct SWIER10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER11_A = SWIER0_A;
        #[doc = "Reader of field `SWIER11`"]
        pub type SWIER11_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER11`"]
        pub struct SWIER11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER12_A = SWIER0_A;
        #[doc = "Reader of field `SWIER12`"]
        pub type SWIER12_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER12`"]
        pub struct SWIER12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER13_A = SWIER0_A;
        #[doc = "Reader of field `SWIER13`"]
        pub type SWIER13_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER13`"]
        pub struct SWIER13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER14_A = SWIER0_A;
        #[doc = "Reader of field `SWIER14`"]
        pub type SWIER14_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER14`"]
        pub struct SWIER14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER15_A = SWIER0_A;
        #[doc = "Reader of field `SWIER15`"]
        pub type SWIER15_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER15`"]
        pub struct SWIER15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Rising trigger event configuration bit of Configurable Event input"]
        pub type SWIER16_A = SWIER0_A;
        #[doc = "Reader of field `SWIER16`"]
        pub type SWIER16_R = crate::R<bool, SWIER0_A>;
        #[doc = "Write proxy for field `SWIER16`"]
        pub struct SWIER16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWIER16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: SWIER16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Generates an interrupt request"]
            #[inline(always)]
            pub fn pend(self) -> &'a mut W {
                self.variant(SWIER0_A::PEND)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier0(&self) -> SWIER0_R {
                SWIER0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier1(&self) -> SWIER1_R {
                SWIER1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier2(&self) -> SWIER2_R {
                SWIER2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier3(&self) -> SWIER3_R {
                SWIER3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier4(&self) -> SWIER4_R {
                SWIER4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier5(&self) -> SWIER5_R {
                SWIER5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier6(&self) -> SWIER6_R {
                SWIER6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier7(&self) -> SWIER7_R {
                SWIER7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier8(&self) -> SWIER8_R {
                SWIER8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier9(&self) -> SWIER9_R {
                SWIER9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier10(&self) -> SWIER10_R {
                SWIER10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier11(&self) -> SWIER11_R {
                SWIER11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier12(&self) -> SWIER12_R {
                SWIER12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier13(&self) -> SWIER13_R {
                SWIER13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier14(&self) -> SWIER14_R {
                SWIER14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier15(&self) -> SWIER15_R {
                SWIER15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier16(&self) -> SWIER16_R {
                SWIER16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier0(&mut self) -> SWIER0_W {
                SWIER0_W { w: self }
            }
            #[doc = "Bit 1 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier1(&mut self) -> SWIER1_W {
                SWIER1_W { w: self }
            }
            #[doc = "Bit 2 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier2(&mut self) -> SWIER2_W {
                SWIER2_W { w: self }
            }
            #[doc = "Bit 3 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier3(&mut self) -> SWIER3_W {
                SWIER3_W { w: self }
            }
            #[doc = "Bit 4 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier4(&mut self) -> SWIER4_W {
                SWIER4_W { w: self }
            }
            #[doc = "Bit 5 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier5(&mut self) -> SWIER5_W {
                SWIER5_W { w: self }
            }
            #[doc = "Bit 6 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier6(&mut self) -> SWIER6_W {
                SWIER6_W { w: self }
            }
            #[doc = "Bit 7 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier7(&mut self) -> SWIER7_W {
                SWIER7_W { w: self }
            }
            #[doc = "Bit 8 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier8(&mut self) -> SWIER8_W {
                SWIER8_W { w: self }
            }
            #[doc = "Bit 9 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier9(&mut self) -> SWIER9_W {
                SWIER9_W { w: self }
            }
            #[doc = "Bit 10 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier10(&mut self) -> SWIER10_W {
                SWIER10_W { w: self }
            }
            #[doc = "Bit 11 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier11(&mut self) -> SWIER11_W {
                SWIER11_W { w: self }
            }
            #[doc = "Bit 12 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier12(&mut self) -> SWIER12_W {
                SWIER12_W { w: self }
            }
            #[doc = "Bit 13 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier13(&mut self) -> SWIER13_W {
                SWIER13_W { w: self }
            }
            #[doc = "Bit 14 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier14(&mut self) -> SWIER14_W {
                SWIER14_W { w: self }
            }
            #[doc = "Bit 15 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier15(&mut self) -> SWIER15_W {
                SWIER15_W { w: self }
            }
            #[doc = "Bit 16 - Rising trigger event configuration bit of Configurable Event input"]
            #[inline(always)]
            pub fn swier16(&mut self) -> SWIER16_W {
                SWIER16_W { w: self }
            }
        }
    }
    #[doc = "EXTI rising edge pending register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rpr1](rpr1) module"]
    pub type RPR1 = crate::Reg<u32, _RPR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RPR1;
    #[doc = "`read()` method returns [rpr1::R](rpr1::R) reader structure"]
    impl crate::Readable for RPR1 {}
    #[doc = "`write(|w| ..)` method takes [rpr1::W](rpr1::W) writer structure"]
    impl crate::Writable for RPR1 {}
    #[doc = "EXTI rising edge pending register"]
    pub mod rpr1 {
        #[doc = "Reader of register RPR1"]
        pub type R = crate::R<u32, super::RPR1>;
        #[doc = "Writer for register RPR1"]
        pub type W = crate::W<u32, super::RPR1>;
        #[doc = "Register RPR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::RPR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RPIF0_A {
            #[doc = "0: No trigger request occurred"]
            NOTPENDING = 0,
            #[doc = "1: Selected trigger request occurred"]
            PENDING = 1,
        }
        impl From<RPIF0_A> for bool {
            #[inline(always)]
            fn from(variant: RPIF0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `RPIF0`"]
        pub type RPIF0_R = crate::R<bool, RPIF0_A>;
        impl RPIF0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> RPIF0_A {
                match self.bits {
                    false => RPIF0_A::NOTPENDING,
                    true => RPIF0_A::PENDING,
                }
            }
            #[doc = "Checks if the value of the field is `NOTPENDING`"]
            #[inline(always)]
            pub fn is_not_pending(&self) -> bool {
                *self == RPIF0_A::NOTPENDING
            }
            #[doc = "Checks if the value of the field is `PENDING`"]
            #[inline(always)]
            pub fn is_pending(&self) -> bool {
                *self == RPIF0_A::PENDING
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum RPIF0_AW {
            #[doc = "1: Clears pending bit"]
            CLEAR = 1,
        }
        impl From<RPIF0_AW> for bool {
            #[inline(always)]
            fn from(variant: RPIF0_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `RPIF0`"]
        pub struct RPIF0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF1_A = RPIF0_A;
        #[doc = "Reader of field `RPIF1`"]
        pub type RPIF1_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF1_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF1`"]
        pub struct RPIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF2_A = RPIF0_A;
        #[doc = "Reader of field `RPIF2`"]
        pub type RPIF2_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF2_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF2`"]
        pub struct RPIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF3_A = RPIF0_A;
        #[doc = "Reader of field `RPIF3`"]
        pub type RPIF3_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF3_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF3`"]
        pub struct RPIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF4_A = RPIF0_A;
        #[doc = "Reader of field `RPIF4`"]
        pub type RPIF4_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF4_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF4`"]
        pub struct RPIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit"]
        pub type RPIF5_A = RPIF0_A;
        #[doc = "Reader of field `RPIF5`"]
        pub type RPIF5_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit"]
        pub type RPIF5_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF5`"]
        pub struct RPIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF6_A = RPIF0_A;
        #[doc = "Reader of field `RPIF6`"]
        pub type RPIF6_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF6_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF6`"]
        pub struct RPIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF7_A = RPIF0_A;
        #[doc = "Reader of field `RPIF7`"]
        pub type RPIF7_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF7_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF7`"]
        pub struct RPIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF8_A = RPIF0_A;
        #[doc = "Reader of field `RPIF8`"]
        pub type RPIF8_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF8_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF8`"]
        pub struct RPIF8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF9_A = RPIF0_A;
        #[doc = "Reader of field `RPIF9`"]
        pub type RPIF9_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF9_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF9`"]
        pub struct RPIF9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF10_A = RPIF0_A;
        #[doc = "Reader of field `RPIF10`"]
        pub type RPIF10_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF10_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF10`"]
        pub struct RPIF10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF11_A = RPIF0_A;
        #[doc = "Reader of field `RPIF11`"]
        pub type RPIF11_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF11_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF11`"]
        pub struct RPIF11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF12_A = RPIF0_A;
        #[doc = "Reader of field `RPIF12`"]
        pub type RPIF12_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF12_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF12`"]
        pub struct RPIF12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF13_A = RPIF0_A;
        #[doc = "Reader of field `RPIF13`"]
        pub type RPIF13_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF13_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF13`"]
        pub struct RPIF13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF14_A = RPIF0_A;
        #[doc = "Reader of field `RPIF14`"]
        pub type RPIF14_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF14_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF14`"]
        pub struct RPIF14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF15_A = RPIF0_A;
        #[doc = "Reader of field `RPIF15`"]
        pub type RPIF15_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF15_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF15`"]
        pub struct RPIF15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF16_A = RPIF0_A;
        #[doc = "Reader of field `RPIF16`"]
        pub type RPIF16_R = crate::R<bool, RPIF0_A>;
        #[doc = "configurable event inputs x rising edge Pending bit."]
        pub type RPIF16_AW = RPIF0_AW;
        #[doc = "Write proxy for field `RPIF16`"]
        pub struct RPIF16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RPIF16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: RPIF16_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(RPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif0(&self) -> RPIF0_R {
                RPIF0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif1(&self) -> RPIF1_R {
                RPIF1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif2(&self) -> RPIF2_R {
                RPIF2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif3(&self) -> RPIF3_R {
                RPIF3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif4(&self) -> RPIF4_R {
                RPIF4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - configurable event inputs x rising edge Pending bit"]
            #[inline(always)]
            pub fn rpif5(&self) -> RPIF5_R {
                RPIF5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif6(&self) -> RPIF6_R {
                RPIF6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif7(&self) -> RPIF7_R {
                RPIF7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif8(&self) -> RPIF8_R {
                RPIF8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif9(&self) -> RPIF9_R {
                RPIF9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif10(&self) -> RPIF10_R {
                RPIF10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif11(&self) -> RPIF11_R {
                RPIF11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif12(&self) -> RPIF12_R {
                RPIF12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif13(&self) -> RPIF13_R {
                RPIF13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif14(&self) -> RPIF14_R {
                RPIF14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif15(&self) -> RPIF15_R {
                RPIF15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif16(&self) -> RPIF16_R {
                RPIF16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif0(&mut self) -> RPIF0_W {
                RPIF0_W { w: self }
            }
            #[doc = "Bit 1 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif1(&mut self) -> RPIF1_W {
                RPIF1_W { w: self }
            }
            #[doc = "Bit 2 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif2(&mut self) -> RPIF2_W {
                RPIF2_W { w: self }
            }
            #[doc = "Bit 3 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif3(&mut self) -> RPIF3_W {
                RPIF3_W { w: self }
            }
            #[doc = "Bit 4 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif4(&mut self) -> RPIF4_W {
                RPIF4_W { w: self }
            }
            #[doc = "Bit 5 - configurable event inputs x rising edge Pending bit"]
            #[inline(always)]
            pub fn rpif5(&mut self) -> RPIF5_W {
                RPIF5_W { w: self }
            }
            #[doc = "Bit 6 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif6(&mut self) -> RPIF6_W {
                RPIF6_W { w: self }
            }
            #[doc = "Bit 7 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif7(&mut self) -> RPIF7_W {
                RPIF7_W { w: self }
            }
            #[doc = "Bit 8 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif8(&mut self) -> RPIF8_W {
                RPIF8_W { w: self }
            }
            #[doc = "Bit 9 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif9(&mut self) -> RPIF9_W {
                RPIF9_W { w: self }
            }
            #[doc = "Bit 10 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif10(&mut self) -> RPIF10_W {
                RPIF10_W { w: self }
            }
            #[doc = "Bit 11 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif11(&mut self) -> RPIF11_W {
                RPIF11_W { w: self }
            }
            #[doc = "Bit 12 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif12(&mut self) -> RPIF12_W {
                RPIF12_W { w: self }
            }
            #[doc = "Bit 13 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif13(&mut self) -> RPIF13_W {
                RPIF13_W { w: self }
            }
            #[doc = "Bit 14 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif14(&mut self) -> RPIF14_W {
                RPIF14_W { w: self }
            }
            #[doc = "Bit 15 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif15(&mut self) -> RPIF15_W {
                RPIF15_W { w: self }
            }
            #[doc = "Bit 16 - configurable event inputs x rising edge Pending bit."]
            #[inline(always)]
            pub fn rpif16(&mut self) -> RPIF16_W {
                RPIF16_W { w: self }
            }
        }
    }
    #[doc = "EXTI falling edge pending register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fpr1](fpr1) module"]
    pub type FPR1 = crate::Reg<u32, _FPR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FPR1;
    #[doc = "`read()` method returns [fpr1::R](fpr1::R) reader structure"]
    impl crate::Readable for FPR1 {}
    #[doc = "`write(|w| ..)` method takes [fpr1::W](fpr1::W) writer structure"]
    impl crate::Writable for FPR1 {}
    #[doc = "EXTI falling edge pending register"]
    pub mod fpr1 {
        #[doc = "Reader of register FPR1"]
        pub type R = crate::R<u32, super::FPR1>;
        #[doc = "Writer for register FPR1"]
        pub type W = crate::W<u32, super::FPR1>;
        #[doc = "Register FPR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::FPR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FPIF0_A {
            #[doc = "0: No trigger request occurred"]
            NOTPENDING = 0,
            #[doc = "1: Selected trigger request occurred"]
            PENDING = 1,
        }
        impl From<FPIF0_A> for bool {
            #[inline(always)]
            fn from(variant: FPIF0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `FPIF0`"]
        pub type FPIF0_R = crate::R<bool, FPIF0_A>;
        impl FPIF0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> FPIF0_A {
                match self.bits {
                    false => FPIF0_A::NOTPENDING,
                    true => FPIF0_A::PENDING,
                }
            }
            #[doc = "Checks if the value of the field is `NOTPENDING`"]
            #[inline(always)]
            pub fn is_not_pending(&self) -> bool {
                *self == FPIF0_A::NOTPENDING
            }
            #[doc = "Checks if the value of the field is `PENDING`"]
            #[inline(always)]
            pub fn is_pending(&self) -> bool {
                *self == FPIF0_A::PENDING
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit.\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum FPIF0_AW {
            #[doc = "1: Clears pending bit"]
            CLEAR = 1,
        }
        impl From<FPIF0_AW> for bool {
            #[inline(always)]
            fn from(variant: FPIF0_AW) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Write proxy for field `FPIF0`"]
        pub struct FPIF0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF0_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF1_A = FPIF0_A;
        #[doc = "Reader of field `FPIF1`"]
        pub type FPIF1_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF1_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF1`"]
        pub struct FPIF1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF1_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF2_A = FPIF0_A;
        #[doc = "Reader of field `FPIF2`"]
        pub type FPIF2_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF2_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF2`"]
        pub struct FPIF2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF2_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF3_A = FPIF0_A;
        #[doc = "Reader of field `FPIF3`"]
        pub type FPIF3_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF3_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF3`"]
        pub struct FPIF3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF3_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF4_A = FPIF0_A;
        #[doc = "Reader of field `FPIF4`"]
        pub type FPIF4_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF4_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF4`"]
        pub struct FPIF4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF4_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF5_A = FPIF0_A;
        #[doc = "Reader of field `FPIF5`"]
        pub type FPIF5_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF5_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF5`"]
        pub struct FPIF5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF5_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF6_A = FPIF0_A;
        #[doc = "Reader of field `FPIF6`"]
        pub type FPIF6_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF6_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF6`"]
        pub struct FPIF6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF6_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF7_A = FPIF0_A;
        #[doc = "Reader of field `FPIF7`"]
        pub type FPIF7_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF7_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF7`"]
        pub struct FPIF7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF7_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF8_A = FPIF0_A;
        #[doc = "Reader of field `FPIF8`"]
        pub type FPIF8_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF8_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF8`"]
        pub struct FPIF8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF8_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF9_A = FPIF0_A;
        #[doc = "Reader of field `FPIF9`"]
        pub type FPIF9_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF9_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF9`"]
        pub struct FPIF9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF9_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF10_A = FPIF0_A;
        #[doc = "Reader of field `FPIF10`"]
        pub type FPIF10_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF10_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF10`"]
        pub struct FPIF10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF10_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF11_A = FPIF0_A;
        #[doc = "Reader of field `FPIF11`"]
        pub type FPIF11_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF11_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF11`"]
        pub struct FPIF11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF11_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF12_A = FPIF0_A;
        #[doc = "Reader of field `FPIF12`"]
        pub type FPIF12_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF12_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF12`"]
        pub struct FPIF12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF12_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF13_A = FPIF0_A;
        #[doc = "Reader of field `FPIF13`"]
        pub type FPIF13_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF13_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF13`"]
        pub struct FPIF13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF13_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF14_A = FPIF0_A;
        #[doc = "Reader of field `FPIF14`"]
        pub type FPIF14_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF14_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF14`"]
        pub struct FPIF14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF14_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF15_A = FPIF0_A;
        #[doc = "Reader of field `FPIF15`"]
        pub type FPIF15_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF15_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF15`"]
        pub struct FPIF15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF15_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF16_A = FPIF0_A;
        #[doc = "Reader of field `FPIF16`"]
        pub type FPIF16_R = crate::R<bool, FPIF0_A>;
        #[doc = "configurable event inputs x falling edge pending bit."]
        pub type FPIF16_AW = FPIF0_AW;
        #[doc = "Write proxy for field `FPIF16`"]
        pub struct FPIF16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FPIF16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: FPIF16_AW) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Clears pending bit"]
            #[inline(always)]
            pub fn clear(self) -> &'a mut W {
                self.variant(FPIF0_AW::CLEAR)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif0(&self) -> FPIF0_R {
                FPIF0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif1(&self) -> FPIF1_R {
                FPIF1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif2(&self) -> FPIF2_R {
                FPIF2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif3(&self) -> FPIF3_R {
                FPIF3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif4(&self) -> FPIF4_R {
                FPIF4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif5(&self) -> FPIF5_R {
                FPIF5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif6(&self) -> FPIF6_R {
                FPIF6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif7(&self) -> FPIF7_R {
                FPIF7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif8(&self) -> FPIF8_R {
                FPIF8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif9(&self) -> FPIF9_R {
                FPIF9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif10(&self) -> FPIF10_R {
                FPIF10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif11(&self) -> FPIF11_R {
                FPIF11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif12(&self) -> FPIF12_R {
                FPIF12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif13(&self) -> FPIF13_R {
                FPIF13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif14(&self) -> FPIF14_R {
                FPIF14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif15(&self) -> FPIF15_R {
                FPIF15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif16(&self) -> FPIF16_R {
                FPIF16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif0(&mut self) -> FPIF0_W {
                FPIF0_W { w: self }
            }
            #[doc = "Bit 1 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif1(&mut self) -> FPIF1_W {
                FPIF1_W { w: self }
            }
            #[doc = "Bit 2 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif2(&mut self) -> FPIF2_W {
                FPIF2_W { w: self }
            }
            #[doc = "Bit 3 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif3(&mut self) -> FPIF3_W {
                FPIF3_W { w: self }
            }
            #[doc = "Bit 4 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif4(&mut self) -> FPIF4_W {
                FPIF4_W { w: self }
            }
            #[doc = "Bit 5 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif5(&mut self) -> FPIF5_W {
                FPIF5_W { w: self }
            }
            #[doc = "Bit 6 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif6(&mut self) -> FPIF6_W {
                FPIF6_W { w: self }
            }
            #[doc = "Bit 7 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif7(&mut self) -> FPIF7_W {
                FPIF7_W { w: self }
            }
            #[doc = "Bit 8 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif8(&mut self) -> FPIF8_W {
                FPIF8_W { w: self }
            }
            #[doc = "Bit 9 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif9(&mut self) -> FPIF9_W {
                FPIF9_W { w: self }
            }
            #[doc = "Bit 10 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif10(&mut self) -> FPIF10_W {
                FPIF10_W { w: self }
            }
            #[doc = "Bit 11 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif11(&mut self) -> FPIF11_W {
                FPIF11_W { w: self }
            }
            #[doc = "Bit 12 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif12(&mut self) -> FPIF12_W {
                FPIF12_W { w: self }
            }
            #[doc = "Bit 13 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif13(&mut self) -> FPIF13_W {
                FPIF13_W { w: self }
            }
            #[doc = "Bit 14 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif14(&mut self) -> FPIF14_W {
                FPIF14_W { w: self }
            }
            #[doc = "Bit 15 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif15(&mut self) -> FPIF15_W {
                FPIF15_W { w: self }
            }
            #[doc = "Bit 16 - configurable event inputs x falling edge pending bit."]
            #[inline(always)]
            pub fn fpif16(&mut self) -> FPIF16_W {
                FPIF16_W { w: self }
            }
        }
    }
    #[doc = "EXTI external interrupt selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr1](exticr1) module"]
    pub type EXTICR1 = crate::Reg<u32, _EXTICR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR1;
    #[doc = "`read()` method returns [exticr1::R](exticr1::R) reader structure"]
    impl crate::Readable for EXTICR1 {}
    #[doc = "`write(|w| ..)` method takes [exticr1::W](exticr1::W) writer structure"]
    impl crate::Writable for EXTICR1 {}
    #[doc = "EXTI external interrupt selection register"]
    pub mod exticr1 {
        #[doc = "Reader of register EXTICR1"]
        pub type R = crate::R<u32, super::EXTICR1>;
        #[doc = "Writer for register EXTICR1"]
        pub type W = crate::W<u32, super::EXTICR1>;
        #[doc = "Register EXTICR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "GPIO port selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI0_7_A {
            #[doc = "0: GPIO port A selected"]
            PA = 0,
            #[doc = "1: GPIO port B selected"]
            PB = 1,
            #[doc = "2: GPIO port C selected"]
            PC = 2,
            #[doc = "3: GPIO port D selected"]
            PD = 3,
            #[doc = "5: GPIO port F selected"]
            PF = 5,
        }
        impl From<EXTI0_7_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI0_7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI0_7`"]
        pub type EXTI0_7_R = crate::R<u8, EXTI0_7_A>;
        impl EXTI0_7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI0_7_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI0_7_A::PA),
                    1 => Val(EXTI0_7_A::PB),
                    2 => Val(EXTI0_7_A::PC),
                    3 => Val(EXTI0_7_A::PD),
                    5 => Val(EXTI0_7_A::PF),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA`"]
            #[inline(always)]
            pub fn is_pa(&self) -> bool {
                *self == EXTI0_7_A::PA
            }
            #[doc = "Checks if the value of the field is `PB`"]
            #[inline(always)]
            pub fn is_pb(&self) -> bool {
                *self == EXTI0_7_A::PB
            }
            #[doc = "Checks if the value of the field is `PC`"]
            #[inline(always)]
            pub fn is_pc(&self) -> bool {
                *self == EXTI0_7_A::PC
            }
            #[doc = "Checks if the value of the field is `PD`"]
            #[inline(always)]
            pub fn is_pd(&self) -> bool {
                *self == EXTI0_7_A::PD
            }
            #[doc = "Checks if the value of the field is `PF`"]
            #[inline(always)]
            pub fn is_pf(&self) -> bool {
                *self == EXTI0_7_A::PF
            }
        }
        #[doc = "Write proxy for field `EXTI0_7`"]
        pub struct EXTI0_7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI0_7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI0_7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI8_15_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI8_15`"]
        pub type EXTI8_15_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI8_15`"]
        pub struct EXTI8_15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI8_15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI8_15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI16_23_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI16_23`"]
        pub type EXTI16_23_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI16_23`"]
        pub struct EXTI16_23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI16_23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI16_23_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | (((value as u32) & 0xff) << 16);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI24_31_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI24_31`"]
        pub type EXTI24_31_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI24_31`"]
        pub struct EXTI24_31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI24_31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI24_31_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - GPIO port selection"]
            #[inline(always)]
            pub fn exti0_7(&self) -> EXTI0_7_R {
                EXTI0_7_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - GPIO port selection"]
            #[inline(always)]
            pub fn exti8_15(&self) -> EXTI8_15_R {
                EXTI8_15_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - GPIO port selection"]
            #[inline(always)]
            pub fn exti16_23(&self) -> EXTI16_23_R {
                EXTI16_23_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - GPIO port selection"]
            #[inline(always)]
            pub fn exti24_31(&self) -> EXTI24_31_R {
                EXTI24_31_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - GPIO port selection"]
            #[inline(always)]
            pub fn exti0_7(&mut self) -> EXTI0_7_W {
                EXTI0_7_W { w: self }
            }
            #[doc = "Bits 8:15 - GPIO port selection"]
            #[inline(always)]
            pub fn exti8_15(&mut self) -> EXTI8_15_W {
                EXTI8_15_W { w: self }
            }
            #[doc = "Bits 16:23 - GPIO port selection"]
            #[inline(always)]
            pub fn exti16_23(&mut self) -> EXTI16_23_W {
                EXTI16_23_W { w: self }
            }
            #[doc = "Bits 24:31 - GPIO port selection"]
            #[inline(always)]
            pub fn exti24_31(&mut self) -> EXTI24_31_W {
                EXTI24_31_W { w: self }
            }
        }
    }
    #[doc = "EXTI external interrupt selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr2](exticr2) module"]
    pub type EXTICR2 = crate::Reg<u32, _EXTICR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR2;
    #[doc = "`read()` method returns [exticr2::R](exticr2::R) reader structure"]
    impl crate::Readable for EXTICR2 {}
    #[doc = "`write(|w| ..)` method takes [exticr2::W](exticr2::W) writer structure"]
    impl crate::Writable for EXTICR2 {}
    #[doc = "EXTI external interrupt selection register"]
    pub mod exticr2 {
        #[doc = "Reader of register EXTICR2"]
        pub type R = crate::R<u32, super::EXTICR2>;
        #[doc = "Writer for register EXTICR2"]
        pub type W = crate::W<u32, super::EXTICR2>;
        #[doc = "Register EXTICR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "GPIO port selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI0_7_A {
            #[doc = "0: GPIO port A selected"]
            PA = 0,
            #[doc = "1: GPIO port B selected"]
            PB = 1,
            #[doc = "2: GPIO port C selected"]
            PC = 2,
            #[doc = "3: GPIO port D selected"]
            PD = 3,
            #[doc = "5: GPIO port F selected"]
            PF = 5,
        }
        impl From<EXTI0_7_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI0_7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI0_7`"]
        pub type EXTI0_7_R = crate::R<u8, EXTI0_7_A>;
        impl EXTI0_7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI0_7_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI0_7_A::PA),
                    1 => Val(EXTI0_7_A::PB),
                    2 => Val(EXTI0_7_A::PC),
                    3 => Val(EXTI0_7_A::PD),
                    5 => Val(EXTI0_7_A::PF),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA`"]
            #[inline(always)]
            pub fn is_pa(&self) -> bool {
                *self == EXTI0_7_A::PA
            }
            #[doc = "Checks if the value of the field is `PB`"]
            #[inline(always)]
            pub fn is_pb(&self) -> bool {
                *self == EXTI0_7_A::PB
            }
            #[doc = "Checks if the value of the field is `PC`"]
            #[inline(always)]
            pub fn is_pc(&self) -> bool {
                *self == EXTI0_7_A::PC
            }
            #[doc = "Checks if the value of the field is `PD`"]
            #[inline(always)]
            pub fn is_pd(&self) -> bool {
                *self == EXTI0_7_A::PD
            }
            #[doc = "Checks if the value of the field is `PF`"]
            #[inline(always)]
            pub fn is_pf(&self) -> bool {
                *self == EXTI0_7_A::PF
            }
        }
        #[doc = "Write proxy for field `EXTI0_7`"]
        pub struct EXTI0_7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI0_7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI0_7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI8_15_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI8_15`"]
        pub type EXTI8_15_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI8_15`"]
        pub struct EXTI8_15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI8_15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI8_15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI16_23_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI16_23`"]
        pub type EXTI16_23_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI16_23`"]
        pub struct EXTI16_23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI16_23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI16_23_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | (((value as u32) & 0xff) << 16);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI24_31_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI24_31`"]
        pub type EXTI24_31_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI24_31`"]
        pub struct EXTI24_31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI24_31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI24_31_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - GPIO port selection"]
            #[inline(always)]
            pub fn exti0_7(&self) -> EXTI0_7_R {
                EXTI0_7_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - GPIO port selection"]
            #[inline(always)]
            pub fn exti8_15(&self) -> EXTI8_15_R {
                EXTI8_15_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - GPIO port selection"]
            #[inline(always)]
            pub fn exti16_23(&self) -> EXTI16_23_R {
                EXTI16_23_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - GPIO port selection"]
            #[inline(always)]
            pub fn exti24_31(&self) -> EXTI24_31_R {
                EXTI24_31_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - GPIO port selection"]
            #[inline(always)]
            pub fn exti0_7(&mut self) -> EXTI0_7_W {
                EXTI0_7_W { w: self }
            }
            #[doc = "Bits 8:15 - GPIO port selection"]
            #[inline(always)]
            pub fn exti8_15(&mut self) -> EXTI8_15_W {
                EXTI8_15_W { w: self }
            }
            #[doc = "Bits 16:23 - GPIO port selection"]
            #[inline(always)]
            pub fn exti16_23(&mut self) -> EXTI16_23_W {
                EXTI16_23_W { w: self }
            }
            #[doc = "Bits 24:31 - GPIO port selection"]
            #[inline(always)]
            pub fn exti24_31(&mut self) -> EXTI24_31_W {
                EXTI24_31_W { w: self }
            }
        }
    }
    #[doc = "EXTI external interrupt selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr3](exticr3) module"]
    pub type EXTICR3 = crate::Reg<u32, _EXTICR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR3;
    #[doc = "`read()` method returns [exticr3::R](exticr3::R) reader structure"]
    impl crate::Readable for EXTICR3 {}
    #[doc = "`write(|w| ..)` method takes [exticr3::W](exticr3::W) writer structure"]
    impl crate::Writable for EXTICR3 {}
    #[doc = "EXTI external interrupt selection register"]
    pub mod exticr3 {
        #[doc = "Reader of register EXTICR3"]
        pub type R = crate::R<u32, super::EXTICR3>;
        #[doc = "Writer for register EXTICR3"]
        pub type W = crate::W<u32, super::EXTICR3>;
        #[doc = "Register EXTICR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "GPIO port selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI0_7_A {
            #[doc = "0: GPIO port A selected"]
            PA = 0,
            #[doc = "1: GPIO port B selected"]
            PB = 1,
            #[doc = "2: GPIO port C selected"]
            PC = 2,
            #[doc = "3: GPIO port D selected"]
            PD = 3,
            #[doc = "5: GPIO port F selected"]
            PF = 5,
        }
        impl From<EXTI0_7_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI0_7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI0_7`"]
        pub type EXTI0_7_R = crate::R<u8, EXTI0_7_A>;
        impl EXTI0_7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI0_7_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI0_7_A::PA),
                    1 => Val(EXTI0_7_A::PB),
                    2 => Val(EXTI0_7_A::PC),
                    3 => Val(EXTI0_7_A::PD),
                    5 => Val(EXTI0_7_A::PF),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA`"]
            #[inline(always)]
            pub fn is_pa(&self) -> bool {
                *self == EXTI0_7_A::PA
            }
            #[doc = "Checks if the value of the field is `PB`"]
            #[inline(always)]
            pub fn is_pb(&self) -> bool {
                *self == EXTI0_7_A::PB
            }
            #[doc = "Checks if the value of the field is `PC`"]
            #[inline(always)]
            pub fn is_pc(&self) -> bool {
                *self == EXTI0_7_A::PC
            }
            #[doc = "Checks if the value of the field is `PD`"]
            #[inline(always)]
            pub fn is_pd(&self) -> bool {
                *self == EXTI0_7_A::PD
            }
            #[doc = "Checks if the value of the field is `PF`"]
            #[inline(always)]
            pub fn is_pf(&self) -> bool {
                *self == EXTI0_7_A::PF
            }
        }
        #[doc = "Write proxy for field `EXTI0_7`"]
        pub struct EXTI0_7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI0_7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI0_7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI8_15_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI8_15`"]
        pub type EXTI8_15_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI8_15`"]
        pub struct EXTI8_15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI8_15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI8_15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI16_23_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI16_23`"]
        pub type EXTI16_23_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI16_23`"]
        pub struct EXTI16_23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI16_23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI16_23_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | (((value as u32) & 0xff) << 16);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI24_31_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI24_31`"]
        pub type EXTI24_31_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI24_31`"]
        pub struct EXTI24_31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI24_31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI24_31_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - GPIO port selection"]
            #[inline(always)]
            pub fn exti0_7(&self) -> EXTI0_7_R {
                EXTI0_7_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - GPIO port selection"]
            #[inline(always)]
            pub fn exti8_15(&self) -> EXTI8_15_R {
                EXTI8_15_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - GPIO port selection"]
            #[inline(always)]
            pub fn exti16_23(&self) -> EXTI16_23_R {
                EXTI16_23_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - GPIO port selection"]
            #[inline(always)]
            pub fn exti24_31(&self) -> EXTI24_31_R {
                EXTI24_31_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - GPIO port selection"]
            #[inline(always)]
            pub fn exti0_7(&mut self) -> EXTI0_7_W {
                EXTI0_7_W { w: self }
            }
            #[doc = "Bits 8:15 - GPIO port selection"]
            #[inline(always)]
            pub fn exti8_15(&mut self) -> EXTI8_15_W {
                EXTI8_15_W { w: self }
            }
            #[doc = "Bits 16:23 - GPIO port selection"]
            #[inline(always)]
            pub fn exti16_23(&mut self) -> EXTI16_23_W {
                EXTI16_23_W { w: self }
            }
            #[doc = "Bits 24:31 - GPIO port selection"]
            #[inline(always)]
            pub fn exti24_31(&mut self) -> EXTI24_31_W {
                EXTI24_31_W { w: self }
            }
        }
    }
    #[doc = "EXTI external interrupt selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [exticr4](exticr4) module"]
    pub type EXTICR4 = crate::Reg<u32, _EXTICR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EXTICR4;
    #[doc = "`read()` method returns [exticr4::R](exticr4::R) reader structure"]
    impl crate::Readable for EXTICR4 {}
    #[doc = "`write(|w| ..)` method takes [exticr4::W](exticr4::W) writer structure"]
    impl crate::Writable for EXTICR4 {}
    #[doc = "EXTI external interrupt selection register"]
    pub mod exticr4 {
        #[doc = "Reader of register EXTICR4"]
        pub type R = crate::R<u32, super::EXTICR4>;
        #[doc = "Writer for register EXTICR4"]
        pub type W = crate::W<u32, super::EXTICR4>;
        #[doc = "Register EXTICR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EXTICR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "GPIO port selection\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        #[repr(u8)]
        pub enum EXTI0_7_A {
            #[doc = "0: GPIO port A selected"]
            PA = 0,
            #[doc = "1: GPIO port B selected"]
            PB = 1,
            #[doc = "2: GPIO port C selected"]
            PC = 2,
            #[doc = "3: GPIO port D selected"]
            PD = 3,
            #[doc = "5: GPIO port F selected"]
            PF = 5,
        }
        impl From<EXTI0_7_A> for u8 {
            #[inline(always)]
            fn from(variant: EXTI0_7_A) -> Self {
                variant as _
            }
        }
        #[doc = "Reader of field `EXTI0_7`"]
        pub type EXTI0_7_R = crate::R<u8, EXTI0_7_A>;
        impl EXTI0_7_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> crate::Variant<u8, EXTI0_7_A> {
                use crate::Variant::*;
                match self.bits {
                    0 => Val(EXTI0_7_A::PA),
                    1 => Val(EXTI0_7_A::PB),
                    2 => Val(EXTI0_7_A::PC),
                    3 => Val(EXTI0_7_A::PD),
                    5 => Val(EXTI0_7_A::PF),
                    i => Res(i),
                }
            }
            #[doc = "Checks if the value of the field is `PA`"]
            #[inline(always)]
            pub fn is_pa(&self) -> bool {
                *self == EXTI0_7_A::PA
            }
            #[doc = "Checks if the value of the field is `PB`"]
            #[inline(always)]
            pub fn is_pb(&self) -> bool {
                *self == EXTI0_7_A::PB
            }
            #[doc = "Checks if the value of the field is `PC`"]
            #[inline(always)]
            pub fn is_pc(&self) -> bool {
                *self == EXTI0_7_A::PC
            }
            #[doc = "Checks if the value of the field is `PD`"]
            #[inline(always)]
            pub fn is_pd(&self) -> bool {
                *self == EXTI0_7_A::PD
            }
            #[doc = "Checks if the value of the field is `PF`"]
            #[inline(always)]
            pub fn is_pf(&self) -> bool {
                *self == EXTI0_7_A::PF
            }
        }
        #[doc = "Write proxy for field `EXTI0_7`"]
        pub struct EXTI0_7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI0_7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI0_7_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI8_15_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI8_15`"]
        pub type EXTI8_15_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI8_15`"]
        pub struct EXTI8_15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI8_15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI8_15_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI16_23_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI16_23`"]
        pub type EXTI16_23_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI16_23`"]
        pub struct EXTI16_23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI16_23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI16_23_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | (((value as u32) & 0xff) << 16);
                self.w
            }
        }
        #[doc = "GPIO port selection"]
        pub type EXTI24_31_A = EXTI0_7_A;
        #[doc = "Reader of field `EXTI24_31`"]
        pub type EXTI24_31_R = crate::R<u8, EXTI0_7_A>;
        #[doc = "Write proxy for field `EXTI24_31`"]
        pub struct EXTI24_31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTI24_31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EXTI24_31_A) -> &'a mut W {
                unsafe { self.bits(variant.into()) }
            }
            #[doc = "GPIO port A selected"]
            #[inline(always)]
            pub fn pa(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PA)
            }
            #[doc = "GPIO port B selected"]
            #[inline(always)]
            pub fn pb(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PB)
            }
            #[doc = "GPIO port C selected"]
            #[inline(always)]
            pub fn pc(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PC)
            }
            #[doc = "GPIO port D selected"]
            #[inline(always)]
            pub fn pd(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PD)
            }
            #[doc = "GPIO port F selected"]
            #[inline(always)]
            pub fn pf(self) -> &'a mut W {
                self.variant(EXTI0_7_A::PF)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - GPIO port selection"]
            #[inline(always)]
            pub fn exti0_7(&self) -> EXTI0_7_R {
                EXTI0_7_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - GPIO port selection"]
            #[inline(always)]
            pub fn exti8_15(&self) -> EXTI8_15_R {
                EXTI8_15_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - GPIO port selection"]
            #[inline(always)]
            pub fn exti16_23(&self) -> EXTI16_23_R {
                EXTI16_23_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - GPIO port selection"]
            #[inline(always)]
            pub fn exti24_31(&self) -> EXTI24_31_R {
                EXTI24_31_R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - GPIO port selection"]
            #[inline(always)]
            pub fn exti0_7(&mut self) -> EXTI0_7_W {
                EXTI0_7_W { w: self }
            }
            #[doc = "Bits 8:15 - GPIO port selection"]
            #[inline(always)]
            pub fn exti8_15(&mut self) -> EXTI8_15_W {
                EXTI8_15_W { w: self }
            }
            #[doc = "Bits 16:23 - GPIO port selection"]
            #[inline(always)]
            pub fn exti16_23(&mut self) -> EXTI16_23_W {
                EXTI16_23_W { w: self }
            }
            #[doc = "Bits 24:31 - GPIO port selection"]
            #[inline(always)]
            pub fn exti24_31(&mut self) -> EXTI24_31_W {
                EXTI24_31_W { w: self }
            }
        }
    }
    #[doc = "EXTI CPU wakeup with interrupt mask register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [imr1](imr1) module"]
    pub type IMR1 = crate::Reg<u32, _IMR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IMR1;
    #[doc = "`read()` method returns [imr1::R](imr1::R) reader structure"]
    impl crate::Readable for IMR1 {}
    #[doc = "`write(|w| ..)` method takes [imr1::W](imr1::W) writer structure"]
    impl crate::Writable for IMR1 {}
    #[doc = "EXTI CPU wakeup with interrupt mask register"]
    pub mod imr1 {
        #[doc = "Reader of register IMR1"]
        pub type R = crate::R<u32, super::IMR1>;
        #[doc = "Writer for register IMR1"]
        pub type W = crate::W<u32, super::IMR1>;
        #[doc = "Register IMR1 `reset()`'s with value 0xfff8_0000"]
        impl crate::ResetValue for super::IMR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xfff8_0000
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum IM0_A {
            #[doc = "0: Interrupt request line is masked"]
            MASKED = 0,
            #[doc = "1: Interrupt request line is unmasked"]
            UNMASKED = 1,
        }
        impl From<IM0_A> for bool {
            #[inline(always)]
            fn from(variant: IM0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `IM0`"]
        pub type IM0_R = crate::R<bool, IM0_A>;
        impl IM0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> IM0_A {
                match self.bits {
                    false => IM0_A::MASKED,
                    true => IM0_A::UNMASKED,
                }
            }
            #[doc = "Checks if the value of the field is `MASKED`"]
            #[inline(always)]
            pub fn is_masked(&self) -> bool {
                *self == IM0_A::MASKED
            }
            #[doc = "Checks if the value of the field is `UNMASKED`"]
            #[inline(always)]
            pub fn is_unmasked(&self) -> bool {
                *self == IM0_A::UNMASKED
            }
        }
        #[doc = "Write proxy for field `IM0`"]
        pub struct IM0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM1_A = IM0_A;
        #[doc = "Reader of field `IM1`"]
        pub type IM1_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM1`"]
        pub struct IM1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM2_A = IM0_A;
        #[doc = "Reader of field `IM2`"]
        pub type IM2_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM2`"]
        pub struct IM2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM3_A = IM0_A;
        #[doc = "Reader of field `IM3`"]
        pub type IM3_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM3`"]
        pub struct IM3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM4_A = IM0_A;
        #[doc = "Reader of field `IM4`"]
        pub type IM4_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM4`"]
        pub struct IM4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM5_A = IM0_A;
        #[doc = "Reader of field `IM5`"]
        pub type IM5_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM5`"]
        pub struct IM5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM6_A = IM0_A;
        #[doc = "Reader of field `IM6`"]
        pub type IM6_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM6`"]
        pub struct IM6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM7_A = IM0_A;
        #[doc = "Reader of field `IM7`"]
        pub type IM7_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM7`"]
        pub struct IM7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM8_A = IM0_A;
        #[doc = "Reader of field `IM8`"]
        pub type IM8_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM8`"]
        pub struct IM8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM9_A = IM0_A;
        #[doc = "Reader of field `IM9`"]
        pub type IM9_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM9`"]
        pub struct IM9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM10_A = IM0_A;
        #[doc = "Reader of field `IM10`"]
        pub type IM10_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM10`"]
        pub struct IM10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM11_A = IM0_A;
        #[doc = "Reader of field `IM11`"]
        pub type IM11_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM11`"]
        pub struct IM11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM12_A = IM0_A;
        #[doc = "Reader of field `IM12`"]
        pub type IM12_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM12`"]
        pub struct IM12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM13_A = IM0_A;
        #[doc = "Reader of field `IM13`"]
        pub type IM13_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM13`"]
        pub struct IM13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM14_A = IM0_A;
        #[doc = "Reader of field `IM14`"]
        pub type IM14_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM14`"]
        pub struct IM14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM15_A = IM0_A;
        #[doc = "Reader of field `IM15`"]
        pub type IM15_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM15`"]
        pub struct IM15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM16_A = IM0_A;
        #[doc = "Reader of field `IM16`"]
        pub type IM16_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM16`"]
        pub struct IM16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM19_A = IM0_A;
        #[doc = "Reader of field `IM19`"]
        pub type IM19_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM19`"]
        pub struct IM19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM20_A = IM0_A;
        #[doc = "Reader of field `IM20`"]
        pub type IM20_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM20`"]
        pub struct IM20_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM20_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM20_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM21_A = IM0_A;
        #[doc = "Reader of field `IM21`"]
        pub type IM21_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM21`"]
        pub struct IM21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM22_A = IM0_A;
        #[doc = "Reader of field `IM22`"]
        pub type IM22_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM22`"]
        pub struct IM22_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM22_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM22_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM23_A = IM0_A;
        #[doc = "Reader of field `IM23`"]
        pub type IM23_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM23`"]
        pub struct IM23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM23_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM24_A = IM0_A;
        #[doc = "Reader of field `IM24`"]
        pub type IM24_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM24`"]
        pub struct IM24_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM24_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM24_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM25_A = IM0_A;
        #[doc = "Reader of field `IM25`"]
        pub type IM25_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM25`"]
        pub struct IM25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM25_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM26_A = IM0_A;
        #[doc = "Reader of field `IM26`"]
        pub type IM26_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM26`"]
        pub struct IM26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM26_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM28_A = IM0_A;
        #[doc = "Reader of field `IM28`"]
        pub type IM28_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM28`"]
        pub struct IM28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM28_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM28_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM29_A = IM0_A;
        #[doc = "Reader of field `IM29`"]
        pub type IM29_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM29`"]
        pub struct IM29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM29_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM29_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM30_A = IM0_A;
        #[doc = "Reader of field `IM30`"]
        pub type IM30_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM30`"]
        pub struct IM30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM30_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM30_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "CPU wakeup with interrupt mask on event input"]
        pub type IM31_A = IM0_A;
        #[doc = "Reader of field `IM31`"]
        pub type IM31_R = crate::R<bool, IM0_A>;
        #[doc = "Write proxy for field `IM31`"]
        pub struct IM31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IM31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: IM31_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(IM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(IM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im0(&self) -> IM0_R {
                IM0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im1(&self) -> IM1_R {
                IM1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im2(&self) -> IM2_R {
                IM2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im3(&self) -> IM3_R {
                IM3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im4(&self) -> IM4_R {
                IM4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im5(&self) -> IM5_R {
                IM5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im6(&self) -> IM6_R {
                IM6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im7(&self) -> IM7_R {
                IM7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im8(&self) -> IM8_R {
                IM8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im9(&self) -> IM9_R {
                IM9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im10(&self) -> IM10_R {
                IM10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im11(&self) -> IM11_R {
                IM11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im12(&self) -> IM12_R {
                IM12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im13(&self) -> IM13_R {
                IM13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im14(&self) -> IM14_R {
                IM14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im15(&self) -> IM15_R {
                IM15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im16(&self) -> IM16_R {
                IM16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 19 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im19(&self) -> IM19_R {
                IM19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im20(&self) -> IM20_R {
                IM20_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im21(&self) -> IM21_R {
                IM21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im22(&self) -> IM22_R {
                IM22_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im23(&self) -> IM23_R {
                IM23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im24(&self) -> IM24_R {
                IM24_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im25(&self) -> IM25_R {
                IM25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im26(&self) -> IM26_R {
                IM26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 28 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im28(&self) -> IM28_R {
                IM28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im29(&self) -> IM29_R {
                IM29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im30(&self) -> IM30_R {
                IM30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im31(&self) -> IM31_R {
                IM31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im0(&mut self) -> IM0_W {
                IM0_W { w: self }
            }
            #[doc = "Bit 1 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im1(&mut self) -> IM1_W {
                IM1_W { w: self }
            }
            #[doc = "Bit 2 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im2(&mut self) -> IM2_W {
                IM2_W { w: self }
            }
            #[doc = "Bit 3 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im3(&mut self) -> IM3_W {
                IM3_W { w: self }
            }
            #[doc = "Bit 4 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im4(&mut self) -> IM4_W {
                IM4_W { w: self }
            }
            #[doc = "Bit 5 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im5(&mut self) -> IM5_W {
                IM5_W { w: self }
            }
            #[doc = "Bit 6 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im6(&mut self) -> IM6_W {
                IM6_W { w: self }
            }
            #[doc = "Bit 7 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im7(&mut self) -> IM7_W {
                IM7_W { w: self }
            }
            #[doc = "Bit 8 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im8(&mut self) -> IM8_W {
                IM8_W { w: self }
            }
            #[doc = "Bit 9 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im9(&mut self) -> IM9_W {
                IM9_W { w: self }
            }
            #[doc = "Bit 10 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im10(&mut self) -> IM10_W {
                IM10_W { w: self }
            }
            #[doc = "Bit 11 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im11(&mut self) -> IM11_W {
                IM11_W { w: self }
            }
            #[doc = "Bit 12 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im12(&mut self) -> IM12_W {
                IM12_W { w: self }
            }
            #[doc = "Bit 13 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im13(&mut self) -> IM13_W {
                IM13_W { w: self }
            }
            #[doc = "Bit 14 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im14(&mut self) -> IM14_W {
                IM14_W { w: self }
            }
            #[doc = "Bit 15 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im15(&mut self) -> IM15_W {
                IM15_W { w: self }
            }
            #[doc = "Bit 16 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im16(&mut self) -> IM16_W {
                IM16_W { w: self }
            }
            #[doc = "Bit 19 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im19(&mut self) -> IM19_W {
                IM19_W { w: self }
            }
            #[doc = "Bit 20 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im20(&mut self) -> IM20_W {
                IM20_W { w: self }
            }
            #[doc = "Bit 21 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im21(&mut self) -> IM21_W {
                IM21_W { w: self }
            }
            #[doc = "Bit 22 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im22(&mut self) -> IM22_W {
                IM22_W { w: self }
            }
            #[doc = "Bit 23 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im23(&mut self) -> IM23_W {
                IM23_W { w: self }
            }
            #[doc = "Bit 24 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im24(&mut self) -> IM24_W {
                IM24_W { w: self }
            }
            #[doc = "Bit 25 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im25(&mut self) -> IM25_W {
                IM25_W { w: self }
            }
            #[doc = "Bit 26 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im26(&mut self) -> IM26_W {
                IM26_W { w: self }
            }
            #[doc = "Bit 28 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im28(&mut self) -> IM28_W {
                IM28_W { w: self }
            }
            #[doc = "Bit 29 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im29(&mut self) -> IM29_W {
                IM29_W { w: self }
            }
            #[doc = "Bit 30 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im30(&mut self) -> IM30_W {
                IM30_W { w: self }
            }
            #[doc = "Bit 31 - CPU wakeup with interrupt mask on event input"]
            #[inline(always)]
            pub fn im31(&mut self) -> IM31_W {
                IM31_W { w: self }
            }
        }
    }
    #[doc = "EXTI CPU wakeup with event mask register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [emr1](emr1) module"]
    pub type EMR1 = crate::Reg<u32, _EMR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EMR1;
    #[doc = "`read()` method returns [emr1::R](emr1::R) reader structure"]
    impl crate::Readable for EMR1 {}
    #[doc = "`write(|w| ..)` method takes [emr1::W](emr1::W) writer structure"]
    impl crate::Writable for EMR1 {}
    #[doc = "EXTI CPU wakeup with event mask register"]
    pub mod emr1 {
        #[doc = "Reader of register EMR1"]
        pub type R = crate::R<u32, super::EMR1>;
        #[doc = "Writer for register EMR1"]
        pub type W = crate::W<u32, super::EMR1>;
        #[doc = "Register EMR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::EMR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "CPU wakeup with event mask on event input\n\nValue on reset: 0"]
        #[derive(Clone, Copy, Debug, PartialEq)]
        pub enum EM0_A {
            #[doc = "0: Interrupt request line is masked"]
            MASKED = 0,
            #[doc = "1: Interrupt request line is unmasked"]
            UNMASKED = 1,
        }
        impl From<EM0_A> for bool {
            #[inline(always)]
            fn from(variant: EM0_A) -> Self {
                variant as u8 != 0
            }
        }
        #[doc = "Reader of field `EM0`"]
        pub type EM0_R = crate::R<bool, EM0_A>;
        impl EM0_R {
            #[doc = r"Get enumerated values variant"]
            #[inline(always)]
            pub fn variant(&self) -> EM0_A {
                match self.bits {
                    false => EM0_A::MASKED,
                    true => EM0_A::UNMASKED,
                }
            }
            #[doc = "Checks if the value of the field is `MASKED`"]
            #[inline(always)]
            pub fn is_masked(&self) -> bool {
                *self == EM0_A::MASKED
            }
            #[doc = "Checks if the value of the field is `UNMASKED`"]
            #[inline(always)]
            pub fn is_unmasked(&self) -> bool {
                *self == EM0_A::UNMASKED
            }
        }
        #[doc = "Write proxy for field `EM0`"]
        pub struct EM0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM0_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM0_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM1_A = EM0_A;
        #[doc = "Reader of field `EM1`"]
        pub type EM1_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM1`"]
        pub struct EM1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM1_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM1_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM2_A = EM0_A;
        #[doc = "Reader of field `EM2`"]
        pub type EM2_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM2`"]
        pub struct EM2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM2_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM2_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM3_A = EM0_A;
        #[doc = "Reader of field `EM3`"]
        pub type EM3_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM3`"]
        pub struct EM3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM3_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM3_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM4_A = EM0_A;
        #[doc = "Reader of field `EM4`"]
        pub type EM4_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM4`"]
        pub struct EM4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM4_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM4_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM5_A = EM0_A;
        #[doc = "Reader of field `EM5`"]
        pub type EM5_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM5`"]
        pub struct EM5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM5_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM5_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM6_A = EM0_A;
        #[doc = "Reader of field `EM6`"]
        pub type EM6_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM6`"]
        pub struct EM6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM6_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM6_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM7_A = EM0_A;
        #[doc = "Reader of field `EM7`"]
        pub type EM7_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM7`"]
        pub struct EM7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM7_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM7_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM8_A = EM0_A;
        #[doc = "Reader of field `EM8`"]
        pub type EM8_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM8`"]
        pub struct EM8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM8_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM8_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM9_A = EM0_A;
        #[doc = "Reader of field `EM9`"]
        pub type EM9_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM9`"]
        pub struct EM9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM9_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM9_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM10_A = EM0_A;
        #[doc = "Reader of field `EM10`"]
        pub type EM10_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM10`"]
        pub struct EM10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM10_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM10_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM11_A = EM0_A;
        #[doc = "Reader of field `EM11`"]
        pub type EM11_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM11`"]
        pub struct EM11_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM11_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM11_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM12_A = EM0_A;
        #[doc = "Reader of field `EM12`"]
        pub type EM12_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM12`"]
        pub struct EM12_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM12_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM12_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM13_A = EM0_A;
        #[doc = "Reader of field `EM13`"]
        pub type EM13_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM13`"]
        pub struct EM13_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM13_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM13_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM14_A = EM0_A;
        #[doc = "Reader of field `EM14`"]
        pub type EM14_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM14`"]
        pub struct EM14_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM14_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM14_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM15_A = EM0_A;
        #[doc = "Reader of field `EM15`"]
        pub type EM15_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM15`"]
        pub struct EM15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM15_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM15_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM16_A = EM0_A;
        #[doc = "Reader of field `EM16`"]
        pub type EM16_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM16`"]
        pub struct EM16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM16_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM16_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM19_A = EM0_A;
        #[doc = "Reader of field `EM19`"]
        pub type EM19_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM19`"]
        pub struct EM19_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM19_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM19_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM21_A = EM0_A;
        #[doc = "Reader of field `EM21`"]
        pub type EM21_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM21`"]
        pub struct EM21_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM21_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM21_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM23_A = EM0_A;
        #[doc = "Reader of field `EM23`"]
        pub type EM23_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM23`"]
        pub struct EM23_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM23_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM23_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM25_A = EM0_A;
        #[doc = "Reader of field `EM25`"]
        pub type EM25_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM25`"]
        pub struct EM25_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM25_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM25_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM26_A = EM0_A;
        #[doc = "Reader of field `EM26`"]
        pub type EM26_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM26`"]
        pub struct EM26_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM26_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM26_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM28_A = EM0_A;
        #[doc = "Reader of field `EM28`"]
        pub type EM28_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM28`"]
        pub struct EM28_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM28_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM28_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM29_A = EM0_A;
        #[doc = "Reader of field `EM29`"]
        pub type EM29_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM29`"]
        pub struct EM29_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM29_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM29_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM30_A = EM0_A;
        #[doc = "Reader of field `EM30`"]
        pub type EM30_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM30`"]
        pub struct EM30_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM30_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM30_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "CPU wakeup with event mask on event input"]
        pub type EM31_A = EM0_A;
        #[doc = "Reader of field `EM31`"]
        pub type EM31_R = crate::R<bool, EM0_A>;
        #[doc = "Write proxy for field `EM31`"]
        pub struct EM31_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EM31_W<'a> {
            #[doc = r"Writes `variant` to the field"]
            #[inline(always)]
            pub fn variant(self, variant: EM31_A) -> &'a mut W {
                {
                    self.bit(variant.into())
                }
            }
            #[doc = "Interrupt request line is masked"]
            #[inline(always)]
            pub fn masked(self) -> &'a mut W {
                self.variant(EM0_A::MASKED)
            }
            #[doc = "Interrupt request line is unmasked"]
            #[inline(always)]
            pub fn unmasked(self) -> &'a mut W {
                self.variant(EM0_A::UNMASKED)
            }
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em0(&self) -> EM0_R {
                EM0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em1(&self) -> EM1_R {
                EM1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em2(&self) -> EM2_R {
                EM2_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em3(&self) -> EM3_R {
                EM3_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em4(&self) -> EM4_R {
                EM4_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em5(&self) -> EM5_R {
                EM5_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em6(&self) -> EM6_R {
                EM6_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em7(&self) -> EM7_R {
                EM7_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em8(&self) -> EM8_R {
                EM8_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em9(&self) -> EM9_R {
                EM9_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em10(&self) -> EM10_R {
                EM10_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em11(&self) -> EM11_R {
                EM11_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em12(&self) -> EM12_R {
                EM12_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em13(&self) -> EM13_R {
                EM13_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em14(&self) -> EM14_R {
                EM14_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em15(&self) -> EM15_R {
                EM15_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em16(&self) -> EM16_R {
                EM16_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 19 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em19(&self) -> EM19_R {
                EM19_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 21 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em21(&self) -> EM21_R {
                EM21_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 23 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em23(&self) -> EM23_R {
                EM23_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 25 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em25(&self) -> EM25_R {
                EM25_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em26(&self) -> EM26_R {
                EM26_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 28 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em28(&self) -> EM28_R {
                EM28_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em29(&self) -> EM29_R {
                EM29_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em30(&self) -> EM30_R {
                EM30_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em31(&self) -> EM31_R {
                EM31_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em0(&mut self) -> EM0_W {
                EM0_W { w: self }
            }
            #[doc = "Bit 1 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em1(&mut self) -> EM1_W {
                EM1_W { w: self }
            }
            #[doc = "Bit 2 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em2(&mut self) -> EM2_W {
                EM2_W { w: self }
            }
            #[doc = "Bit 3 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em3(&mut self) -> EM3_W {
                EM3_W { w: self }
            }
            #[doc = "Bit 4 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em4(&mut self) -> EM4_W {
                EM4_W { w: self }
            }
            #[doc = "Bit 5 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em5(&mut self) -> EM5_W {
                EM5_W { w: self }
            }
            #[doc = "Bit 6 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em6(&mut self) -> EM6_W {
                EM6_W { w: self }
            }
            #[doc = "Bit 7 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em7(&mut self) -> EM7_W {
                EM7_W { w: self }
            }
            #[doc = "Bit 8 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em8(&mut self) -> EM8_W {
                EM8_W { w: self }
            }
            #[doc = "Bit 9 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em9(&mut self) -> EM9_W {
                EM9_W { w: self }
            }
            #[doc = "Bit 10 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em10(&mut self) -> EM10_W {
                EM10_W { w: self }
            }
            #[doc = "Bit 11 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em11(&mut self) -> EM11_W {
                EM11_W { w: self }
            }
            #[doc = "Bit 12 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em12(&mut self) -> EM12_W {
                EM12_W { w: self }
            }
            #[doc = "Bit 13 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em13(&mut self) -> EM13_W {
                EM13_W { w: self }
            }
            #[doc = "Bit 14 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em14(&mut self) -> EM14_W {
                EM14_W { w: self }
            }
            #[doc = "Bit 15 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em15(&mut self) -> EM15_W {
                EM15_W { w: self }
            }
            #[doc = "Bit 16 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em16(&mut self) -> EM16_W {
                EM16_W { w: self }
            }
            #[doc = "Bit 19 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em19(&mut self) -> EM19_W {
                EM19_W { w: self }
            }
            #[doc = "Bit 21 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em21(&mut self) -> EM21_W {
                EM21_W { w: self }
            }
            #[doc = "Bit 23 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em23(&mut self) -> EM23_W {
                EM23_W { w: self }
            }
            #[doc = "Bit 25 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em25(&mut self) -> EM25_W {
                EM25_W { w: self }
            }
            #[doc = "Bit 26 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em26(&mut self) -> EM26_W {
                EM26_W { w: self }
            }
            #[doc = "Bit 28 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em28(&mut self) -> EM28_W {
                EM28_W { w: self }
            }
            #[doc = "Bit 29 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em29(&mut self) -> EM29_W {
                EM29_W { w: self }
            }
            #[doc = "Bit 30 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em30(&mut self) -> EM30_W {
                EM30_W { w: self }
            }
            #[doc = "Bit 31 - CPU wakeup with event mask on event input"]
            #[inline(always)]
            pub fn em31(&mut self) -> EM31_W {
                EM31_W { w: self }
            }
        }
    }
}
#[doc = "General purpose timers"]
pub struct TIM16 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM16 {}
impl TIM16 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim16::RegisterBlock {
        0x4001_4400 as *const _
    }
}
impl Deref for TIM16 {
    type Target = tim16::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM16::ptr() }
    }
}
#[doc = "General purpose timers"]
pub mod tim16 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        _reserved2: [u8; 4usize],
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_5_ccmr1: [u8; 4usize],
        _reserved6: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        #[doc = "0x30 - repetition counter register"]
        pub rcr: RCR,
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR1,
        _reserved12: [u8; 12usize],
        #[doc = "0x44 - break and dead-time register"]
        pub bdtr: BDTR,
        #[doc = "0x48 - DMA control register"]
        pub dcr: DCR,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: DMAR,
        _reserved15: [u8; 16usize],
        #[doc = "0x60 - TIM17 option register 1"]
        pub af1: AF1,
        _reserved16: [u8; 4usize],
        #[doc = "0x68 - input selection register"]
        pub tisel: TISEL,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `UIFREMAP`"]
        pub type UIFREMAP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIFREMAP`"]
        pub struct UIFREMAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIFREMAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 11 - UIF status bit remapping"]
            #[inline(always)]
            pub fn uifremap(&self) -> UIFREMAP_R {
                UIFREMAP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 11 - UIF status bit remapping"]
            #[inline(always)]
            pub fn uifremap(&mut self) -> UIFREMAP_W {
                UIFREMAP_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OIS1N`"]
        pub type OIS1N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS1N`"]
        pub struct OIS1N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `OIS1`"]
        pub type OIS1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS1`"]
        pub struct OIS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CCDS`"]
        pub type CCDS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCDS`"]
        pub struct CCDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCDS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CCUS`"]
        pub type CCUS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCUS`"]
        pub struct CCUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCUS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CCPC`"]
        pub type CCPC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCPC`"]
        pub struct CCPC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCPC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&self) -> OIS1N_R {
                OIS1N_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&self) -> OIS1_R {
                OIS1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&self) -> CCDS_R {
                CCDS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&self) -> CCUS_R {
                CCUS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&self) -> CCPC_R {
                CCPC_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&mut self) -> OIS1N_W {
                OIS1N_W { w: self }
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&mut self) -> OIS1_W {
                OIS1_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&mut self) -> CCDS_W {
                CCDS_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&mut self) -> CCUS_W {
                CCUS_W { w: self }
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&mut self) -> CCPC_W {
                CCPC_W { w: self }
            }
        }
    }
    #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `COMDE`"]
        pub type COMDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMDE`"]
        pub struct COMDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CC1DE`"]
        pub type CC1DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1DE`"]
        pub struct CC1DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `UDE`"]
        pub type UDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDE`"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `BIE`"]
        pub type BIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIE`"]
        pub struct BIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `COMIE`"]
        pub type COMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMIE`"]
        pub struct COMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&self) -> COMDE_R {
                COMDE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&self) -> CC1DE_R {
                CC1DE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&self) -> BIE_R {
                BIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&self) -> COMIE_R {
                COMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&mut self) -> COMDE_W {
                COMDE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&mut self) -> CC1DE_W {
                CC1DE_W { w: self }
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&mut self) -> BIE_W {
                BIE_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&mut self) -> COMIE_W {
                COMIE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `BIF`"]
        pub type BIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIF`"]
        pub struct BIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `COMIF`"]
        pub type COMIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMIF`"]
        pub struct COMIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&self) -> BIF_R {
                BIF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&self) -> COMIF_R {
                COMIF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&mut self) -> BIF_W {
                BIF_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&mut self) -> COMIF_W {
                COMIF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `BG`"]
        pub struct BG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `COMG`"]
        pub struct COMG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 7 - Break generation"]
            #[inline(always)]
            pub fn bg(&mut self) -> BG_W {
                BG_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare control update generation"]
            #[inline(always)]
            pub fn comg(&mut self) -> COMG_W {
                COMG_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC1M_2`"]
        pub type OC1M_2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1M_2`"]
        pub struct OC1M_2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 16 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m_2(&self) -> OC1M_2_R {
                OC1M_2_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 16 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m_2(&mut self) -> OC1M_2_W {
                OC1M_2_W { w: self }
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NE`"]
        pub type CC1NE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NE`"]
        pub struct CC1NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&self) -> CC1NE_R {
                CC1NE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&mut self) -> CC1NE_W {
                CC1NE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        #[doc = "Reader of field `UIFCPY`"]
        pub type UIFCPY_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bit 31 - UIF Copy"]
            #[inline(always)]
            pub fn uifcpy(&self) -> UIFCPY_R {
                UIFCPY_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "repetition counter register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcr](rcr) module"]
    pub type RCR = crate::Reg<u32, _RCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RCR;
    #[doc = "`read()` method returns [rcr::R](rcr::R) reader structure"]
    impl crate::Readable for RCR {}
    #[doc = "`write(|w| ..)` method takes [rcr::W](rcr::W) writer structure"]
    impl crate::Writable for RCR {}
    #[doc = "repetition counter register"]
    pub mod rcr {
        #[doc = "Reader of register RCR"]
        pub type R = crate::R<u32, super::RCR>;
        #[doc = "Writer for register RCR"]
        pub type W = crate::W<u32, super::RCR>;
        #[doc = "Register RCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REP`"]
        pub type REP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `REP`"]
        pub struct REP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Repetition counter value"]
            #[inline(always)]
            pub fn rep(&self) -> REP_R {
                REP_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Repetition counter value"]
            #[inline(always)]
            pub fn rep(&mut self) -> REP_W {
                REP_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](ccr1) module"]
    pub type CCR1 = crate::Reg<u32, _CCR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR1;
    #[doc = "`read()` method returns [ccr1::R](ccr1::R) reader structure"]
    impl crate::Readable for CCR1 {}
    #[doc = "`write(|w| ..)` method takes [ccr1::W](ccr1::W) writer structure"]
    impl crate::Writable for CCR1 {}
    #[doc = "capture/compare register 1"]
    pub mod ccr1 {
        #[doc = "Reader of register CCR1"]
        pub type R = crate::R<u32, super::CCR1>;
        #[doc = "Writer for register CCR1"]
        pub type W = crate::W<u32, super::CCR1>;
        #[doc = "Register CCR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR1`"]
        pub type CCR1_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR1`"]
        pub struct CCR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1(&self) -> CCR1_R {
                CCR1_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1(&mut self) -> CCR1_W {
                CCR1_W { w: self }
            }
        }
    }
    #[doc = "break and dead-time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdtr](bdtr) module"]
    pub type BDTR = crate::Reg<u32, _BDTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BDTR;
    #[doc = "`read()` method returns [bdtr::R](bdtr::R) reader structure"]
    impl crate::Readable for BDTR {}
    #[doc = "`write(|w| ..)` method takes [bdtr::W](bdtr::W) writer structure"]
    impl crate::Writable for BDTR {}
    #[doc = "break and dead-time register"]
    pub mod bdtr {
        #[doc = "Reader of register BDTR"]
        pub type R = crate::R<u32, super::BDTR>;
        #[doc = "Writer for register BDTR"]
        pub type W = crate::W<u32, super::BDTR>;
        #[doc = "Register BDTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BDTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DTG`"]
        pub type DTG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DTG`"]
        pub struct DTG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `LOCK`"]
        pub type LOCK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LOCK`"]
        pub struct LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OSSI`"]
        pub type OSSI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OSSI`"]
        pub struct OSSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OSSR`"]
        pub type OSSR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OSSR`"]
        pub struct OSSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `BKE`"]
        pub type BKE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKE`"]
        pub struct BKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `AOE`"]
        pub type AOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AOE`"]
        pub struct AOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `MOE`"]
        pub type MOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MOE`"]
        pub struct MOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `BKF`"]
        pub type BKF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BKF`"]
        pub struct BKF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `BKDSRM`"]
        pub type BKDSRM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKDSRM`"]
        pub struct BKDSRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKDSRM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `BKBID`"]
        pub type BKBID_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKBID`"]
        pub struct BKBID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKBID_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&self) -> DTG_R {
                DTG_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&self) -> OSSI_R {
                OSSI_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&self) -> OSSR_R {
                OSSR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&self) -> BKE_R {
                BKE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&self) -> AOE_R {
                AOE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&self) -> MOE_R {
                MOE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 16:19 - Break filter"]
            #[inline(always)]
            pub fn bkf(&self) -> BKF_R {
                BKF_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 26 - Break Disarm"]
            #[inline(always)]
            pub fn bkdsrm(&self) -> BKDSRM_R {
                BKDSRM_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Break Bidirectional"]
            #[inline(always)]
            pub fn bkbid(&self) -> BKBID_R {
                BKBID_R::new(((self.bits >> 28) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&mut self) -> DTG_W {
                DTG_W { w: self }
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&mut self) -> LOCK_W {
                LOCK_W { w: self }
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&mut self) -> OSSI_W {
                OSSI_W { w: self }
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&mut self) -> OSSR_W {
                OSSR_W { w: self }
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&mut self) -> BKE_W {
                BKE_W { w: self }
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&mut self) -> AOE_W {
                AOE_W { w: self }
            }
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&mut self) -> MOE_W {
                MOE_W { w: self }
            }
            #[doc = "Bits 16:19 - Break filter"]
            #[inline(always)]
            pub fn bkf(&mut self) -> BKF_W {
                BKF_W { w: self }
            }
            #[doc = "Bit 26 - Break Disarm"]
            #[inline(always)]
            pub fn bkdsrm(&mut self) -> BKDSRM_W {
                BKDSRM_W { w: self }
            }
            #[doc = "Bit 28 - Break Bidirectional"]
            #[inline(always)]
            pub fn bkbid(&mut self) -> BKBID_W {
                BKBID_W { w: self }
            }
        }
    }
    #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](dcr) module"]
    pub type DCR = crate::Reg<u32, _DCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DCR;
    #[doc = "`read()` method returns [dcr::R](dcr::R) reader structure"]
    impl crate::Readable for DCR {}
    #[doc = "`write(|w| ..)` method takes [dcr::W](dcr::W) writer structure"]
    impl crate::Writable for DCR {}
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Reader of register DCR"]
        pub type R = crate::R<u32, super::DCR>;
        #[doc = "Writer for register DCR"]
        pub type W = crate::W<u32, super::DCR>;
        #[doc = "Register DCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBL`"]
        pub type DBL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBL`"]
        pub struct DBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBA`"]
        pub type DBA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBA`"]
        pub struct DBA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&self) -> DBL_R {
                DBL_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&self) -> DBA_R {
                DBA_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&mut self) -> DBL_W {
                DBL_W { w: self }
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&mut self) -> DBA_W {
                DBA_W { w: self }
            }
        }
    }
    #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](dmar) module"]
    pub type DMAR = crate::Reg<u32, _DMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAR;
    #[doc = "`read()` method returns [dmar::R](dmar::R) reader structure"]
    impl crate::Readable for DMAR {}
    #[doc = "`write(|w| ..)` method takes [dmar::W](dmar::W) writer structure"]
    impl crate::Writable for DMAR {}
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Reader of register DMAR"]
        pub type R = crate::R<u32, super::DMAR>;
        #[doc = "Writer for register DMAR"]
        pub type W = crate::W<u32, super::DMAR>;
        #[doc = "Register DMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAB`"]
        pub type DMAB_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DMAB`"]
        pub struct DMAB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&self) -> DMAB_R {
                DMAB_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&mut self) -> DMAB_W {
                DMAB_W { w: self }
            }
        }
    }
    #[doc = "TIM17 option register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [af1](af1) module"]
    pub type AF1 = crate::Reg<u32, _AF1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AF1;
    #[doc = "`read()` method returns [af1::R](af1::R) reader structure"]
    impl crate::Readable for AF1 {}
    #[doc = "`write(|w| ..)` method takes [af1::W](af1::W) writer structure"]
    impl crate::Writable for AF1 {}
    #[doc = "TIM17 option register 1"]
    pub mod af1 {
        #[doc = "Reader of register AF1"]
        pub type R = crate::R<u32, super::AF1>;
        #[doc = "Writer for register AF1"]
        pub type W = crate::W<u32, super::AF1>;
        #[doc = "Register AF1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::AF1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BKINE`"]
        pub type BKINE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKINE`"]
        pub struct BKINE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKINE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `BKCMP1E`"]
        pub type BKCMP1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKCMP1E`"]
        pub struct BKCMP1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKCMP1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `BKCMP2E`"]
        pub type BKCMP2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKCMP2E`"]
        pub struct BKCMP2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKCMP2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `BKDFBK1E`"]
        pub type BKDFBK1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKDFBK1E`"]
        pub struct BKDFBK1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKDFBK1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `BKINP`"]
        pub type BKINP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKINP`"]
        pub struct BKINP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKINP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `BKCMP1P`"]
        pub type BKCMP1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKCMP1P`"]
        pub struct BKCMP1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKCMP1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `BKCMP2P`"]
        pub type BKCMP2P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKCMP2P`"]
        pub struct BKCMP2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKCMP2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - BRK BKIN input enable"]
            #[inline(always)]
            pub fn bkine(&self) -> BKINE_R {
                BKINE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - BRK COMP1 enable"]
            #[inline(always)]
            pub fn bkcmp1e(&self) -> BKCMP1E_R {
                BKCMP1E_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - BRK COMP2 enable"]
            #[inline(always)]
            pub fn bkcmp2e(&self) -> BKCMP2E_R {
                BKCMP2E_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 8 - BRK DFSDM_BREAK1 enable"]
            #[inline(always)]
            pub fn bkdfbk1e(&self) -> BKDFBK1E_R {
                BKDFBK1E_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BRK BKIN input polarity"]
            #[inline(always)]
            pub fn bkinp(&self) -> BKINP_R {
                BKINP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - BRK COMP1 input polarity"]
            #[inline(always)]
            pub fn bkcmp1p(&self) -> BKCMP1P_R {
                BKCMP1P_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - BRK COMP2 input polarit"]
            #[inline(always)]
            pub fn bkcmp2p(&self) -> BKCMP2P_R {
                BKCMP2P_R::new(((self.bits >> 11) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - BRK BKIN input enable"]
            #[inline(always)]
            pub fn bkine(&mut self) -> BKINE_W {
                BKINE_W { w: self }
            }
            #[doc = "Bit 1 - BRK COMP1 enable"]
            #[inline(always)]
            pub fn bkcmp1e(&mut self) -> BKCMP1E_W {
                BKCMP1E_W { w: self }
            }
            #[doc = "Bit 2 - BRK COMP2 enable"]
            #[inline(always)]
            pub fn bkcmp2e(&mut self) -> BKCMP2E_W {
                BKCMP2E_W { w: self }
            }
            #[doc = "Bit 8 - BRK DFSDM_BREAK1 enable"]
            #[inline(always)]
            pub fn bkdfbk1e(&mut self) -> BKDFBK1E_W {
                BKDFBK1E_W { w: self }
            }
            #[doc = "Bit 9 - BRK BKIN input polarity"]
            #[inline(always)]
            pub fn bkinp(&mut self) -> BKINP_W {
                BKINP_W { w: self }
            }
            #[doc = "Bit 10 - BRK COMP1 input polarity"]
            #[inline(always)]
            pub fn bkcmp1p(&mut self) -> BKCMP1P_W {
                BKCMP1P_W { w: self }
            }
            #[doc = "Bit 11 - BRK COMP2 input polarit"]
            #[inline(always)]
            pub fn bkcmp2p(&mut self) -> BKCMP2P_W {
                BKCMP2P_W { w: self }
            }
        }
    }
    #[doc = "input selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tisel](tisel) module"]
    pub type TISEL = crate::Reg<u32, _TISEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TISEL;
    #[doc = "`read()` method returns [tisel::R](tisel::R) reader structure"]
    impl crate::Readable for TISEL {}
    #[doc = "`write(|w| ..)` method takes [tisel::W](tisel::W) writer structure"]
    impl crate::Writable for TISEL {}
    #[doc = "input selection register"]
    pub mod tisel {
        #[doc = "Reader of register TISEL"]
        pub type R = crate::R<u32, super::TISEL>;
        #[doc = "Writer for register TISEL"]
        pub type W = crate::W<u32, super::TISEL>;
        #[doc = "Register TISEL `reset()`'s with value 0"]
        impl crate::ResetValue for super::TISEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TI1SEL`"]
        pub type TI1SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TI1SEL`"]
        pub struct TI1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - selects input"]
            #[inline(always)]
            pub fn ti1sel(&self) -> TI1SEL_R {
                TI1SEL_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - selects input"]
            #[inline(always)]
            pub fn ti1sel(&mut self) -> TI1SEL_W {
                TI1SEL_W { w: self }
            }
        }
    }
}
#[doc = "General purpose timers"]
pub struct TIM17 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM17 {}
impl TIM17 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim16::RegisterBlock {
        0x4001_4800 as *const _
    }
}
impl Deref for TIM17 {
    type Target = tim16::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM17::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART1 {}
impl USART1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4001_3800 as *const _
    }
}
impl Deref for USART1 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART1::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - Control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - Control register 3"]
        pub cr3: CR3,
        #[doc = "0x0c - Baud rate register"]
        pub brr: BRR,
        #[doc = "0x10 - Guard time and prescaler register"]
        pub gtpr: GTPR,
        #[doc = "0x14 - Receiver timeout register"]
        pub rtor: RTOR,
        #[doc = "0x18 - Request register"]
        pub rqr: RQR,
        #[doc = "0x1c - Interrupt & status register"]
        pub isr: ISR,
        #[doc = "0x20 - Interrupt flag clear register"]
        pub icr: ICR,
        #[doc = "0x24 - Receive data register"]
        pub rdr: RDR,
        #[doc = "0x28 - Transmit data register"]
        pub tdr: TDR,
        #[doc = "0x2c - Prescaler register"]
        pub presc: PRESC,
    }
    #[doc = "Control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "Control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RXFFIE`"]
        pub type RXFFIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXFFIE`"]
        pub struct RXFFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFFIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `TXFEIE`"]
        pub type TXFEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXFEIE`"]
        pub struct TXFEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `FIFOEN`"]
        pub type FIFOEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FIFOEN`"]
        pub struct FIFOEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FIFOEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `M1`"]
        pub type M1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `M1`"]
        pub struct M1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `EOBIE`"]
        pub type EOBIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOBIE`"]
        pub struct EOBIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOBIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `RTOIE`"]
        pub type RTOIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTOIE`"]
        pub struct RTOIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTOIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `DEAT`"]
        pub type DEAT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DEAT`"]
        pub struct DEAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEAT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 21)) | (((value as u32) & 0x1f) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `DEDT`"]
        pub type DEDT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DEDT`"]
        pub struct DEDT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEDT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 16)) | (((value as u32) & 0x1f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OVER8`"]
        pub type OVER8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVER8`"]
        pub struct OVER8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVER8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CMIE`"]
        pub type CMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMIE`"]
        pub struct CMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `MME`"]
        pub type MME_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MME`"]
        pub struct MME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MME_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `M0`"]
        pub type M0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `M0`"]
        pub struct M0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `WAKE`"]
        pub type WAKE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WAKE`"]
        pub struct WAKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAKE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `PCE`"]
        pub type PCE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PCE`"]
        pub struct PCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PS`"]
        pub type PS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PS`"]
        pub struct PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PEIE`"]
        pub type PEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PEIE`"]
        pub struct PEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TXEIE`"]
        pub type TXEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXEIE`"]
        pub struct TXEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RXNEIE`"]
        pub type RXNEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXNEIE`"]
        pub struct RXNEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `IDLEIE`"]
        pub type IDLEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IDLEIE`"]
        pub struct IDLEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDLEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TE`"]
        pub type TE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TE`"]
        pub struct TE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `RE`"]
        pub type RE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RE`"]
        pub struct RE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `UESM`"]
        pub type UESM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UESM`"]
        pub struct UESM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UESM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `UE`"]
        pub type UE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UE`"]
        pub struct UE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - RXFIFO Full interrupt enable"]
            #[inline(always)]
            pub fn rxffie(&self) -> RXFFIE_R {
                RXFFIE_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - TXFIFO empty interrupt enable"]
            #[inline(always)]
            pub fn txfeie(&self) -> TXFEIE_R {
                TXFEIE_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - FIFO mode enable"]
            #[inline(always)]
            pub fn fifoen(&self) -> FIFOEN_R {
                FIFOEN_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Word length"]
            #[inline(always)]
            pub fn m1(&self) -> M1_R {
                M1_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 27 - End of Block interrupt enable"]
            #[inline(always)]
            pub fn eobie(&self) -> EOBIE_R {
                EOBIE_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Receiver timeout interrupt enable"]
            #[inline(always)]
            pub fn rtoie(&self) -> RTOIE_R {
                RTOIE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bits 21:25 - DEAT"]
            #[inline(always)]
            pub fn deat(&self) -> DEAT_R {
                DEAT_R::new(((self.bits >> 21) & 0x1f) as u8)
            }
            #[doc = "Bits 16:20 - DEDT"]
            #[inline(always)]
            pub fn dedt(&self) -> DEDT_R {
                DEDT_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bit 15 - Oversampling mode"]
            #[inline(always)]
            pub fn over8(&self) -> OVER8_R {
                OVER8_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Character match interrupt enable"]
            #[inline(always)]
            pub fn cmie(&self) -> CMIE_R {
                CMIE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Mute mode enable"]
            #[inline(always)]
            pub fn mme(&self) -> MME_R {
                MME_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn m0(&self) -> M0_R {
                M0_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Receiver wakeup method"]
            #[inline(always)]
            pub fn wake(&self) -> WAKE_R {
                WAKE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Parity control enable"]
            #[inline(always)]
            pub fn pce(&self) -> PCE_R {
                PCE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Parity selection"]
            #[inline(always)]
            pub fn ps(&self) -> PS_R {
                PS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PE interrupt enable"]
            #[inline(always)]
            pub fn peie(&self) -> PEIE_R {
                PEIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - interrupt enable"]
            #[inline(always)]
            pub fn txeie(&self) -> TXEIE_R {
                TXEIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - RXNE interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&self) -> RXNEIE_R {
                RXNEIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IDLE interrupt enable"]
            #[inline(always)]
            pub fn idleie(&self) -> IDLEIE_R {
                IDLEIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn te(&self) -> TE_R {
                TE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn re(&self) -> RE_R {
                RE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - USART enable in Stop mode"]
            #[inline(always)]
            pub fn uesm(&self) -> UESM_R {
                UESM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - USART enable"]
            #[inline(always)]
            pub fn ue(&self) -> UE_R {
                UE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - RXFIFO Full interrupt enable"]
            #[inline(always)]
            pub fn rxffie(&mut self) -> RXFFIE_W {
                RXFFIE_W { w: self }
            }
            #[doc = "Bit 30 - TXFIFO empty interrupt enable"]
            #[inline(always)]
            pub fn txfeie(&mut self) -> TXFEIE_W {
                TXFEIE_W { w: self }
            }
            #[doc = "Bit 29 - FIFO mode enable"]
            #[inline(always)]
            pub fn fifoen(&mut self) -> FIFOEN_W {
                FIFOEN_W { w: self }
            }
            #[doc = "Bit 28 - Word length"]
            #[inline(always)]
            pub fn m1(&mut self) -> M1_W {
                M1_W { w: self }
            }
            #[doc = "Bit 27 - End of Block interrupt enable"]
            #[inline(always)]
            pub fn eobie(&mut self) -> EOBIE_W {
                EOBIE_W { w: self }
            }
            #[doc = "Bit 26 - Receiver timeout interrupt enable"]
            #[inline(always)]
            pub fn rtoie(&mut self) -> RTOIE_W {
                RTOIE_W { w: self }
            }
            #[doc = "Bits 21:25 - DEAT"]
            #[inline(always)]
            pub fn deat(&mut self) -> DEAT_W {
                DEAT_W { w: self }
            }
            #[doc = "Bits 16:20 - DEDT"]
            #[inline(always)]
            pub fn dedt(&mut self) -> DEDT_W {
                DEDT_W { w: self }
            }
            #[doc = "Bit 15 - Oversampling mode"]
            #[inline(always)]
            pub fn over8(&mut self) -> OVER8_W {
                OVER8_W { w: self }
            }
            #[doc = "Bit 14 - Character match interrupt enable"]
            #[inline(always)]
            pub fn cmie(&mut self) -> CMIE_W {
                CMIE_W { w: self }
            }
            #[doc = "Bit 13 - Mute mode enable"]
            #[inline(always)]
            pub fn mme(&mut self) -> MME_W {
                MME_W { w: self }
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn m0(&mut self) -> M0_W {
                M0_W { w: self }
            }
            #[doc = "Bit 11 - Receiver wakeup method"]
            #[inline(always)]
            pub fn wake(&mut self) -> WAKE_W {
                WAKE_W { w: self }
            }
            #[doc = "Bit 10 - Parity control enable"]
            #[inline(always)]
            pub fn pce(&mut self) -> PCE_W {
                PCE_W { w: self }
            }
            #[doc = "Bit 9 - Parity selection"]
            #[inline(always)]
            pub fn ps(&mut self) -> PS_W {
                PS_W { w: self }
            }
            #[doc = "Bit 8 - PE interrupt enable"]
            #[inline(always)]
            pub fn peie(&mut self) -> PEIE_W {
                PEIE_W { w: self }
            }
            #[doc = "Bit 7 - interrupt enable"]
            #[inline(always)]
            pub fn txeie(&mut self) -> TXEIE_W {
                TXEIE_W { w: self }
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 5 - RXNE interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&mut self) -> RXNEIE_W {
                RXNEIE_W { w: self }
            }
            #[doc = "Bit 4 - IDLE interrupt enable"]
            #[inline(always)]
            pub fn idleie(&mut self) -> IDLEIE_W {
                IDLEIE_W { w: self }
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn te(&mut self) -> TE_W {
                TE_W { w: self }
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn re(&mut self) -> RE_W {
                RE_W { w: self }
            }
            #[doc = "Bit 1 - USART enable in Stop mode"]
            #[inline(always)]
            pub fn uesm(&mut self) -> UESM_W {
                UESM_W { w: self }
            }
            #[doc = "Bit 0 - USART enable"]
            #[inline(always)]
            pub fn ue(&mut self) -> UE_W {
                UE_W { w: self }
            }
        }
    }
    #[doc = "Control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "Control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADD4_7`"]
        pub type ADD4_7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADD4_7`"]
        pub struct ADD4_7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD4_7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `ADD0_3`"]
        pub type ADD0_3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADD0_3`"]
        pub struct ADD0_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD0_3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `RTOEN`"]
        pub type RTOEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTOEN`"]
        pub struct RTOEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTOEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `ABRMOD`"]
        pub type ABRMOD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ABRMOD`"]
        pub struct ABRMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ABRMOD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 21)) | (((value as u32) & 0x03) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `ABREN`"]
        pub type ABREN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ABREN`"]
        pub struct ABREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ABREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `MSBFIRST`"]
        pub type MSBFIRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSBFIRST`"]
        pub struct MSBFIRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSBFIRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `TAINV`"]
        pub type TAINV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAINV`"]
        pub struct TAINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAINV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `TXINV`"]
        pub type TXINV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXINV`"]
        pub struct TXINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXINV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `RXINV`"]
        pub type RXINV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXINV`"]
        pub struct RXINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXINV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SWAP`"]
        pub type SWAP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWAP`"]
        pub struct SWAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `LINEN`"]
        pub type LINEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LINEN`"]
        pub struct LINEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LINEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `STOP`"]
        pub type STOP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `STOP`"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CLKEN`"]
        pub type CLKEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLKEN`"]
        pub struct CLKEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CPOL`"]
        pub type CPOL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPOL`"]
        pub struct CPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CPHA`"]
        pub type CPHA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPHA`"]
        pub struct CPHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPHA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `LBCL`"]
        pub type LBCL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LBCL`"]
        pub struct LBCL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBCL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `LBDIE`"]
        pub type LBDIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LBDIE`"]
        pub struct LBDIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBDIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `LBDL`"]
        pub type LBDL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LBDL`"]
        pub struct LBDL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBDL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `ADDM7`"]
        pub type ADDM7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADDM7`"]
        pub struct ADDM7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDM7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DIS_NSS`"]
        pub type DIS_NSS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIS_NSS`"]
        pub struct DIS_NSS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIS_NSS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `SLVEN`"]
        pub type SLVEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SLVEN`"]
        pub struct SLVEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SLVEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Address of the USART node"]
            #[inline(always)]
            pub fn add4_7(&self) -> ADD4_7_R {
                ADD4_7_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Address of the USART node"]
            #[inline(always)]
            pub fn add0_3(&self) -> ADD0_3_R {
                ADD0_3_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bit 23 - Receiver timeout enable"]
            #[inline(always)]
            pub fn rtoen(&self) -> RTOEN_R {
                RTOEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bits 21:22 - Auto baud rate mode"]
            #[inline(always)]
            pub fn abrmod(&self) -> ABRMOD_R {
                ABRMOD_R::new(((self.bits >> 21) & 0x03) as u8)
            }
            #[doc = "Bit 20 - Auto baud rate enable"]
            #[inline(always)]
            pub fn abren(&self) -> ABREN_R {
                ABREN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Most significant bit first"]
            #[inline(always)]
            pub fn msbfirst(&self) -> MSBFIRST_R {
                MSBFIRST_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Binary data inversion"]
            #[inline(always)]
            pub fn tainv(&self) -> TAINV_R {
                TAINV_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - TX pin active level inversion"]
            #[inline(always)]
            pub fn txinv(&self) -> TXINV_R {
                TXINV_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RX pin active level inversion"]
            #[inline(always)]
            pub fn rxinv(&self) -> RXINV_R {
                RXINV_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Swap TX/RX pins"]
            #[inline(always)]
            pub fn swap(&self) -> SWAP_R {
                SWAP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            pub fn linen(&self) -> LINEN_R {
                LINEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - STOP bits"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 11 - Clock enable"]
            #[inline(always)]
            pub fn clken(&self) -> CLKEN_R {
                CLKEN_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&self) -> CPOL_R {
                CPOL_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&self) -> CPHA_R {
                CPHA_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Last bit clock pulse"]
            #[inline(always)]
            pub fn lbcl(&self) -> LBCL_R {
                LBCL_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            pub fn lbdie(&self) -> LBDIE_R {
                LBDIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - LIN break detection length"]
            #[inline(always)]
            pub fn lbdl(&self) -> LBDL_R {
                LBDL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - 7-bit Address Detection/4-bit Address Detection"]
            #[inline(always)]
            pub fn addm7(&self) -> ADDM7_R {
                ADDM7_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - When the DSI_NSS bit is set, the NSS pin input will be ignored"]
            #[inline(always)]
            pub fn dis_nss(&self) -> DIS_NSS_R {
                DIS_NSS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Synchronous Slave mode enable"]
            #[inline(always)]
            pub fn slven(&self) -> SLVEN_R {
                SLVEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Address of the USART node"]
            #[inline(always)]
            pub fn add4_7(&mut self) -> ADD4_7_W {
                ADD4_7_W { w: self }
            }
            #[doc = "Bits 24:27 - Address of the USART node"]
            #[inline(always)]
            pub fn add0_3(&mut self) -> ADD0_3_W {
                ADD0_3_W { w: self }
            }
            #[doc = "Bit 23 - Receiver timeout enable"]
            #[inline(always)]
            pub fn rtoen(&mut self) -> RTOEN_W {
                RTOEN_W { w: self }
            }
            #[doc = "Bits 21:22 - Auto baud rate mode"]
            #[inline(always)]
            pub fn abrmod(&mut self) -> ABRMOD_W {
                ABRMOD_W { w: self }
            }
            #[doc = "Bit 20 - Auto baud rate enable"]
            #[inline(always)]
            pub fn abren(&mut self) -> ABREN_W {
                ABREN_W { w: self }
            }
            #[doc = "Bit 19 - Most significant bit first"]
            #[inline(always)]
            pub fn msbfirst(&mut self) -> MSBFIRST_W {
                MSBFIRST_W { w: self }
            }
            #[doc = "Bit 18 - Binary data inversion"]
            #[inline(always)]
            pub fn tainv(&mut self) -> TAINV_W {
                TAINV_W { w: self }
            }
            #[doc = "Bit 17 - TX pin active level inversion"]
            #[inline(always)]
            pub fn txinv(&mut self) -> TXINV_W {
                TXINV_W { w: self }
            }
            #[doc = "Bit 16 - RX pin active level inversion"]
            #[inline(always)]
            pub fn rxinv(&mut self) -> RXINV_W {
                RXINV_W { w: self }
            }
            #[doc = "Bit 15 - Swap TX/RX pins"]
            #[inline(always)]
            pub fn swap(&mut self) -> SWAP_W {
                SWAP_W { w: self }
            }
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            pub fn linen(&mut self) -> LINEN_W {
                LINEN_W { w: self }
            }
            #[doc = "Bits 12:13 - STOP bits"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 11 - Clock enable"]
            #[inline(always)]
            pub fn clken(&mut self) -> CLKEN_W {
                CLKEN_W { w: self }
            }
            #[doc = "Bit 10 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&mut self) -> CPOL_W {
                CPOL_W { w: self }
            }
            #[doc = "Bit 9 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&mut self) -> CPHA_W {
                CPHA_W { w: self }
            }
            #[doc = "Bit 8 - Last bit clock pulse"]
            #[inline(always)]
            pub fn lbcl(&mut self) -> LBCL_W {
                LBCL_W { w: self }
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            pub fn lbdie(&mut self) -> LBDIE_W {
                LBDIE_W { w: self }
            }
            #[doc = "Bit 5 - LIN break detection length"]
            #[inline(always)]
            pub fn lbdl(&mut self) -> LBDL_W {
                LBDL_W { w: self }
            }
            #[doc = "Bit 4 - 7-bit Address Detection/4-bit Address Detection"]
            #[inline(always)]
            pub fn addm7(&mut self) -> ADDM7_W {
                ADDM7_W { w: self }
            }
            #[doc = "Bit 3 - When the DSI_NSS bit is set, the NSS pin input will be ignored"]
            #[inline(always)]
            pub fn dis_nss(&mut self) -> DIS_NSS_W {
                DIS_NSS_W { w: self }
            }
            #[doc = "Bit 0 - Synchronous Slave mode enable"]
            #[inline(always)]
            pub fn slven(&mut self) -> SLVEN_W {
                SLVEN_W { w: self }
            }
        }
    }
    #[doc = "Control register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr3](cr3) module"]
    pub type CR3 = crate::Reg<u32, _CR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR3;
    #[doc = "`read()` method returns [cr3::R](cr3::R) reader structure"]
    impl crate::Readable for CR3 {}
    #[doc = "`write(|w| ..)` method takes [cr3::W](cr3::W) writer structure"]
    impl crate::Writable for CR3 {}
    #[doc = "Control register 3"]
    pub mod cr3 {
        #[doc = "Reader of register CR3"]
        pub type R = crate::R<u32, super::CR3>;
        #[doc = "Writer for register CR3"]
        pub type W = crate::W<u32, super::CR3>;
        #[doc = "Register CR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TXFTCFG`"]
        pub type TXFTCFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TXFTCFG`"]
        pub struct TXFTCFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFTCFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 29)) | (((value as u32) & 0x07) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `RXFTIE`"]
        pub type RXFTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXFTIE`"]
        pub struct RXFTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `RXFTCFG`"]
        pub type RXFTCFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RXFTCFG`"]
        pub struct RXFTCFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFTCFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 25)) | (((value as u32) & 0x07) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `TCBGTIE`"]
        pub type TCBGTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCBGTIE`"]
        pub struct TCBGTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCBGTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `TXFTIE`"]
        pub type TXFTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXFTIE`"]
        pub struct TXFTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `WUFIE`"]
        pub type WUFIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUFIE`"]
        pub struct WUFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUFIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `WUS`"]
        pub type WUS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WUS`"]
        pub struct WUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `SCARCNT`"]
        pub type SCARCNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCARCNT`"]
        pub struct SCARCNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCARCNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 17)) | (((value as u32) & 0x07) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `DEP`"]
        pub type DEP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DEP`"]
        pub struct DEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `DEM`"]
        pub type DEM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DEM`"]
        pub struct DEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `DDRE`"]
        pub type DDRE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DDRE`"]
        pub struct DDRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DDRE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `OVRDIS`"]
        pub type OVRDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVRDIS`"]
        pub struct OVRDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVRDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `ONEBIT`"]
        pub type ONEBIT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ONEBIT`"]
        pub struct ONEBIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ONEBIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CTSIE`"]
        pub type CTSIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTSIE`"]
        pub struct CTSIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CTSE`"]
        pub type CTSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTSE`"]
        pub struct CTSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `RTSE`"]
        pub type RTSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTSE`"]
        pub struct RTSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAT`"]
        pub type DMAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAT`"]
        pub struct DMAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `DMAR`"]
        pub type DMAR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAR`"]
        pub struct DMAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `SCEN`"]
        pub type SCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCEN`"]
        pub struct SCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `NACK`"]
        pub type NACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NACK`"]
        pub struct NACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `HDSEL`"]
        pub type HDSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HDSEL`"]
        pub struct HDSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `IRLP`"]
        pub type IRLP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IRLP`"]
        pub struct IRLP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IRLP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `IREN`"]
        pub type IREN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IREN`"]
        pub struct IREN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IREN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `EIE`"]
        pub type EIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EIE`"]
        pub struct EIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 29:31 - TXFIFO threshold configuration"]
            #[inline(always)]
            pub fn txftcfg(&self) -> TXFTCFG_R {
                TXFTCFG_R::new(((self.bits >> 29) & 0x07) as u8)
            }
            #[doc = "Bit 28 - RXFIFO threshold interrupt enable"]
            #[inline(always)]
            pub fn rxftie(&self) -> RXFTIE_R {
                RXFTIE_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bits 25:27 - Receive FIFO threshold configuration"]
            #[inline(always)]
            pub fn rxftcfg(&self) -> RXFTCFG_R {
                RXFTCFG_R::new(((self.bits >> 25) & 0x07) as u8)
            }
            #[doc = "Bit 24 - Tr Complete before guard time, interrupt enable"]
            #[inline(always)]
            pub fn tcbgtie(&self) -> TCBGTIE_R {
                TCBGTIE_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - threshold interrupt enable"]
            #[inline(always)]
            pub fn txftie(&self) -> TXFTIE_R {
                TXFTIE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Wakeup from Stop mode interrupt enable"]
            #[inline(always)]
            pub fn wufie(&self) -> WUFIE_R {
                WUFIE_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Wakeup from Stop mode interrupt flag selection"]
            #[inline(always)]
            pub fn wus(&self) -> WUS_R {
                WUS_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 17:19 - Smartcard auto-retry count"]
            #[inline(always)]
            pub fn scarcnt(&self) -> SCARCNT_R {
                SCARCNT_R::new(((self.bits >> 17) & 0x07) as u8)
            }
            #[doc = "Bit 15 - Driver enable polarity selection"]
            #[inline(always)]
            pub fn dep(&self) -> DEP_R {
                DEP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Driver enable mode"]
            #[inline(always)]
            pub fn dem(&self) -> DEM_R {
                DEM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMA Disable on Reception Error"]
            #[inline(always)]
            pub fn ddre(&self) -> DDRE_R {
                DDRE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Overrun Disable"]
            #[inline(always)]
            pub fn ovrdis(&self) -> OVRDIS_R {
                OVRDIS_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - One sample bit method enable"]
            #[inline(always)]
            pub fn onebit(&self) -> ONEBIT_R {
                ONEBIT_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&self) -> CTSIE_R {
                CTSIE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctse(&self) -> CTSE_R {
                CTSE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtse(&self) -> RTSE_R {
                RTSE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DMA enable transmitter"]
            #[inline(always)]
            pub fn dmat(&self) -> DMAT_R {
                DMAT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - DMA enable receiver"]
            #[inline(always)]
            pub fn dmar(&self) -> DMAR_R {
                DMAR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Smartcard mode enable"]
            #[inline(always)]
            pub fn scen(&self) -> SCEN_R {
                SCEN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Smartcard NACK enable"]
            #[inline(always)]
            pub fn nack(&self) -> NACK_R {
                NACK_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hdsel(&self) -> HDSEL_R {
                HDSEL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Ir low-power"]
            #[inline(always)]
            pub fn irlp(&self) -> IRLP_R {
                IRLP_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Ir mode enable"]
            #[inline(always)]
            pub fn iren(&self) -> IREN_R {
                IREN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn eie(&self) -> EIE_R {
                EIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 29:31 - TXFIFO threshold configuration"]
            #[inline(always)]
            pub fn txftcfg(&mut self) -> TXFTCFG_W {
                TXFTCFG_W { w: self }
            }
            #[doc = "Bit 28 - RXFIFO threshold interrupt enable"]
            #[inline(always)]
            pub fn rxftie(&mut self) -> RXFTIE_W {
                RXFTIE_W { w: self }
            }
            #[doc = "Bits 25:27 - Receive FIFO threshold configuration"]
            #[inline(always)]
            pub fn rxftcfg(&mut self) -> RXFTCFG_W {
                RXFTCFG_W { w: self }
            }
            #[doc = "Bit 24 - Tr Complete before guard time, interrupt enable"]
            #[inline(always)]
            pub fn tcbgtie(&mut self) -> TCBGTIE_W {
                TCBGTIE_W { w: self }
            }
            #[doc = "Bit 23 - threshold interrupt enable"]
            #[inline(always)]
            pub fn txftie(&mut self) -> TXFTIE_W {
                TXFTIE_W { w: self }
            }
            #[doc = "Bit 22 - Wakeup from Stop mode interrupt enable"]
            #[inline(always)]
            pub fn wufie(&mut self) -> WUFIE_W {
                WUFIE_W { w: self }
            }
            #[doc = "Bits 20:21 - Wakeup from Stop mode interrupt flag selection"]
            #[inline(always)]
            pub fn wus(&mut self) -> WUS_W {
                WUS_W { w: self }
            }
            #[doc = "Bits 17:19 - Smartcard auto-retry count"]
            #[inline(always)]
            pub fn scarcnt(&mut self) -> SCARCNT_W {
                SCARCNT_W { w: self }
            }
            #[doc = "Bit 15 - Driver enable polarity selection"]
            #[inline(always)]
            pub fn dep(&mut self) -> DEP_W {
                DEP_W { w: self }
            }
            #[doc = "Bit 14 - Driver enable mode"]
            #[inline(always)]
            pub fn dem(&mut self) -> DEM_W {
                DEM_W { w: self }
            }
            #[doc = "Bit 13 - DMA Disable on Reception Error"]
            #[inline(always)]
            pub fn ddre(&mut self) -> DDRE_W {
                DDRE_W { w: self }
            }
            #[doc = "Bit 12 - Overrun Disable"]
            #[inline(always)]
            pub fn ovrdis(&mut self) -> OVRDIS_W {
                OVRDIS_W { w: self }
            }
            #[doc = "Bit 11 - One sample bit method enable"]
            #[inline(always)]
            pub fn onebit(&mut self) -> ONEBIT_W {
                ONEBIT_W { w: self }
            }
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&mut self) -> CTSIE_W {
                CTSIE_W { w: self }
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctse(&mut self) -> CTSE_W {
                CTSE_W { w: self }
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtse(&mut self) -> RTSE_W {
                RTSE_W { w: self }
            }
            #[doc = "Bit 7 - DMA enable transmitter"]
            #[inline(always)]
            pub fn dmat(&mut self) -> DMAT_W {
                DMAT_W { w: self }
            }
            #[doc = "Bit 6 - DMA enable receiver"]
            #[inline(always)]
            pub fn dmar(&mut self) -> DMAR_W {
                DMAR_W { w: self }
            }
            #[doc = "Bit 5 - Smartcard mode enable"]
            #[inline(always)]
            pub fn scen(&mut self) -> SCEN_W {
                SCEN_W { w: self }
            }
            #[doc = "Bit 4 - Smartcard NACK enable"]
            #[inline(always)]
            pub fn nack(&mut self) -> NACK_W {
                NACK_W { w: self }
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hdsel(&mut self) -> HDSEL_W {
                HDSEL_W { w: self }
            }
            #[doc = "Bit 2 - Ir low-power"]
            #[inline(always)]
            pub fn irlp(&mut self) -> IRLP_W {
                IRLP_W { w: self }
            }
            #[doc = "Bit 1 - Ir mode enable"]
            #[inline(always)]
            pub fn iren(&mut self) -> IREN_W {
                IREN_W { w: self }
            }
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn eie(&mut self) -> EIE_W {
                EIE_W { w: self }
            }
        }
    }
    #[doc = "Baud rate register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [brr](brr) module"]
    pub type BRR = crate::Reg<u32, _BRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BRR;
    #[doc = "`read()` method returns [brr::R](brr::R) reader structure"]
    impl crate::Readable for BRR {}
    #[doc = "`write(|w| ..)` method takes [brr::W](brr::W) writer structure"]
    impl crate::Writable for BRR {}
    #[doc = "Baud rate register"]
    pub mod brr {
        #[doc = "Reader of register BRR"]
        pub type R = crate::R<u32, super::BRR>;
        #[doc = "Writer for register BRR"]
        pub type W = crate::W<u32, super::BRR>;
        #[doc = "Register BRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BRR_4_15`"]
        pub type BRR_4_15_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `BRR_4_15`"]
        pub struct BRR_4_15_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BRR_4_15_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 4)) | (((value as u32) & 0x0fff) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `BRR_0_3`"]
        pub type BRR_0_3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BRR_0_3`"]
        pub struct BRR_0_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BRR_0_3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:15 - BRR_4_15"]
            #[inline(always)]
            pub fn brr_4_15(&self) -> BRR_4_15_R {
                BRR_4_15_R::new(((self.bits >> 4) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:3 - BRR_0_3"]
            #[inline(always)]
            pub fn brr_0_3(&self) -> BRR_0_3_R {
                BRR_0_3_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:15 - BRR_4_15"]
            #[inline(always)]
            pub fn brr_4_15(&mut self) -> BRR_4_15_W {
                BRR_4_15_W { w: self }
            }
            #[doc = "Bits 0:3 - BRR_0_3"]
            #[inline(always)]
            pub fn brr_0_3(&mut self) -> BRR_0_3_W {
                BRR_0_3_W { w: self }
            }
        }
    }
    #[doc = "Guard time and prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [gtpr](gtpr) module"]
    pub type GTPR = crate::Reg<u32, _GTPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _GTPR;
    #[doc = "`read()` method returns [gtpr::R](gtpr::R) reader structure"]
    impl crate::Readable for GTPR {}
    #[doc = "`write(|w| ..)` method takes [gtpr::W](gtpr::W) writer structure"]
    impl crate::Writable for GTPR {}
    #[doc = "Guard time and prescaler register"]
    pub mod gtpr {
        #[doc = "Reader of register GTPR"]
        pub type R = crate::R<u32, super::GTPR>;
        #[doc = "Writer for register GTPR"]
        pub type W = crate::W<u32, super::GTPR>;
        #[doc = "Register GTPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::GTPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `GT`"]
        pub type GT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `GT`"]
        pub struct GT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:15 - Guard time value"]
            #[inline(always)]
            pub fn gt(&self) -> GT_R {
                GT_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:15 - Guard time value"]
            #[inline(always)]
            pub fn gt(&mut self) -> GT_W {
                GT_W { w: self }
            }
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "Receiver timeout register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rtor](rtor) module"]
    pub type RTOR = crate::Reg<u32, _RTOR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RTOR;
    #[doc = "`read()` method returns [rtor::R](rtor::R) reader structure"]
    impl crate::Readable for RTOR {}
    #[doc = "`write(|w| ..)` method takes [rtor::W](rtor::W) writer structure"]
    impl crate::Writable for RTOR {}
    #[doc = "Receiver timeout register"]
    pub mod rtor {
        #[doc = "Reader of register RTOR"]
        pub type R = crate::R<u32, super::RTOR>;
        #[doc = "Writer for register RTOR"]
        pub type W = crate::W<u32, super::RTOR>;
        #[doc = "Register RTOR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RTOR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BLEN`"]
        pub type BLEN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BLEN`"]
        pub struct BLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 24)) | (((value as u32) & 0xff) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `RTO`"]
        pub type RTO_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `RTO`"]
        pub struct RTO_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTO_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:31 - Block Length"]
            #[inline(always)]
            pub fn blen(&self) -> BLEN_R {
                BLEN_R::new(((self.bits >> 24) & 0xff) as u8)
            }
            #[doc = "Bits 0:23 - Receiver timeout value"]
            #[inline(always)]
            pub fn rto(&self) -> RTO_R {
                RTO_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 24:31 - Block Length"]
            #[inline(always)]
            pub fn blen(&mut self) -> BLEN_W {
                BLEN_W { w: self }
            }
            #[doc = "Bits 0:23 - Receiver timeout value"]
            #[inline(always)]
            pub fn rto(&mut self) -> RTO_W {
                RTO_W { w: self }
            }
        }
    }
    #[doc = "Request register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rqr](rqr) module"]
    pub type RQR = crate::Reg<u32, _RQR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RQR;
    #[doc = "`write(|w| ..)` method takes [rqr::W](rqr::W) writer structure"]
    impl crate::Writable for RQR {}
    #[doc = "Request register"]
    pub mod rqr {
        #[doc = "Writer for register RQR"]
        pub type W = crate::W<u32, super::RQR>;
        #[doc = "Register RQR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RQR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `TXFRQ`"]
        pub struct TXFRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `RXFRQ`"]
        pub struct RXFRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `MMRQ`"]
        pub struct MMRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `SBKRQ`"]
        pub struct SBKRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBKRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `ABRRQ`"]
        pub struct ABRRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ABRRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 4 - Transmit data flush request"]
            #[inline(always)]
            pub fn txfrq(&mut self) -> TXFRQ_W {
                TXFRQ_W { w: self }
            }
            #[doc = "Bit 3 - Receive data flush request"]
            #[inline(always)]
            pub fn rxfrq(&mut self) -> RXFRQ_W {
                RXFRQ_W { w: self }
            }
            #[doc = "Bit 2 - Mute mode request"]
            #[inline(always)]
            pub fn mmrq(&mut self) -> MMRQ_W {
                MMRQ_W { w: self }
            }
            #[doc = "Bit 1 - Send break request"]
            #[inline(always)]
            pub fn sbkrq(&mut self) -> SBKRQ_W {
                SBKRQ_W { w: self }
            }
            #[doc = "Bit 0 - Auto baud rate request"]
            #[inline(always)]
            pub fn abrrq(&mut self) -> ABRRQ_W {
                ABRRQ_W { w: self }
            }
        }
    }
    #[doc = "Interrupt & status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "Interrupt & status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Reader of field `TXFT`"]
        pub type TXFT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXFT`"]
        pub type RXFT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCBGT`"]
        pub type TCBGT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXFF`"]
        pub type RXFF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXFE`"]
        pub type TXFE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `REACK`"]
        pub type REACK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEACK`"]
        pub type TEACK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUF`"]
        pub type WUF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RWU`"]
        pub type RWU_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SBKF`"]
        pub type SBKF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CMF`"]
        pub type CMF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ABRF`"]
        pub type ABRF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ABRE`"]
        pub type ABRE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `UDR`"]
        pub type UDR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EOBF`"]
        pub type EOBF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTOF`"]
        pub type RTOF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CTS`"]
        pub type CTS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CTSIF`"]
        pub type CTSIF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `LBDF`"]
        pub type LBDF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXE`"]
        pub type TXE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TC`"]
        pub type TC_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXNE`"]
        pub type RXNE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDLE`"]
        pub type IDLE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ORE`"]
        pub type ORE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `NF`"]
        pub type NF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FE`"]
        pub type FE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PE`"]
        pub type PE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 27 - TXFIFO threshold flag"]
            #[inline(always)]
            pub fn txft(&self) -> TXFT_R {
                TXFT_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - RXFIFO threshold flag"]
            #[inline(always)]
            pub fn rxft(&self) -> RXFT_R {
                RXFT_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Transmission complete before guard time flag"]
            #[inline(always)]
            pub fn tcbgt(&self) -> TCBGT_R {
                TCBGT_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - RXFIFO Full"]
            #[inline(always)]
            pub fn rxff(&self) -> RXFF_R {
                RXFF_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - TXFIFO Empty"]
            #[inline(always)]
            pub fn txfe(&self) -> TXFE_R {
                TXFE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - REACK"]
            #[inline(always)]
            pub fn reack(&self) -> REACK_R {
                REACK_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - TEACK"]
            #[inline(always)]
            pub fn teack(&self) -> TEACK_R {
                TEACK_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - WUF"]
            #[inline(always)]
            pub fn wuf(&self) -> WUF_R {
                WUF_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - RWU"]
            #[inline(always)]
            pub fn rwu(&self) -> RWU_R {
                RWU_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - SBKF"]
            #[inline(always)]
            pub fn sbkf(&self) -> SBKF_R {
                SBKF_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - CMF"]
            #[inline(always)]
            pub fn cmf(&self) -> CMF_R {
                CMF_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - BUSY"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - ABRF"]
            #[inline(always)]
            pub fn abrf(&self) -> ABRF_R {
                ABRF_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - ABRE"]
            #[inline(always)]
            pub fn abre(&self) -> ABRE_R {
                ABRE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - SPI slave underrun error flag"]
            #[inline(always)]
            pub fn udr(&self) -> UDR_R {
                UDR_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - EOBF"]
            #[inline(always)]
            pub fn eobf(&self) -> EOBF_R {
                EOBF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - RTOF"]
            #[inline(always)]
            pub fn rtof(&self) -> RTOF_R {
                RTOF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CTS"]
            #[inline(always)]
            pub fn cts(&self) -> CTS_R {
                CTS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CTSIF"]
            #[inline(always)]
            pub fn ctsif(&self) -> CTSIF_R {
                CTSIF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - LBDF"]
            #[inline(always)]
            pub fn lbdf(&self) -> LBDF_R {
                LBDF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TXE"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TC"]
            #[inline(always)]
            pub fn tc(&self) -> TC_R {
                TC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - RXNE"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IDLE"]
            #[inline(always)]
            pub fn idle(&self) -> IDLE_R {
                IDLE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ORE"]
            #[inline(always)]
            pub fn ore(&self) -> ORE_R {
                ORE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - NF"]
            #[inline(always)]
            pub fn nf(&self) -> NF_R {
                NF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - FE"]
            #[inline(always)]
            pub fn fe(&self) -> FE_R {
                FE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - PE"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt flag clear register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "Interrupt flag clear register"]
    pub mod icr {
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `WUCF`"]
        pub struct WUCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Write proxy for field `CMCF`"]
        pub struct CMCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Write proxy for field `UDRCF`"]
        pub struct UDRCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDRCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `EOBCF`"]
        pub struct EOBCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOBCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `RTOCF`"]
        pub struct RTOCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTOCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTSCF`"]
        pub struct CTSCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `LBDCF`"]
        pub struct LBDCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LBDCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `TCBGTCF`"]
        pub struct TCBGTCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCBGTCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `TCCF`"]
        pub struct TCCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `TXFECF`"]
        pub struct TXFECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFECF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `IDLECF`"]
        pub struct IDLECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDLECF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `ORECF`"]
        pub struct ORECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ORECF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `NCF`"]
        pub struct NCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `FECF`"]
        pub struct FECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FECF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `PECF`"]
        pub struct PECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 20 - Wakeup from Stop mode clear flag"]
            #[inline(always)]
            pub fn wucf(&mut self) -> WUCF_W {
                WUCF_W { w: self }
            }
            #[doc = "Bit 17 - Character match clear flag"]
            #[inline(always)]
            pub fn cmcf(&mut self) -> CMCF_W {
                CMCF_W { w: self }
            }
            #[doc = "Bit 13 - SPI slave underrun clear flag"]
            #[inline(always)]
            pub fn udrcf(&mut self) -> UDRCF_W {
                UDRCF_W { w: self }
            }
            #[doc = "Bit 12 - End of block clear flag"]
            #[inline(always)]
            pub fn eobcf(&mut self) -> EOBCF_W {
                EOBCF_W { w: self }
            }
            #[doc = "Bit 11 - Receiver timeout clear flag"]
            #[inline(always)]
            pub fn rtocf(&mut self) -> RTOCF_W {
                RTOCF_W { w: self }
            }
            #[doc = "Bit 9 - CTS clear flag"]
            #[inline(always)]
            pub fn ctscf(&mut self) -> CTSCF_W {
                CTSCF_W { w: self }
            }
            #[doc = "Bit 8 - LIN break detection clear flag"]
            #[inline(always)]
            pub fn lbdcf(&mut self) -> LBDCF_W {
                LBDCF_W { w: self }
            }
            #[doc = "Bit 7 - Transmission complete before Guard time clear flag"]
            #[inline(always)]
            pub fn tcbgtcf(&mut self) -> TCBGTCF_W {
                TCBGTCF_W { w: self }
            }
            #[doc = "Bit 6 - Transmission complete clear flag"]
            #[inline(always)]
            pub fn tccf(&mut self) -> TCCF_W {
                TCCF_W { w: self }
            }
            #[doc = "Bit 5 - TXFIFO empty clear flag"]
            #[inline(always)]
            pub fn txfecf(&mut self) -> TXFECF_W {
                TXFECF_W { w: self }
            }
            #[doc = "Bit 4 - Idle line detected clear flag"]
            #[inline(always)]
            pub fn idlecf(&mut self) -> IDLECF_W {
                IDLECF_W { w: self }
            }
            #[doc = "Bit 3 - Overrun error clear flag"]
            #[inline(always)]
            pub fn orecf(&mut self) -> ORECF_W {
                ORECF_W { w: self }
            }
            #[doc = "Bit 2 - Noise detected clear flag"]
            #[inline(always)]
            pub fn ncf(&mut self) -> NCF_W {
                NCF_W { w: self }
            }
            #[doc = "Bit 1 - Framing error clear flag"]
            #[inline(always)]
            pub fn fecf(&mut self) -> FECF_W {
                FECF_W { w: self }
            }
            #[doc = "Bit 0 - Parity error clear flag"]
            #[inline(always)]
            pub fn pecf(&mut self) -> PECF_W {
                PECF_W { w: self }
            }
        }
    }
    #[doc = "Receive data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rdr](rdr) module"]
    pub type RDR = crate::Reg<u32, _RDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RDR;
    #[doc = "`read()` method returns [rdr::R](rdr::R) reader structure"]
    impl crate::Readable for RDR {}
    #[doc = "Receive data register"]
    pub mod rdr {
        #[doc = "Reader of register RDR"]
        pub type R = crate::R<u32, super::RDR>;
        #[doc = "Reader of field `RDR`"]
        pub type RDR_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:8 - Receive data value"]
            #[inline(always)]
            pub fn rdr(&self) -> RDR_R {
                RDR_R::new((self.bits & 0x01ff) as u16)
            }
        }
    }
    #[doc = "Transmit data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tdr](tdr) module"]
    pub type TDR = crate::Reg<u32, _TDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TDR;
    #[doc = "`read()` method returns [tdr::R](tdr::R) reader structure"]
    impl crate::Readable for TDR {}
    #[doc = "`write(|w| ..)` method takes [tdr::W](tdr::W) writer structure"]
    impl crate::Writable for TDR {}
    #[doc = "Transmit data register"]
    pub mod tdr {
        #[doc = "Reader of register TDR"]
        pub type R = crate::R<u32, super::TDR>;
        #[doc = "Writer for register TDR"]
        pub type W = crate::W<u32, super::TDR>;
        #[doc = "Register TDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TDR`"]
        pub type TDR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TDR`"]
        pub struct TDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | ((value as u32) & 0x01ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:8 - Transmit data value"]
            #[inline(always)]
            pub fn tdr(&self) -> TDR_R {
                TDR_R::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:8 - Transmit data value"]
            #[inline(always)]
            pub fn tdr(&mut self) -> TDR_W {
                TDR_W { w: self }
            }
        }
    }
    #[doc = "Prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [presc](presc) module"]
    pub type PRESC = crate::Reg<u32, _PRESC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PRESC;
    #[doc = "`read()` method returns [presc::R](presc::R) reader structure"]
    impl crate::Readable for PRESC {}
    #[doc = "`write(|w| ..)` method takes [presc::W](presc::W) writer structure"]
    impl crate::Writable for PRESC {}
    #[doc = "Prescaler register"]
    pub mod presc {
        #[doc = "Reader of register PRESC"]
        pub type R = crate::R<u32, super::PRESC>;
        #[doc = "Writer for register PRESC"]
        pub type W = crate::W<u32, super::PRESC>;
        #[doc = "Register PRESC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PRESC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PRESCALER`"]
        pub type PRESCALER_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PRESCALER`"]
        pub struct PRESCALER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRESCALER_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Clock prescaler"]
            #[inline(always)]
            pub fn prescaler(&self) -> PRESCALER_R {
                PRESCALER_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Clock prescaler"]
            #[inline(always)]
            pub fn prescaler(&mut self) -> PRESCALER_W {
                PRESCALER_W { w: self }
            }
        }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct USART2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART2 {}
impl USART2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1::RegisterBlock {
        0x4000_4400 as *const _
    }
}
impl Deref for USART2 {
    type Target = usart1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*USART2::ptr() }
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub struct SPI1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI1 {}
impl SPI1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        0x4001_3000 as *const _
    }
}
impl Deref for SPI1 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SPI1::ptr() }
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub mod spi1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - status register"]
        pub sr: SR,
        #[doc = "0x0c - data register"]
        pub dr: DR,
        #[doc = "0x10 - CRC polynomial register"]
        pub crcpr: CRCPR,
        #[doc = "0x14 - RX CRC register"]
        pub rxcrcr: RXCRCR,
        #[doc = "0x18 - TX CRC register"]
        pub txcrcr: TXCRCR,
        #[doc = "0x1c - configuration register"]
        pub i2scfgr: I2SCFGR,
        #[doc = "0x20 - prescaler register"]
        pub i2spr: I2SPR,
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BIDIMODE`"]
        pub type BIDIMODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIDIMODE`"]
        pub struct BIDIMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIDIMODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `BIDIOE`"]
        pub type BIDIOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIDIOE`"]
        pub struct BIDIOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIDIOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CRCEN`"]
        pub type CRCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCEN`"]
        pub struct CRCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CRCNEXT`"]
        pub type CRCNEXT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCNEXT`"]
        pub struct CRCNEXT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCNEXT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DFF`"]
        pub type DFF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DFF`"]
        pub struct DFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DFF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `RXONLY`"]
        pub type RXONLY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXONLY`"]
        pub struct RXONLY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXONLY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `SSM`"]
        pub type SSM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SSM`"]
        pub struct SSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `SSI`"]
        pub type SSI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SSI`"]
        pub struct SSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `LSBFIRST`"]
        pub type LSBFIRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSBFIRST`"]
        pub struct LSBFIRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSBFIRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `SPE`"]
        pub type SPE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SPE`"]
        pub struct SPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `BR`"]
        pub type BR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BR`"]
        pub struct BR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 3)) | (((value as u32) & 0x07) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `MSTR`"]
        pub type MSTR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSTR`"]
        pub struct MSTR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSTR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CPOL`"]
        pub type CPOL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPOL`"]
        pub struct CPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CPHA`"]
        pub type CPHA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CPHA`"]
        pub struct CPHA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CPHA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Bidirectional data mode enable"]
            #[inline(always)]
            pub fn bidimode(&self) -> BIDIMODE_R {
                BIDIMODE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Output enable in bidirectional mode"]
            #[inline(always)]
            pub fn bidioe(&self) -> BIDIOE_R {
                BIDIOE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Hardware CRC calculation enable"]
            #[inline(always)]
            pub fn crcen(&self) -> CRCEN_R {
                CRCEN_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - CRC transfer next"]
            #[inline(always)]
            pub fn crcnext(&self) -> CRCNEXT_R {
                CRCNEXT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Data frame format"]
            #[inline(always)]
            pub fn dff(&self) -> DFF_R {
                DFF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Receive only"]
            #[inline(always)]
            pub fn rxonly(&self) -> RXONLY_R {
                RXONLY_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Software slave management"]
            #[inline(always)]
            pub fn ssm(&self) -> SSM_R {
                SSM_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Internal slave select"]
            #[inline(always)]
            pub fn ssi(&self) -> SSI_R {
                SSI_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Frame format"]
            #[inline(always)]
            pub fn lsbfirst(&self) -> LSBFIRST_R {
                LSBFIRST_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - SPI enable"]
            #[inline(always)]
            pub fn spe(&self) -> SPE_R {
                SPE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bits 3:5 - Baud rate control"]
            #[inline(always)]
            pub fn br(&self) -> BR_R {
                BR_R::new(((self.bits >> 3) & 0x07) as u8)
            }
            #[doc = "Bit 2 - Master selection"]
            #[inline(always)]
            pub fn mstr(&self) -> MSTR_R {
                MSTR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&self) -> CPOL_R {
                CPOL_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&self) -> CPHA_R {
                CPHA_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Bidirectional data mode enable"]
            #[inline(always)]
            pub fn bidimode(&mut self) -> BIDIMODE_W {
                BIDIMODE_W { w: self }
            }
            #[doc = "Bit 14 - Output enable in bidirectional mode"]
            #[inline(always)]
            pub fn bidioe(&mut self) -> BIDIOE_W {
                BIDIOE_W { w: self }
            }
            #[doc = "Bit 13 - Hardware CRC calculation enable"]
            #[inline(always)]
            pub fn crcen(&mut self) -> CRCEN_W {
                CRCEN_W { w: self }
            }
            #[doc = "Bit 12 - CRC transfer next"]
            #[inline(always)]
            pub fn crcnext(&mut self) -> CRCNEXT_W {
                CRCNEXT_W { w: self }
            }
            #[doc = "Bit 11 - Data frame format"]
            #[inline(always)]
            pub fn dff(&mut self) -> DFF_W {
                DFF_W { w: self }
            }
            #[doc = "Bit 10 - Receive only"]
            #[inline(always)]
            pub fn rxonly(&mut self) -> RXONLY_W {
                RXONLY_W { w: self }
            }
            #[doc = "Bit 9 - Software slave management"]
            #[inline(always)]
            pub fn ssm(&mut self) -> SSM_W {
                SSM_W { w: self }
            }
            #[doc = "Bit 8 - Internal slave select"]
            #[inline(always)]
            pub fn ssi(&mut self) -> SSI_W {
                SSI_W { w: self }
            }
            #[doc = "Bit 7 - Frame format"]
            #[inline(always)]
            pub fn lsbfirst(&mut self) -> LSBFIRST_W {
                LSBFIRST_W { w: self }
            }
            #[doc = "Bit 6 - SPI enable"]
            #[inline(always)]
            pub fn spe(&mut self) -> SPE_W {
                SPE_W { w: self }
            }
            #[doc = "Bits 3:5 - Baud rate control"]
            #[inline(always)]
            pub fn br(&mut self) -> BR_W {
                BR_W { w: self }
            }
            #[doc = "Bit 2 - Master selection"]
            #[inline(always)]
            pub fn mstr(&mut self) -> MSTR_W {
                MSTR_W { w: self }
            }
            #[doc = "Bit 1 - Clock polarity"]
            #[inline(always)]
            pub fn cpol(&mut self) -> CPOL_W {
                CPOL_W { w: self }
            }
            #[doc = "Bit 0 - Clock phase"]
            #[inline(always)]
            pub fn cpha(&mut self) -> CPHA_W {
                CPHA_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RXDMAEN`"]
        pub type RXDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXDMAEN`"]
        pub struct RXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TXDMAEN`"]
        pub type TXDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXDMAEN`"]
        pub struct TXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `SSOE`"]
        pub type SSOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SSOE`"]
        pub struct SSOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SSOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `NSSP`"]
        pub type NSSP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NSSP`"]
        pub struct NSSP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NSSP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `FRF`"]
        pub type FRF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FRF`"]
        pub struct FRF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ERRIE`"]
        pub type ERRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ERRIE`"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `RXNEIE`"]
        pub type RXNEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXNEIE`"]
        pub struct RXNEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `TXEIE`"]
        pub type TXEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXEIE`"]
        pub struct TXEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `DS`"]
        pub type DS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DS`"]
        pub struct DS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `FRXTH`"]
        pub type FRXTH_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FRXTH`"]
        pub struct FRXTH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FRXTH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `LDMA_RX`"]
        pub type LDMA_RX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LDMA_RX`"]
        pub struct LDMA_RX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LDMA_RX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `LDMA_TX`"]
        pub type LDMA_TX_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LDMA_TX`"]
        pub struct LDMA_TX_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LDMA_TX_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Rx buffer DMA enable"]
            #[inline(always)]
            pub fn rxdmaen(&self) -> RXDMAEN_R {
                RXDMAEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Tx buffer DMA enable"]
            #[inline(always)]
            pub fn txdmaen(&self) -> TXDMAEN_R {
                TXDMAEN_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - SS output enable"]
            #[inline(always)]
            pub fn ssoe(&self) -> SSOE_R {
                SSOE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - NSS pulse management"]
            #[inline(always)]
            pub fn nssp(&self) -> NSSP_R {
                NSSP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Frame format"]
            #[inline(always)]
            pub fn frf(&self) -> FRF_R {
                FRF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - RX buffer not empty interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&self) -> RXNEIE_R {
                RXNEIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Tx buffer empty interrupt enable"]
            #[inline(always)]
            pub fn txeie(&self) -> TXEIE_R {
                TXEIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Data size"]
            #[inline(always)]
            pub fn ds(&self) -> DS_R {
                DS_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 12 - FIFO reception threshold"]
            #[inline(always)]
            pub fn frxth(&self) -> FRXTH_R {
                FRXTH_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Last DMA transfer for reception"]
            #[inline(always)]
            pub fn ldma_rx(&self) -> LDMA_RX_R {
                LDMA_RX_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Last DMA transfer for transmission"]
            #[inline(always)]
            pub fn ldma_tx(&self) -> LDMA_TX_R {
                LDMA_TX_R::new(((self.bits >> 14) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rx buffer DMA enable"]
            #[inline(always)]
            pub fn rxdmaen(&mut self) -> RXDMAEN_W {
                RXDMAEN_W { w: self }
            }
            #[doc = "Bit 1 - Tx buffer DMA enable"]
            #[inline(always)]
            pub fn txdmaen(&mut self) -> TXDMAEN_W {
                TXDMAEN_W { w: self }
            }
            #[doc = "Bit 2 - SS output enable"]
            #[inline(always)]
            pub fn ssoe(&mut self) -> SSOE_W {
                SSOE_W { w: self }
            }
            #[doc = "Bit 3 - NSS pulse management"]
            #[inline(always)]
            pub fn nssp(&mut self) -> NSSP_W {
                NSSP_W { w: self }
            }
            #[doc = "Bit 4 - Frame format"]
            #[inline(always)]
            pub fn frf(&mut self) -> FRF_W {
                FRF_W { w: self }
            }
            #[doc = "Bit 5 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bit 6 - RX buffer not empty interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&mut self) -> RXNEIE_W {
                RXNEIE_W { w: self }
            }
            #[doc = "Bit 7 - Tx buffer empty interrupt enable"]
            #[inline(always)]
            pub fn txeie(&mut self) -> TXEIE_W {
                TXEIE_W { w: self }
            }
            #[doc = "Bits 8:11 - Data size"]
            #[inline(always)]
            pub fn ds(&mut self) -> DS_W {
                DS_W { w: self }
            }
            #[doc = "Bit 12 - FIFO reception threshold"]
            #[inline(always)]
            pub fn frxth(&mut self) -> FRXTH_W {
                FRXTH_W { w: self }
            }
            #[doc = "Bit 13 - Last DMA transfer for reception"]
            #[inline(always)]
            pub fn ldma_rx(&mut self) -> LDMA_RX_W {
                LDMA_RX_W { w: self }
            }
            #[doc = "Bit 14 - Last DMA transfer for transmission"]
            #[inline(always)]
            pub fn ldma_tx(&mut self) -> LDMA_TX_W {
                LDMA_TX_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0x02"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x02
            }
        }
        #[doc = "Reader of field `RXNE`"]
        pub type RXNE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXE`"]
        pub type TXE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CHSIDE`"]
        pub type CHSIDE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `UDR`"]
        pub type UDR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CRCERR`"]
        pub type CRCERR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CRCERR`"]
        pub struct CRCERR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCERR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MODF`"]
        pub type MODF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `OVR`"]
        pub type OVR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BSY`"]
        pub type BSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TIFRFE`"]
        pub type TIFRFE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FRLVL`"]
        pub type FRLVL_R = crate::R<u8, u8>;
        #[doc = "Reader of field `FTLVL`"]
        pub type FTLVL_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bit 0 - Receive buffer not empty"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transmit buffer empty"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Channel side"]
            #[inline(always)]
            pub fn chside(&self) -> CHSIDE_R {
                CHSIDE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Underrun flag"]
            #[inline(always)]
            pub fn udr(&self) -> UDR_R {
                UDR_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - CRC error flag"]
            #[inline(always)]
            pub fn crcerr(&self) -> CRCERR_R {
                CRCERR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Mode fault"]
            #[inline(always)]
            pub fn modf(&self) -> MODF_R {
                MODF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Overrun flag"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Busy flag"]
            #[inline(always)]
            pub fn bsy(&self) -> BSY_R {
                BSY_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - TI frame format error"]
            #[inline(always)]
            pub fn tifrfe(&self) -> TIFRFE_R {
                TIFRFE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 9:10 - FIFO reception level"]
            #[inline(always)]
            pub fn frlvl(&self) -> FRLVL_R {
                FRLVL_R::new(((self.bits >> 9) & 0x03) as u8)
            }
            #[doc = "Bits 11:12 - FIFO transmission level"]
            #[inline(always)]
            pub fn ftlvl(&self) -> FTLVL_R {
                FTLVL_R::new(((self.bits >> 11) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 4 - CRC error flag"]
            #[inline(always)]
            pub fn crcerr(&mut self) -> CRCERR_W {
                CRCERR_W { w: self }
            }
        }
    }
    #[doc = "data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "data register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DR`"]
        pub type DR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DR`"]
        pub struct DR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Data register"]
            #[inline(always)]
            pub fn dr(&self) -> DR_R {
                DR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Data register"]
            #[inline(always)]
            pub fn dr(&mut self) -> DR_W {
                DR_W { w: self }
            }
        }
    }
    #[doc = "CRC polynomial register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [crcpr](crcpr) module"]
    pub type CRCPR = crate::Reg<u32, _CRCPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CRCPR;
    #[doc = "`read()` method returns [crcpr::R](crcpr::R) reader structure"]
    impl crate::Readable for CRCPR {}
    #[doc = "`write(|w| ..)` method takes [crcpr::W](crcpr::W) writer structure"]
    impl crate::Writable for CRCPR {}
    #[doc = "CRC polynomial register"]
    pub mod crcpr {
        #[doc = "Reader of register CRCPR"]
        pub type R = crate::R<u32, super::CRCPR>;
        #[doc = "Writer for register CRCPR"]
        pub type W = crate::W<u32, super::CRCPR>;
        #[doc = "Register CRCPR `reset()`'s with value 0x07"]
        impl crate::ResetValue for super::CRCPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x07
            }
        }
        #[doc = "Reader of field `CRCPOLY`"]
        pub type CRCPOLY_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CRCPOLY`"]
        pub struct CRCPOLY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CRCPOLY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - CRC polynomial register"]
            #[inline(always)]
            pub fn crcpoly(&self) -> CRCPOLY_R {
                CRCPOLY_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - CRC polynomial register"]
            #[inline(always)]
            pub fn crcpoly(&mut self) -> CRCPOLY_W {
                CRCPOLY_W { w: self }
            }
        }
    }
    #[doc = "RX CRC register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxcrcr](rxcrcr) module"]
    pub type RXCRCR = crate::Reg<u32, _RXCRCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RXCRCR;
    #[doc = "`read()` method returns [rxcrcr::R](rxcrcr::R) reader structure"]
    impl crate::Readable for RXCRCR {}
    #[doc = "RX CRC register"]
    pub mod rxcrcr {
        #[doc = "Reader of register RXCRCR"]
        pub type R = crate::R<u32, super::RXCRCR>;
        #[doc = "Reader of field `RxCRC`"]
        pub type RXCRC_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Rx CRC register"]
            #[inline(always)]
            pub fn rx_crc(&self) -> RXCRC_R {
                RXCRC_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "TX CRC register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txcrcr](txcrcr) module"]
    pub type TXCRCR = crate::Reg<u32, _TXCRCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TXCRCR;
    #[doc = "`read()` method returns [txcrcr::R](txcrcr::R) reader structure"]
    impl crate::Readable for TXCRCR {}
    #[doc = "TX CRC register"]
    pub mod txcrcr {
        #[doc = "Reader of register TXCRCR"]
        pub type R = crate::R<u32, super::TXCRCR>;
        #[doc = "Reader of field `TxCRC`"]
        pub type TXCRC_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Tx CRC register"]
            #[inline(always)]
            pub fn tx_crc(&self) -> TXCRC_R {
                TXCRC_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2scfgr](i2scfgr) module"]
    pub type I2SCFGR = crate::Reg<u32, _I2SCFGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SCFGR;
    #[doc = "`read()` method returns [i2scfgr::R](i2scfgr::R) reader structure"]
    impl crate::Readable for I2SCFGR {}
    #[doc = "`write(|w| ..)` method takes [i2scfgr::W](i2scfgr::W) writer structure"]
    impl crate::Writable for I2SCFGR {}
    #[doc = "configuration register"]
    pub mod i2scfgr {
        #[doc = "Reader of register I2SCFGR"]
        pub type R = crate::R<u32, super::I2SCFGR>;
        #[doc = "Writer for register I2SCFGR"]
        pub type W = crate::W<u32, super::I2SCFGR>;
        #[doc = "Register I2SCFGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SCFGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CHLEN`"]
        pub type CHLEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CHLEN`"]
        pub struct CHLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHLEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `DATLEN`"]
        pub type DATLEN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DATLEN`"]
        pub struct DATLEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DATLEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 1)) | (((value as u32) & 0x03) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CKPOL`"]
        pub type CKPOL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CKPOL`"]
        pub struct CKPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `I2SSTD`"]
        pub type I2SSTD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2SSTD`"]
        pub struct I2SSTD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SSTD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `PCMSYNC`"]
        pub type PCMSYNC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PCMSYNC`"]
        pub struct PCMSYNC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCMSYNC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `I2SCFG`"]
        pub type I2SCFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2SCFG`"]
        pub struct I2SCFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SCFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SE2`"]
        pub type SE2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SE2`"]
        pub struct SE2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SE2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `I2SMOD`"]
        pub type I2SMOD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2SMOD`"]
        pub struct I2SMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SMOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Channel length (number of bits per audio channel)"]
            #[inline(always)]
            pub fn chlen(&self) -> CHLEN_R {
                CHLEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bits 1:2 - Data length to be transferred"]
            #[inline(always)]
            pub fn datlen(&self) -> DATLEN_R {
                DATLEN_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 3 - Inactive state clock polarity"]
            #[inline(always)]
            pub fn ckpol(&self) -> CKPOL_R {
                CKPOL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:5 - standard selection"]
            #[inline(always)]
            pub fn i2sstd(&self) -> I2SSTD_R {
                I2SSTD_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bit 7 - PCM frame synchronization"]
            #[inline(always)]
            pub fn pcmsync(&self) -> PCMSYNC_R {
                PCMSYNC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - I2S configuration mode"]
            #[inline(always)]
            pub fn i2scfg(&self) -> I2SCFG_R {
                I2SCFG_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 10 - I2S enable"]
            #[inline(always)]
            pub fn se2(&self) -> SE2_R {
                SE2_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - I2S mode selection"]
            #[inline(always)]
            pub fn i2smod(&self) -> I2SMOD_R {
                I2SMOD_R::new(((self.bits >> 11) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel length (number of bits per audio channel)"]
            #[inline(always)]
            pub fn chlen(&mut self) -> CHLEN_W {
                CHLEN_W { w: self }
            }
            #[doc = "Bits 1:2 - Data length to be transferred"]
            #[inline(always)]
            pub fn datlen(&mut self) -> DATLEN_W {
                DATLEN_W { w: self }
            }
            #[doc = "Bit 3 - Inactive state clock polarity"]
            #[inline(always)]
            pub fn ckpol(&mut self) -> CKPOL_W {
                CKPOL_W { w: self }
            }
            #[doc = "Bits 4:5 - standard selection"]
            #[inline(always)]
            pub fn i2sstd(&mut self) -> I2SSTD_W {
                I2SSTD_W { w: self }
            }
            #[doc = "Bit 7 - PCM frame synchronization"]
            #[inline(always)]
            pub fn pcmsync(&mut self) -> PCMSYNC_W {
                PCMSYNC_W { w: self }
            }
            #[doc = "Bits 8:9 - I2S configuration mode"]
            #[inline(always)]
            pub fn i2scfg(&mut self) -> I2SCFG_W {
                I2SCFG_W { w: self }
            }
            #[doc = "Bit 10 - I2S enable"]
            #[inline(always)]
            pub fn se2(&mut self) -> SE2_W {
                SE2_W { w: self }
            }
            #[doc = "Bit 11 - I2S mode selection"]
            #[inline(always)]
            pub fn i2smod(&mut self) -> I2SMOD_W {
                I2SMOD_W { w: self }
            }
        }
    }
    #[doc = "prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2spr](i2spr) module"]
    pub type I2SPR = crate::Reg<u32, _I2SPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _I2SPR;
    #[doc = "`read()` method returns [i2spr::R](i2spr::R) reader structure"]
    impl crate::Readable for I2SPR {}
    #[doc = "`write(|w| ..)` method takes [i2spr::W](i2spr::W) writer structure"]
    impl crate::Writable for I2SPR {}
    #[doc = "prescaler register"]
    pub mod i2spr {
        #[doc = "Reader of register I2SPR"]
        pub type R = crate::R<u32, super::I2SPR>;
        #[doc = "Writer for register I2SPR"]
        pub type W = crate::W<u32, super::I2SPR>;
        #[doc = "Register I2SPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::I2SPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `I2SDIV`"]
        pub type I2SDIV_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2SDIV`"]
        pub struct I2SDIV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2SDIV_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `ODD`"]
        pub type ODD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ODD`"]
        pub struct ODD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ODD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MCKOE`"]
        pub type MCKOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MCKOE`"]
        pub struct MCKOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MCKOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - linear prescaler"]
            #[inline(always)]
            pub fn i2sdiv(&self) -> I2SDIV_R {
                I2SDIV_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - Odd factor for the prescaler"]
            #[inline(always)]
            pub fn odd(&self) -> ODD_R {
                ODD_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Master clock output enable"]
            #[inline(always)]
            pub fn mckoe(&self) -> MCKOE_R {
                MCKOE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - linear prescaler"]
            #[inline(always)]
            pub fn i2sdiv(&mut self) -> I2SDIV_W {
                I2SDIV_W { w: self }
            }
            #[doc = "Bit 8 - Odd factor for the prescaler"]
            #[inline(always)]
            pub fn odd(&mut self) -> ODD_W {
                ODD_W { w: self }
            }
            #[doc = "Bit 9 - Master clock output enable"]
            #[inline(always)]
            pub fn mckoe(&mut self) -> MCKOE_W {
                MCKOE_W { w: self }
            }
        }
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub struct SPI2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPI2 {}
impl SPI2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi1::RegisterBlock {
        0x4000_3800 as *const _
    }
}
impl Deref for SPI2 {
    type Target = spi1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SPI2::ptr() }
    }
}
#[doc = "Advanced-timers"]
pub struct TIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM1 {}
impl TIM1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim1::RegisterBlock {
        0x4001_2c00 as *const _
    }
}
impl Deref for TIM1 {
    type Target = tim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM1::ptr() }
    }
}
#[doc = "Advanced-timers"]
pub mod tim1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: SMCR,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_6_ccmr1: [u8; 4usize],
        _reserved_7_ccmr2: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        #[doc = "0x30 - repetition counter register"]
        pub rcr: RCR,
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR1,
        #[doc = "0x38 - capture/compare register 2"]
        pub ccr2: CCR2,
        #[doc = "0x3c - capture/compare register 3"]
        pub ccr3: CCR3,
        #[doc = "0x40 - capture/compare register 4"]
        pub ccr4: CCR4,
        #[doc = "0x44 - break and dead-time register"]
        pub bdtr: BDTR,
        #[doc = "0x48 - DMA control register"]
        pub dcr: DCR,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: DMAR,
        #[doc = "0x50 - option register 1"]
        pub or1: OR1,
        #[doc = "0x54 - capture/compare mode register 2 (output mode)"]
        pub ccmr3_output: CCMR3_OUTPUT,
        #[doc = "0x58 - capture/compare register 4"]
        pub ccr5: CCR5,
        #[doc = "0x5c - capture/compare register 4"]
        pub ccr6: CCR6,
        #[doc = "0x60 - DMA address for full transfer"]
        pub af1: AF1,
        #[doc = "0x64 - DMA address for full transfer"]
        pub af2: AF2,
        #[doc = "0x68 - TIM1 timer input selection register"]
        pub tisel: TISEL,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (output mode)"]
        #[inline(always)]
        pub fn ccmr2_input(&self) -> &CCMR2_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(28usize) as *const CCMR2_INPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (output mode)"]
        #[inline(always)]
        pub fn ccmr2_input_mut(&self) -> &mut CCMR2_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(28usize) as *mut CCMR2_INPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output(&self) -> &CCMR2_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(28usize) as *const CCMR2_OUTPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output_mut(&self) -> &mut CCMR2_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(28usize) as *mut CCMR2_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CMS`"]
        pub type CMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CMS`"]
        pub struct CMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `UIFREMAP`"]
        pub type UIFREMAP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIFREMAP`"]
        pub struct UIFREMAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIFREMAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&self) -> CMS_R {
                CMS_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 11 - UIF status bit remapping"]
            #[inline(always)]
            pub fn uifremap(&self) -> UIFREMAP_R {
                UIFREMAP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&mut self) -> CMS_W {
                CMS_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 11 - UIF status bit remapping"]
            #[inline(always)]
            pub fn uifremap(&mut self) -> UIFREMAP_W {
                UIFREMAP_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MMS2`"]
        pub type MMS2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MMS2`"]
        pub struct MMS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `OIS6`"]
        pub type OIS6_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS6`"]
        pub struct OIS6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS6_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `OIS5`"]
        pub type OIS5_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS5`"]
        pub struct OIS5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS5_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OIS4`"]
        pub type OIS4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS4`"]
        pub struct OIS4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `OIS3N`"]
        pub type OIS3N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS3N`"]
        pub struct OIS3N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS3N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `OIS3`"]
        pub type OIS3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS3`"]
        pub struct OIS3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OIS2N`"]
        pub type OIS2N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS2N`"]
        pub struct OIS2N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS2N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OIS2`"]
        pub type OIS2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS2`"]
        pub struct OIS2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OIS1N`"]
        pub type OIS1N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS1N`"]
        pub struct OIS1N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `OIS1`"]
        pub type OIS1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OIS1`"]
        pub struct OIS1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OIS1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TI1S`"]
        pub type TI1S_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TI1S`"]
        pub struct TI1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `MMS`"]
        pub type MMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MMS`"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CCDS`"]
        pub type CCDS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCDS`"]
        pub struct CCDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCDS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CCUS`"]
        pub type CCUS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCUS`"]
        pub struct CCUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCUS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CCPC`"]
        pub type CCPC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCPC`"]
        pub struct CCPC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCPC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:23 - Master mode selection 2"]
            #[inline(always)]
            pub fn mms2(&self) -> MMS2_R {
                MMS2_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bit 18 - Output Idle state 6 (OC6 output)"]
            #[inline(always)]
            pub fn ois6(&self) -> OIS6_R {
                OIS6_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Output Idle state 5 (OC5 output)"]
            #[inline(always)]
            pub fn ois5(&self) -> OIS5_R {
                OIS5_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Output Idle state 4"]
            #[inline(always)]
            pub fn ois4(&self) -> OIS4_R {
                OIS4_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3n(&self) -> OIS3N_R {
                OIS3N_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3(&self) -> OIS3_R {
                OIS3_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2n(&self) -> OIS2N_R {
                OIS2N_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2(&self) -> OIS2_R {
                OIS2_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&self) -> OIS1N_R {
                OIS1N_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&self) -> OIS1_R {
                OIS1_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&self) -> TI1S_R {
                TI1S_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&self) -> CCDS_R {
                CCDS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&self) -> CCUS_R {
                CCUS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&self) -> CCPC_R {
                CCPC_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 20:23 - Master mode selection 2"]
            #[inline(always)]
            pub fn mms2(&mut self) -> MMS2_W {
                MMS2_W { w: self }
            }
            #[doc = "Bit 18 - Output Idle state 6 (OC6 output)"]
            #[inline(always)]
            pub fn ois6(&mut self) -> OIS6_W {
                OIS6_W { w: self }
            }
            #[doc = "Bit 16 - Output Idle state 5 (OC5 output)"]
            #[inline(always)]
            pub fn ois5(&mut self) -> OIS5_W {
                OIS5_W { w: self }
            }
            #[doc = "Bit 14 - Output Idle state 4"]
            #[inline(always)]
            pub fn ois4(&mut self) -> OIS4_W {
                OIS4_W { w: self }
            }
            #[doc = "Bit 13 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3n(&mut self) -> OIS3N_W {
                OIS3N_W { w: self }
            }
            #[doc = "Bit 12 - Output Idle state 3"]
            #[inline(always)]
            pub fn ois3(&mut self) -> OIS3_W {
                OIS3_W { w: self }
            }
            #[doc = "Bit 11 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2n(&mut self) -> OIS2N_W {
                OIS2N_W { w: self }
            }
            #[doc = "Bit 10 - Output Idle state 2"]
            #[inline(always)]
            pub fn ois2(&mut self) -> OIS2_W {
                OIS2_W { w: self }
            }
            #[doc = "Bit 9 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1n(&mut self) -> OIS1N_W {
                OIS1N_W { w: self }
            }
            #[doc = "Bit 8 - Output Idle state 1"]
            #[inline(always)]
            pub fn ois1(&mut self) -> OIS1_W {
                OIS1_W { w: self }
            }
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&mut self) -> TI1S_W {
                TI1S_W { w: self }
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&mut self) -> CCDS_W {
                CCDS_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare control update selection"]
            #[inline(always)]
            pub fn ccus(&mut self) -> CCUS_W {
                CCUS_W { w: self }
            }
            #[doc = "Bit 0 - Capture/compare preloaded control"]
            #[inline(always)]
            pub fn ccpc(&mut self) -> CCPC_W {
                CCPC_W { w: self }
            }
        }
    }
    #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](smcr) module"]
    pub type SMCR = crate::Reg<u32, _SMCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMCR;
    #[doc = "`read()` method returns [smcr::R](smcr::R) reader structure"]
    impl crate::Readable for SMCR {}
    #[doc = "`write(|w| ..)` method takes [smcr::W](smcr::W) writer structure"]
    impl crate::Writable for SMCR {}
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Reader of register SMCR"]
        pub type R = crate::R<u32, super::SMCR>;
        #[doc = "Writer for register SMCR"]
        pub type W = crate::W<u32, super::SMCR>;
        #[doc = "Register SMCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SMS`"]
        pub type SMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SMS`"]
        pub struct SMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        #[doc = "Reader of field `OCCS`"]
        pub type OCCS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OCCS`"]
        pub struct OCCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OCCS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TS_4`"]
        pub type TS_4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TS_4`"]
        pub struct TS_4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MSM`"]
        pub type MSM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSM`"]
        pub struct MSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ETF`"]
        pub type ETF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ETF`"]
        pub struct ETF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ETPS`"]
        pub type ETPS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ETPS`"]
        pub struct ETPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETPS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `ECE`"]
        pub type ECE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ECE`"]
        pub struct ECE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `ETP`"]
        pub type ETP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ETP`"]
        pub struct ETP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `SMS_3`"]
        pub type SMS_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMS_3`"]
        pub struct SMS_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `TS`"]
        pub type TS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TS`"]
        pub struct TS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&self) -> SMS_R {
                SMS_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bit 3 - OCREF clear selection"]
            #[inline(always)]
            pub fn occs(&self) -> OCCS_R {
                OCCS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts_4(&self) -> TS_4_R {
                TS_4_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MSM_R {
                MSM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&self) -> ETF_R {
                ETF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&self) -> ETPS_R {
                ETPS_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&self) -> ECE_R {
                ECE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> ETP_R {
                ETP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Slave mode selection - bit 3"]
            #[inline(always)]
            pub fn sms_3(&self) -> SMS_3_R {
                SMS_3_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&self) -> TS_R {
                TS_R::new(((self.bits >> 20) & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&mut self) -> SMS_W {
                SMS_W { w: self }
            }
            #[doc = "Bit 3 - OCREF clear selection"]
            #[inline(always)]
            pub fn occs(&mut self) -> OCCS_W {
                OCCS_W { w: self }
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts_4(&mut self) -> TS_4_W {
                TS_4_W { w: self }
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&mut self) -> MSM_W {
                MSM_W { w: self }
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&mut self) -> ETF_W {
                ETF_W { w: self }
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&mut self) -> ETPS_W {
                ETPS_W { w: self }
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&mut self) -> ECE_W {
                ECE_W { w: self }
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&mut self) -> ETP_W {
                ETP_W { w: self }
            }
            #[doc = "Bit 16 - Slave mode selection - bit 3"]
            #[inline(always)]
            pub fn sms_3(&mut self) -> SMS_3_W {
                SMS_3_W { w: self }
            }
            #[doc = "Bits 20:21 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&mut self) -> TS_W {
                TS_W { w: self }
            }
        }
    }
    #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC2IE`"]
        pub type CC2IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2IE`"]
        pub struct CC2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC3IE`"]
        pub type CC3IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3IE`"]
        pub struct CC3IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC4IE`"]
        pub type CC4IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4IE`"]
        pub struct CC4IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `COMIE`"]
        pub type COMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMIE`"]
        pub struct COMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TIE`"]
        pub type TIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIE`"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `BIE`"]
        pub type BIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIE`"]
        pub struct BIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `UDE`"]
        pub type UDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDE`"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CC1DE`"]
        pub type CC1DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1DE`"]
        pub struct CC1DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CC2DE`"]
        pub type CC2DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2DE`"]
        pub struct CC2DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC3DE`"]
        pub type CC3DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3DE`"]
        pub struct CC3DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CC4DE`"]
        pub type CC4DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4DE`"]
        pub struct CC4DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `COMDE`"]
        pub type COMDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMDE`"]
        pub struct COMDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `TDE`"]
        pub type TDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDE`"]
        pub struct TDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&self) -> CC2IE_R {
                CC2IE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&self) -> CC3IE_R {
                CC3IE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&self) -> CC4IE_R {
                CC4IE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&self) -> COMIE_R {
                COMIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&self) -> BIE_R {
                BIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&self) -> CC1DE_R {
                CC1DE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&self) -> CC2DE_R {
                CC2DE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&self) -> CC3DE_R {
                CC3DE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&self) -> CC4DE_R {
                CC4DE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&self) -> COMDE_R {
                COMDE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&self) -> TDE_R {
                TDE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&mut self) -> CC2IE_W {
                CC2IE_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&mut self) -> CC3IE_W {
                CC3IE_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&mut self) -> CC4IE_W {
                CC4IE_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt enable"]
            #[inline(always)]
            pub fn comie(&mut self) -> COMIE_W {
                COMIE_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn bie(&mut self) -> BIE_W {
                BIE_W { w: self }
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&mut self) -> CC1DE_W {
                CC1DE_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&mut self) -> CC2DE_W {
                CC2DE_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&mut self) -> CC3DE_W {
                CC3DE_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&mut self) -> CC4DE_W {
                CC4DE_W { w: self }
            }
            #[doc = "Bit 13 - COM DMA request enable"]
            #[inline(always)]
            pub fn comde(&mut self) -> COMDE_W {
                COMDE_W { w: self }
            }
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&mut self) -> TDE_W {
                TDE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC2IF`"]
        pub type CC2IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2IF`"]
        pub struct CC2IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC3IF`"]
        pub type CC3IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3IF`"]
        pub struct CC3IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC4IF`"]
        pub type CC4IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4IF`"]
        pub struct CC4IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `COMIF`"]
        pub type COMIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COMIF`"]
        pub struct COMIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TIF`"]
        pub type TIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIF`"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `BIF`"]
        pub type BIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BIF`"]
        pub struct BIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `B2IF`"]
        pub type B2IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `B2IF`"]
        pub struct B2IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> B2IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CC2OF`"]
        pub type CC2OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2OF`"]
        pub struct CC2OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC3OF`"]
        pub type CC3OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3OF`"]
        pub struct CC3OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CC4OF`"]
        pub type CC4OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4OF`"]
        pub struct CC4OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `SBIF`"]
        pub type SBIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SBIF`"]
        pub struct SBIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CC5IF`"]
        pub type CC5IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC5IF`"]
        pub struct CC5IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC5IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CC6IF`"]
        pub type CC6IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC6IF`"]
        pub struct CC6IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC6IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&self) -> CC2IF_R {
                CC2IF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&self) -> CC3IF_R {
                CC3IF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&self) -> CC4IF_R {
                CC4IF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&self) -> COMIF_R {
                COMIF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&self) -> BIF_R {
                BIF_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Break 2 interrupt flag"]
            #[inline(always)]
            pub fn b2if(&self) -> B2IF_R {
                B2IF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&self) -> CC2OF_R {
                CC2OF_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&self) -> CC3OF_R {
                CC3OF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&self) -> CC4OF_R {
                CC4OF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - System Break interrupt flag"]
            #[inline(always)]
            pub fn sbif(&self) -> SBIF_R {
                SBIF_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Compare 5 interrupt flag"]
            #[inline(always)]
            pub fn cc5if(&self) -> CC5IF_R {
                CC5IF_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Compare 6 interrupt flag"]
            #[inline(always)]
            pub fn cc6if(&self) -> CC6IF_R {
                CC6IF_R::new(((self.bits >> 17) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&mut self) -> CC2IF_W {
                CC2IF_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&mut self) -> CC3IF_W {
                CC3IF_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&mut self) -> CC4IF_W {
                CC4IF_W { w: self }
            }
            #[doc = "Bit 5 - COM interrupt flag"]
            #[inline(always)]
            pub fn comif(&mut self) -> COMIF_W {
                COMIF_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn bif(&mut self) -> BIF_W {
                BIF_W { w: self }
            }
            #[doc = "Bit 8 - Break 2 interrupt flag"]
            #[inline(always)]
            pub fn b2if(&mut self) -> B2IF_W {
                B2IF_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&mut self) -> CC2OF_W {
                CC2OF_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&mut self) -> CC3OF_W {
                CC3OF_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&mut self) -> CC4OF_W {
                CC4OF_W { w: self }
            }
            #[doc = "Bit 13 - System Break interrupt flag"]
            #[inline(always)]
            pub fn sbif(&mut self) -> SBIF_W {
                SBIF_W { w: self }
            }
            #[doc = "Bit 16 - Compare 5 interrupt flag"]
            #[inline(always)]
            pub fn cc5if(&mut self) -> CC5IF_W {
                CC5IF_W { w: self }
            }
            #[doc = "Bit 17 - Compare 6 interrupt flag"]
            #[inline(always)]
            pub fn cc6if(&mut self) -> CC6IF_W {
                CC6IF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC2G`"]
        pub struct CC2G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC3G`"]
        pub struct CC3G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC4G`"]
        pub struct CC4G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `COMG`"]
        pub struct COMG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COMG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `TG`"]
        pub struct TG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `BG`"]
        pub struct BG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Write proxy for field `B2G`"]
        pub struct B2G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> B2G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&mut self) -> CC2G_W {
                CC2G_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare 3 generation"]
            #[inline(always)]
            pub fn cc3g(&mut self) -> CC3G_W {
                CC3G_W { w: self }
            }
            #[doc = "Bit 4 - Capture/compare 4 generation"]
            #[inline(always)]
            pub fn cc4g(&mut self) -> CC4G_W {
                CC4G_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare control update generation"]
            #[inline(always)]
            pub fn comg(&mut self) -> COMG_W {
                COMG_W { w: self }
            }
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&mut self) -> TG_W {
                TG_W { w: self }
            }
            #[doc = "Bit 7 - Break generation"]
            #[inline(always)]
            pub fn bg(&mut self) -> BG_W {
                BG_W { w: self }
            }
            #[doc = "Bit 8 - Break 2 generation"]
            #[inline(always)]
            pub fn b2g(&mut self) -> B2G_W {
                B2G_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register 1 (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC1CE`"]
        pub type OC1CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1CE`"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC2FE`"]
        pub type OC2FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2FE`"]
        pub struct OC2FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OC2PE`"]
        pub type OC2PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2PE`"]
        pub struct OC2PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC2M`"]
        pub type OC2M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC2M`"]
        pub struct OC2M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OC2CE`"]
        pub type OC2CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2CE`"]
        pub struct OC2CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M_3`"]
        pub type OC1M_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1M_3`"]
        pub struct OC1M_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OC2M_3`"]
        pub type OC2M_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2M_3`"]
        pub struct OC2M_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Output Compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 10 - Output Compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&self) -> OC2FE_R {
                OC2FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Output Compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&self) -> OC2PE_R {
                OC2PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output Compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&self) -> OC2M_R {
                OC2M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 15 - Output Compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&self) -> OC2CE_R {
                OC2CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Output Compare 1 mode - bit 3"]
            #[inline(always)]
            pub fn oc1m_3(&self) -> OC1M_3_R {
                OC1M_3_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Output Compare 2 mode - bit 3"]
            #[inline(always)]
            pub fn oc2m_3(&self) -> OC2M_3_R {
                OC2M_3_R::new(((self.bits >> 24) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 7 - Output Compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bit 10 - Output Compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&mut self) -> OC2FE_W {
                OC2FE_W { w: self }
            }
            #[doc = "Bit 11 - Output Compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&mut self) -> OC2PE_W {
                OC2PE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output Compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&mut self) -> OC2M_W {
                OC2M_W { w: self }
            }
            #[doc = "Bit 15 - Output Compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&mut self) -> OC2CE_W {
                OC2CE_W { w: self }
            }
            #[doc = "Bit 16 - Output Compare 1 mode - bit 3"]
            #[inline(always)]
            pub fn oc1m_3(&mut self) -> OC1M_3_W {
                OC1M_3_W { w: self }
            }
            #[doc = "Bit 24 - Output Compare 2 mode - bit 3"]
            #[inline(always)]
            pub fn oc2m_3(&mut self) -> OC2M_3_W {
                OC2M_3_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (output mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC1CE`"]
        pub type OC1CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1CE`"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC2FE`"]
        pub type OC2FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2FE`"]
        pub struct OC2FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OC2PE`"]
        pub type OC2PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2PE`"]
        pub struct OC2PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC2M`"]
        pub type OC2M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC2M`"]
        pub struct OC2M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OC2CE`"]
        pub type OC2CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2CE`"]
        pub struct OC2CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Output Compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 10 - Output Compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&self) -> OC2FE_R {
                OC2FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Output Compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&self) -> OC2PE_R {
                OC2PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output Compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&self) -> OC2M_R {
                OC2M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 15 - Output Compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&self) -> OC2CE_R {
                OC2CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Bit 2 - Output Compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bit 3 - Output Compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output Compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 7 - Output Compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bit 10 - Output Compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&mut self) -> OC2FE_W {
                OC2FE_W { w: self }
            }
            #[doc = "Bit 11 - Output Compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&mut self) -> OC2PE_W {
                OC2PE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output Compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&mut self) -> OC2M_W {
                OC2M_W { w: self }
            }
            #[doc = "Bit 15 - Output Compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&mut self) -> OC2CE_W {
                OC2CE_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 2 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_output](ccmr2_output) module"]
    pub type CCMR2_OUTPUT = crate::Reg<u32, _CCMR2_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR2_OUTPUT;
    #[doc = "`read()` method returns [ccmr2_output::R](ccmr2_output::R) reader structure"]
    impl crate::Readable for CCMR2_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr2_output::W](ccmr2_output::W) writer structure"]
    impl crate::Writable for CCMR2_OUTPUT {}
    #[doc = "capture/compare mode register 2 (output mode)"]
    pub mod ccmr2_output {
        #[doc = "Reader of register CCMR2_Output"]
        pub type R = crate::R<u32, super::CCMR2_OUTPUT>;
        #[doc = "Writer for register CCMR2_Output"]
        pub type W = crate::W<u32, super::CCMR2_OUTPUT>;
        #[doc = "Register CCMR2_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR2_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC3S`"]
        pub type CC3S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC3S`"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `OC3FE`"]
        pub type OC3FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3FE`"]
        pub struct OC3FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OC3PE`"]
        pub type OC3PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3PE`"]
        pub struct OC3PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC3M`"]
        pub type OC3M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC3M`"]
        pub struct OC3M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC3CE`"]
        pub type OC3CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3CE`"]
        pub struct OC3CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CC4S`"]
        pub type CC4S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC4S`"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC4FE`"]
        pub type OC4FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4FE`"]
        pub struct OC4FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OC4PE`"]
        pub type OC4PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4PE`"]
        pub struct OC4PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC4M`"]
        pub type OC4M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC4M`"]
        pub struct OC4M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OC4CE`"]
        pub type OC4CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4CE`"]
        pub struct OC4CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `OC3M_3`"]
        pub type OC3M_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3M_3`"]
        pub struct OC3M_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3M_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OC4M_3`"]
        pub type OC4M_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4M_3`"]
        pub struct OC4M_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4M_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&self) -> OC3FE_R {
                OC3FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&self) -> OC3PE_R {
                OC3PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&self) -> OC3M_R {
                OC3M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&self) -> OC3CE_R {
                OC3CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&self) -> OC4FE_R {
                OC4FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&self) -> OC4PE_R {
                OC4PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&self) -> OC4M_R {
                OC4M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&self) -> OC4CE_R {
                OC4CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Output Compare 3 mode - bit 3"]
            #[inline(always)]
            pub fn oc3m_3(&self) -> OC3M_3_R {
                OC3M_3_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 24 - Output Compare 4 mode - bit 3"]
            #[inline(always)]
            pub fn oc4m_3(&self) -> OC4M_3_R {
                OC4M_3_R::new(((self.bits >> 24) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&mut self) -> OC3FE_W {
                OC3FE_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&mut self) -> OC3PE_W {
                OC3PE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&mut self) -> OC3M_W {
                OC3M_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&mut self) -> OC3CE_W {
                OC3CE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&mut self) -> OC4FE_W {
                OC4FE_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&mut self) -> OC4PE_W {
                OC4PE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&mut self) -> OC4M_W {
                OC4M_W { w: self }
            }
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&mut self) -> OC4CE_W {
                OC4CE_W { w: self }
            }
            #[doc = "Bit 16 - Output Compare 3 mode - bit 3"]
            #[inline(always)]
            pub fn oc3m_3(&mut self) -> OC3M_3_W {
                OC3M_3_W { w: self }
            }
            #[doc = "Bit 24 - Output Compare 4 mode - bit 3"]
            #[inline(always)]
            pub fn oc4m_3(&mut self) -> OC4M_3_W {
                OC4M_3_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 2 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_input](ccmr2_input) module"]
    pub type CCMR2_INPUT = crate::Reg<u32, _CCMR2_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR2_INPUT;
    #[doc = "`read()` method returns [ccmr2_input::R](ccmr2_input::R) reader structure"]
    impl crate::Readable for CCMR2_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr2_input::W](ccmr2_input::W) writer structure"]
    impl crate::Writable for CCMR2_INPUT {}
    #[doc = "capture/compare mode register 2 (output mode)"]
    pub mod ccmr2_input {
        #[doc = "Reader of register CCMR2_Input"]
        pub type R = crate::R<u32, super::CCMR2_INPUT>;
        #[doc = "Writer for register CCMR2_Input"]
        pub type W = crate::W<u32, super::CCMR2_INPUT>;
        #[doc = "Register CCMR2_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR2_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC3S`"]
        pub type CC3S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC3S`"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `OC3FE`"]
        pub type OC3FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3FE`"]
        pub struct OC3FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OC3PE`"]
        pub type OC3PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3PE`"]
        pub struct OC3PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC3M`"]
        pub type OC3M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC3M`"]
        pub struct OC3M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC3CE`"]
        pub type OC3CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3CE`"]
        pub struct OC3CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CC4S`"]
        pub type CC4S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC4S`"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC4FE`"]
        pub type OC4FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4FE`"]
        pub struct OC4FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OC4PE`"]
        pub type OC4PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4PE`"]
        pub struct OC4PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC4M`"]
        pub type OC4M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC4M`"]
        pub struct OC4M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OC4CE`"]
        pub type OC4CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4CE`"]
        pub struct OC4CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&self) -> OC3FE_R {
                OC3FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&self) -> OC3PE_R {
                OC3PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&self) -> OC3M_R {
                OC3M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&self) -> OC3CE_R {
                OC3CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&self) -> OC4FE_R {
                OC4FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&self) -> OC4PE_R {
                OC4PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&self) -> OC4M_R {
                OC4M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&self) -> OC4CE_R {
                OC4CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&mut self) -> OC3FE_W {
                OC3FE_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&mut self) -> OC3PE_W {
                OC3PE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&mut self) -> OC3M_W {
                OC3M_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&mut self) -> OC3CE_W {
                OC3CE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&mut self) -> OC4FE_W {
                OC4FE_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&mut self) -> OC4PE_W {
                OC4PE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&mut self) -> OC4M_W {
                OC4M_W { w: self }
            }
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&mut self) -> OC4CE_W {
                OC4CE_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NE`"]
        pub type CC1NE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NE`"]
        pub struct CC1NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC2E`"]
        pub type CC2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2E`"]
        pub struct CC2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CC2P`"]
        pub type CC2P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2P`"]
        pub struct CC2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC2NE`"]
        pub type CC2NE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2NE`"]
        pub struct CC2NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CC2NP`"]
        pub type CC2NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2NP`"]
        pub struct CC2NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CC3E`"]
        pub type CC3E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3E`"]
        pub struct CC3E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CC3P`"]
        pub type CC3P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3P`"]
        pub struct CC3P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CC3NE`"]
        pub type CC3NE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3NE`"]
        pub struct CC3NE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3NE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC3NP`"]
        pub type CC3NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3NP`"]
        pub struct CC3NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CC4E`"]
        pub type CC4E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4E`"]
        pub struct CC4E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CC4P`"]
        pub type CC4P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4P`"]
        pub struct CC4P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CC4NP`"]
        pub type CC4NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4NP`"]
        pub struct CC4NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CC5E`"]
        pub type CC5E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC5E`"]
        pub struct CC5E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC5E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CC5P`"]
        pub type CC5P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC5P`"]
        pub struct CC5P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC5P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `CC6E`"]
        pub type CC6E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC6E`"]
        pub struct CC6E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC6E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `CC6P`"]
        pub type CC6P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC6P`"]
        pub struct CC6P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC6P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&self) -> CC1NE_R {
                CC1NE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&self) -> CC2E_R {
                CC2E_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&self) -> CC2P_R {
                CC2P_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Capture/Compare 2 complementary output enable"]
            #[inline(always)]
            pub fn cc2ne(&self) -> CC2NE_R {
                CC2NE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&self) -> CC2NP_R {
                CC2NP_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&self) -> CC3E_R {
                CC3E_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&self) -> CC3P_R {
                CC3P_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 3 complementary output enable"]
            #[inline(always)]
            pub fn cc3ne(&self) -> CC3NE_R {
                CC3NE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&self) -> CC3NP_R {
                CC3NP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&self) -> CC4E_R {
                CC4E_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&self) -> CC4P_R {
                CC4P_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Capture/Compare 4 complementary output polarity"]
            #[inline(always)]
            pub fn cc4np(&self) -> CC4NP_R {
                CC4NP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Capture/Compare 5 output enable"]
            #[inline(always)]
            pub fn cc5e(&self) -> CC5E_R {
                CC5E_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Capture/Compare 5 output polarity"]
            #[inline(always)]
            pub fn cc5p(&self) -> CC5P_R {
                CC5P_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Capture/Compare 6 output enable"]
            #[inline(always)]
            pub fn cc6e(&self) -> CC6E_R {
                CC6E_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Capture/Compare 6 output polarity"]
            #[inline(always)]
            pub fn cc6p(&self) -> CC6P_R {
                CC6P_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 1 complementary output enable"]
            #[inline(always)]
            pub fn cc1ne(&mut self) -> CC1NE_W {
                CC1NE_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&mut self) -> CC2E_W {
                CC2E_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&mut self) -> CC2P_W {
                CC2P_W { w: self }
            }
            #[doc = "Bit 6 - Capture/Compare 2 complementary output enable"]
            #[inline(always)]
            pub fn cc2ne(&mut self) -> CC2NE_W {
                CC2NE_W { w: self }
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&mut self) -> CC2NP_W {
                CC2NP_W { w: self }
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&mut self) -> CC3E_W {
                CC3E_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&mut self) -> CC3P_W {
                CC3P_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 3 complementary output enable"]
            #[inline(always)]
            pub fn cc3ne(&mut self) -> CC3NE_W {
                CC3NE_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&mut self) -> CC3NP_W {
                CC3NP_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&mut self) -> CC4E_W {
                CC4E_W { w: self }
            }
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&mut self) -> CC4P_W {
                CC4P_W { w: self }
            }
            #[doc = "Bit 15 - Capture/Compare 4 complementary output polarity"]
            #[inline(always)]
            pub fn cc4np(&mut self) -> CC4NP_W {
                CC4NP_W { w: self }
            }
            #[doc = "Bit 16 - Capture/Compare 5 output enable"]
            #[inline(always)]
            pub fn cc5e(&mut self) -> CC5E_W {
                CC5E_W { w: self }
            }
            #[doc = "Bit 17 - Capture/Compare 5 output polarity"]
            #[inline(always)]
            pub fn cc5p(&mut self) -> CC5P_W {
                CC5P_W { w: self }
            }
            #[doc = "Bit 20 - Capture/Compare 6 output enable"]
            #[inline(always)]
            pub fn cc6e(&mut self) -> CC6E_W {
                CC6E_W { w: self }
            }
            #[doc = "Bit 21 - Capture/Compare 6 output polarity"]
            #[inline(always)]
            pub fn cc6p(&mut self) -> CC6P_W {
                CC6P_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        #[doc = "Reader of field `UIFCPY`"]
        pub type UIFCPY_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bit 31 - UIF copy"]
            #[inline(always)]
            pub fn uifcpy(&self) -> UIFCPY_R {
                UIFCPY_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "repetition counter register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rcr](rcr) module"]
    pub type RCR = crate::Reg<u32, _RCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RCR;
    #[doc = "`read()` method returns [rcr::R](rcr::R) reader structure"]
    impl crate::Readable for RCR {}
    #[doc = "`write(|w| ..)` method takes [rcr::W](rcr::W) writer structure"]
    impl crate::Writable for RCR {}
    #[doc = "repetition counter register"]
    pub mod rcr {
        #[doc = "Reader of register RCR"]
        pub type R = crate::R<u32, super::RCR>;
        #[doc = "Writer for register RCR"]
        pub type W = crate::W<u32, super::RCR>;
        #[doc = "Register RCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `REP`"]
        pub type REP_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `REP`"]
        pub struct REP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Repetition counter value"]
            #[inline(always)]
            pub fn rep(&self) -> REP_R {
                REP_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Repetition counter value"]
            #[inline(always)]
            pub fn rep(&mut self) -> REP_W {
                REP_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](ccr1) module"]
    pub type CCR1 = crate::Reg<u32, _CCR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR1;
    #[doc = "`read()` method returns [ccr1::R](ccr1::R) reader structure"]
    impl crate::Readable for CCR1 {}
    #[doc = "`write(|w| ..)` method takes [ccr1::W](ccr1::W) writer structure"]
    impl crate::Writable for CCR1 {}
    #[doc = "capture/compare register 1"]
    pub mod ccr1 {
        #[doc = "Reader of register CCR1"]
        pub type R = crate::R<u32, super::CCR1>;
        #[doc = "Writer for register CCR1"]
        pub type W = crate::W<u32, super::CCR1>;
        #[doc = "Register CCR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR1`"]
        pub type CCR1_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR1`"]
        pub struct CCR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1(&self) -> CCR1_R {
                CCR1_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1(&mut self) -> CCR1_W {
                CCR1_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr2](ccr2) module"]
    pub type CCR2 = crate::Reg<u32, _CCR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR2;
    #[doc = "`read()` method returns [ccr2::R](ccr2::R) reader structure"]
    impl crate::Readable for CCR2 {}
    #[doc = "`write(|w| ..)` method takes [ccr2::W](ccr2::W) writer structure"]
    impl crate::Writable for CCR2 {}
    #[doc = "capture/compare register 2"]
    pub mod ccr2 {
        #[doc = "Reader of register CCR2"]
        pub type R = crate::R<u32, super::CCR2>;
        #[doc = "Writer for register CCR2"]
        pub type W = crate::W<u32, super::CCR2>;
        #[doc = "Register CCR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR2`"]
        pub type CCR2_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR2`"]
        pub struct CCR2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare 2 value"]
            #[inline(always)]
            pub fn ccr2(&self) -> CCR2_R {
                CCR2_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare 2 value"]
            #[inline(always)]
            pub fn ccr2(&mut self) -> CCR2_W {
                CCR2_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr3](ccr3) module"]
    pub type CCR3 = crate::Reg<u32, _CCR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR3;
    #[doc = "`read()` method returns [ccr3::R](ccr3::R) reader structure"]
    impl crate::Readable for CCR3 {}
    #[doc = "`write(|w| ..)` method takes [ccr3::W](ccr3::W) writer structure"]
    impl crate::Writable for CCR3 {}
    #[doc = "capture/compare register 3"]
    pub mod ccr3 {
        #[doc = "Reader of register CCR3"]
        pub type R = crate::R<u32, super::CCR3>;
        #[doc = "Writer for register CCR3"]
        pub type W = crate::W<u32, super::CCR3>;
        #[doc = "Register CCR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR3`"]
        pub type CCR3_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR3`"]
        pub struct CCR3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ccr3(&self) -> CCR3_R {
                CCR3_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ccr3(&mut self) -> CCR3_W {
                CCR3_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr4](ccr4) module"]
    pub type CCR4 = crate::Reg<u32, _CCR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR4;
    #[doc = "`read()` method returns [ccr4::R](ccr4::R) reader structure"]
    impl crate::Readable for CCR4 {}
    #[doc = "`write(|w| ..)` method takes [ccr4::W](ccr4::W) writer structure"]
    impl crate::Writable for CCR4 {}
    #[doc = "capture/compare register 4"]
    pub mod ccr4 {
        #[doc = "Reader of register CCR4"]
        pub type R = crate::R<u32, super::CCR4>;
        #[doc = "Writer for register CCR4"]
        pub type W = crate::W<u32, super::CCR4>;
        #[doc = "Register CCR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR4`"]
        pub type CCR4_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR4`"]
        pub struct CCR4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ccr4(&self) -> CCR4_R {
                CCR4_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ccr4(&mut self) -> CCR4_W {
                CCR4_W { w: self }
            }
        }
    }
    #[doc = "break and dead-time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdtr](bdtr) module"]
    pub type BDTR = crate::Reg<u32, _BDTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BDTR;
    #[doc = "`read()` method returns [bdtr::R](bdtr::R) reader structure"]
    impl crate::Readable for BDTR {}
    #[doc = "`write(|w| ..)` method takes [bdtr::W](bdtr::W) writer structure"]
    impl crate::Writable for BDTR {}
    #[doc = "break and dead-time register"]
    pub mod bdtr {
        #[doc = "Reader of register BDTR"]
        pub type R = crate::R<u32, super::BDTR>;
        #[doc = "Writer for register BDTR"]
        pub type W = crate::W<u32, super::BDTR>;
        #[doc = "Register BDTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BDTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DTG`"]
        pub type DTG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DTG`"]
        pub struct DTG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DTG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `LOCK`"]
        pub type LOCK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `LOCK`"]
        pub struct LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OSSI`"]
        pub type OSSI_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OSSI`"]
        pub struct OSSI_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSI_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OSSR`"]
        pub type OSSR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OSSR`"]
        pub struct OSSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSSR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `BKE`"]
        pub type BKE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKE`"]
        pub struct BKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `AOE`"]
        pub type AOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AOE`"]
        pub struct AOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `MOE`"]
        pub type MOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MOE`"]
        pub struct MOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `BKF`"]
        pub type BKF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BKF`"]
        pub struct BKF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `BK2F`"]
        pub type BK2F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `BK2F`"]
        pub struct BK2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `BK2E`"]
        pub type BK2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2E`"]
        pub struct BK2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `BK2P`"]
        pub type BK2P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2P`"]
        pub struct BK2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `BKDSRM`"]
        pub type BKDSRM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKDSRM`"]
        pub struct BKDSRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKDSRM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `BK2DSRM`"]
        pub type BK2DSRM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2DSRM`"]
        pub struct BK2DSRM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2DSRM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 27)) | (((value as u32) & 0x01) << 27);
                self.w
            }
        }
        #[doc = "Reader of field `BKBID`"]
        pub type BKBID_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKBID`"]
        pub struct BKBID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKBID_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `BK2ID`"]
        pub type BK2ID_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2ID`"]
        pub struct BK2ID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2ID_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&self) -> DTG_R {
                DTG_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&self) -> LOCK_R {
                LOCK_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&self) -> OSSI_R {
                OSSI_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&self) -> OSSR_R {
                OSSR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&self) -> BKE_R {
                BKE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&self) -> AOE_R {
                AOE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&self) -> MOE_R {
                MOE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 16:19 - Break filter"]
            #[inline(always)]
            pub fn bkf(&self) -> BKF_R {
                BKF_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Break 2 filter"]
            #[inline(always)]
            pub fn bk2f(&self) -> BK2F_R {
                BK2F_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bit 24 - Break 2 enable"]
            #[inline(always)]
            pub fn bk2e(&self) -> BK2E_R {
                BK2E_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Break 2 polarity"]
            #[inline(always)]
            pub fn bk2p(&self) -> BK2P_R {
                BK2P_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Break Disarm"]
            #[inline(always)]
            pub fn bkdsrm(&self) -> BKDSRM_R {
                BKDSRM_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 27 - Break2 Disarm"]
            #[inline(always)]
            pub fn bk2dsrm(&self) -> BK2DSRM_R {
                BK2DSRM_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Break Bidirectional"]
            #[inline(always)]
            pub fn bkbid(&self) -> BKBID_R {
                BKBID_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Break2 bidirectional"]
            #[inline(always)]
            pub fn bk2id(&self) -> BK2ID_R {
                BK2ID_R::new(((self.bits >> 29) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Dead-time generator setup"]
            #[inline(always)]
            pub fn dtg(&mut self) -> DTG_W {
                DTG_W { w: self }
            }
            #[doc = "Bits 8:9 - Lock configuration"]
            #[inline(always)]
            pub fn lock(&mut self) -> LOCK_W {
                LOCK_W { w: self }
            }
            #[doc = "Bit 10 - Off-state selection for Idle mode"]
            #[inline(always)]
            pub fn ossi(&mut self) -> OSSI_W {
                OSSI_W { w: self }
            }
            #[doc = "Bit 11 - Off-state selection for Run mode"]
            #[inline(always)]
            pub fn ossr(&mut self) -> OSSR_W {
                OSSR_W { w: self }
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn bke(&mut self) -> BKE_W {
                BKE_W { w: self }
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
            #[doc = "Bit 14 - Automatic output enable"]
            #[inline(always)]
            pub fn aoe(&mut self) -> AOE_W {
                AOE_W { w: self }
            }
            #[doc = "Bit 15 - Main output enable"]
            #[inline(always)]
            pub fn moe(&mut self) -> MOE_W {
                MOE_W { w: self }
            }
            #[doc = "Bits 16:19 - Break filter"]
            #[inline(always)]
            pub fn bkf(&mut self) -> BKF_W {
                BKF_W { w: self }
            }
            #[doc = "Bits 20:23 - Break 2 filter"]
            #[inline(always)]
            pub fn bk2f(&mut self) -> BK2F_W {
                BK2F_W { w: self }
            }
            #[doc = "Bit 24 - Break 2 enable"]
            #[inline(always)]
            pub fn bk2e(&mut self) -> BK2E_W {
                BK2E_W { w: self }
            }
            #[doc = "Bit 25 - Break 2 polarity"]
            #[inline(always)]
            pub fn bk2p(&mut self) -> BK2P_W {
                BK2P_W { w: self }
            }
            #[doc = "Bit 26 - Break Disarm"]
            #[inline(always)]
            pub fn bkdsrm(&mut self) -> BKDSRM_W {
                BKDSRM_W { w: self }
            }
            #[doc = "Bit 27 - Break2 Disarm"]
            #[inline(always)]
            pub fn bk2dsrm(&mut self) -> BK2DSRM_W {
                BK2DSRM_W { w: self }
            }
            #[doc = "Bit 28 - Break Bidirectional"]
            #[inline(always)]
            pub fn bkbid(&mut self) -> BKBID_W {
                BKBID_W { w: self }
            }
            #[doc = "Bit 29 - Break2 bidirectional"]
            #[inline(always)]
            pub fn bk2id(&mut self) -> BK2ID_W {
                BK2ID_W { w: self }
            }
        }
    }
    #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](dcr) module"]
    pub type DCR = crate::Reg<u32, _DCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DCR;
    #[doc = "`read()` method returns [dcr::R](dcr::R) reader structure"]
    impl crate::Readable for DCR {}
    #[doc = "`write(|w| ..)` method takes [dcr::W](dcr::W) writer structure"]
    impl crate::Writable for DCR {}
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Reader of register DCR"]
        pub type R = crate::R<u32, super::DCR>;
        #[doc = "Writer for register DCR"]
        pub type W = crate::W<u32, super::DCR>;
        #[doc = "Register DCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBL`"]
        pub type DBL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBL`"]
        pub struct DBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBA`"]
        pub type DBA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBA`"]
        pub struct DBA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&self) -> DBL_R {
                DBL_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&self) -> DBA_R {
                DBA_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&mut self) -> DBL_W {
                DBL_W { w: self }
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&mut self) -> DBA_W {
                DBA_W { w: self }
            }
        }
    }
    #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](dmar) module"]
    pub type DMAR = crate::Reg<u32, _DMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAR;
    #[doc = "`read()` method returns [dmar::R](dmar::R) reader structure"]
    impl crate::Readable for DMAR {}
    #[doc = "`write(|w| ..)` method takes [dmar::W](dmar::W) writer structure"]
    impl crate::Writable for DMAR {}
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Reader of register DMAR"]
        pub type R = crate::R<u32, super::DMAR>;
        #[doc = "Writer for register DMAR"]
        pub type W = crate::W<u32, super::DMAR>;
        #[doc = "Register DMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAB`"]
        pub type DMAB_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DMAB`"]
        pub struct DMAB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&self) -> DMAB_R {
                DMAB_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&mut self) -> DMAB_W {
                DMAB_W { w: self }
            }
        }
    }
    #[doc = "option register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [or1](or1) module"]
    pub type OR1 = crate::Reg<u32, _OR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OR1;
    #[doc = "`read()` method returns [or1::R](or1::R) reader structure"]
    impl crate::Readable for OR1 {}
    #[doc = "`write(|w| ..)` method takes [or1::W](or1::W) writer structure"]
    impl crate::Writable for OR1 {}
    #[doc = "option register 1"]
    pub mod or1 {
        #[doc = "Reader of register OR1"]
        pub type R = crate::R<u32, super::OR1>;
        #[doc = "Writer for register OR1"]
        pub type W = crate::W<u32, super::OR1>;
        #[doc = "Register OR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::OR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OCREF_CLR`"]
        pub type OCREF_CLR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OCREF_CLR`"]
        pub struct OCREF_CLR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OCREF_CLR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Ocref_clr source selection"]
            #[inline(always)]
            pub fn ocref_clr(&self) -> OCREF_CLR_R {
                OCREF_CLR_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Ocref_clr source selection"]
            #[inline(always)]
            pub fn ocref_clr(&mut self) -> OCREF_CLR_W {
                OCREF_CLR_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 2 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr3_output](ccmr3_output) module"]
    pub type CCMR3_OUTPUT = crate::Reg<u32, _CCMR3_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR3_OUTPUT;
    #[doc = "`read()` method returns [ccmr3_output::R](ccmr3_output::R) reader structure"]
    impl crate::Readable for CCMR3_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr3_output::W](ccmr3_output::W) writer structure"]
    impl crate::Writable for CCMR3_OUTPUT {}
    #[doc = "capture/compare mode register 2 (output mode)"]
    pub mod ccmr3_output {
        #[doc = "Reader of register CCMR3_Output"]
        pub type R = crate::R<u32, super::CCMR3_OUTPUT>;
        #[doc = "Writer for register CCMR3_Output"]
        pub type W = crate::W<u32, super::CCMR3_OUTPUT>;
        #[doc = "Register CCMR3_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR3_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC6M_bit3`"]
        pub type OC6M_BIT3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC6M_bit3`"]
        pub struct OC6M_BIT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC6M_BIT3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `OC5M_bit3`"]
        pub type OC5M_BIT3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC5M_bit3`"]
        pub struct OC5M_BIT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC5M_BIT3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OC6CE`"]
        pub type OC6CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC6CE`"]
        pub struct OC6CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC6CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `OC6M`"]
        pub type OC6M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC6M`"]
        pub struct OC6M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC6M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OC6PE`"]
        pub type OC6PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC6PE`"]
        pub struct OC6PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC6PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC6FE`"]
        pub type OC6FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC6FE`"]
        pub struct OC6FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC6FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OC5CE`"]
        pub type OC5CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC5CE`"]
        pub struct OC5CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC5CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OC5M`"]
        pub type OC5M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC5M`"]
        pub struct OC5M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC5M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC5PE`"]
        pub type OC5PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC5PE`"]
        pub struct OC5PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC5PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC5FE`"]
        pub type OC5FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC5FE`"]
        pub struct OC5FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC5FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - Output Compare 6 mode bit 3"]
            #[inline(always)]
            pub fn oc6m_bit3(&self) -> OC6M_BIT3_R {
                OC6M_BIT3_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Output Compare 5 mode bit 3"]
            #[inline(always)]
            pub fn oc5m_bit3(&self) -> OC5M_BIT3_R {
                OC5M_BIT3_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Output compare 6 clear enable"]
            #[inline(always)]
            pub fn oc6ce(&self) -> OC6CE_R {
                OC6CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 6 mode"]
            #[inline(always)]
            pub fn oc6m(&self) -> OC6M_R {
                OC6M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output compare 6 preload enable"]
            #[inline(always)]
            pub fn oc6pe(&self) -> OC6PE_R {
                OC6PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output compare 6 fast enable"]
            #[inline(always)]
            pub fn oc6fe(&self) -> OC6FE_R {
                OC6FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Output compare 5 clear enable"]
            #[inline(always)]
            pub fn oc5ce(&self) -> OC5CE_R {
                OC5CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 5 mode"]
            #[inline(always)]
            pub fn oc5m(&self) -> OC5M_R {
                OC5M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output compare 5 preload enable"]
            #[inline(always)]
            pub fn oc5pe(&self) -> OC5PE_R {
                OC5PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output compare 5 fast enable"]
            #[inline(always)]
            pub fn oc5fe(&self) -> OC5FE_R {
                OC5FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - Output Compare 6 mode bit 3"]
            #[inline(always)]
            pub fn oc6m_bit3(&mut self) -> OC6M_BIT3_W {
                OC6M_BIT3_W { w: self }
            }
            #[doc = "Bit 16 - Output Compare 5 mode bit 3"]
            #[inline(always)]
            pub fn oc5m_bit3(&mut self) -> OC5M_BIT3_W {
                OC5M_BIT3_W { w: self }
            }
            #[doc = "Bit 15 - Output compare 6 clear enable"]
            #[inline(always)]
            pub fn oc6ce(&mut self) -> OC6CE_W {
                OC6CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 6 mode"]
            #[inline(always)]
            pub fn oc6m(&mut self) -> OC6M_W {
                OC6M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 6 preload enable"]
            #[inline(always)]
            pub fn oc6pe(&mut self) -> OC6PE_W {
                OC6PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 6 fast enable"]
            #[inline(always)]
            pub fn oc6fe(&mut self) -> OC6FE_W {
                OC6FE_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 5 clear enable"]
            #[inline(always)]
            pub fn oc5ce(&mut self) -> OC5CE_W {
                OC5CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 5 mode"]
            #[inline(always)]
            pub fn oc5m(&mut self) -> OC5M_W {
                OC5M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 5 preload enable"]
            #[inline(always)]
            pub fn oc5pe(&mut self) -> OC5PE_W {
                OC5PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 5 fast enable"]
            #[inline(always)]
            pub fn oc5fe(&mut self) -> OC5FE_W {
                OC5FE_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr5](ccr5) module"]
    pub type CCR5 = crate::Reg<u32, _CCR5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR5;
    #[doc = "`read()` method returns [ccr5::R](ccr5::R) reader structure"]
    impl crate::Readable for CCR5 {}
    #[doc = "`write(|w| ..)` method takes [ccr5::W](ccr5::W) writer structure"]
    impl crate::Writable for CCR5 {}
    #[doc = "capture/compare register 4"]
    pub mod ccr5 {
        #[doc = "Reader of register CCR5"]
        pub type R = crate::R<u32, super::CCR5>;
        #[doc = "Writer for register CCR5"]
        pub type W = crate::W<u32, super::CCR5>;
        #[doc = "Register CCR5 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR5 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR5`"]
        pub type CCR5_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR5`"]
        pub struct CCR5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        #[doc = "Reader of field `GC5C1`"]
        pub type GC5C1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GC5C1`"]
        pub struct GC5C1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GC5C1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `GC5C2`"]
        pub type GC5C2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GC5C2`"]
        pub struct GC5C2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GC5C2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `GC5C3`"]
        pub type GC5C3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GC5C3`"]
        pub struct GC5C3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GC5C3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ccr5(&self) -> CCR5_R {
                CCR5_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bit 29 - Group Channel 5 and Channel 1"]
            #[inline(always)]
            pub fn gc5c1(&self) -> GC5C1_R {
                GC5C1_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Group Channel 5 and Channel 2"]
            #[inline(always)]
            pub fn gc5c2(&self) -> GC5C2_R {
                GC5C2_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Group Channel 5 and Channel 3"]
            #[inline(always)]
            pub fn gc5c3(&self) -> GC5C3_R {
                GC5C3_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ccr5(&mut self) -> CCR5_W {
                CCR5_W { w: self }
            }
            #[doc = "Bit 29 - Group Channel 5 and Channel 1"]
            #[inline(always)]
            pub fn gc5c1(&mut self) -> GC5C1_W {
                GC5C1_W { w: self }
            }
            #[doc = "Bit 30 - Group Channel 5 and Channel 2"]
            #[inline(always)]
            pub fn gc5c2(&mut self) -> GC5C2_W {
                GC5C2_W { w: self }
            }
            #[doc = "Bit 31 - Group Channel 5 and Channel 3"]
            #[inline(always)]
            pub fn gc5c3(&mut self) -> GC5C3_W {
                GC5C3_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr6](ccr6) module"]
    pub type CCR6 = crate::Reg<u32, _CCR6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR6;
    #[doc = "`read()` method returns [ccr6::R](ccr6::R) reader structure"]
    impl crate::Readable for CCR6 {}
    #[doc = "`write(|w| ..)` method takes [ccr6::W](ccr6::W) writer structure"]
    impl crate::Writable for CCR6 {}
    #[doc = "capture/compare register 4"]
    pub mod ccr6 {
        #[doc = "Reader of register CCR6"]
        pub type R = crate::R<u32, super::CCR6>;
        #[doc = "Writer for register CCR6"]
        pub type W = crate::W<u32, super::CCR6>;
        #[doc = "Register CCR6 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR6 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR6`"]
        pub type CCR6_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR6`"]
        pub struct CCR6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ccr6(&self) -> CCR6_R {
                CCR6_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture/Compare value"]
            #[inline(always)]
            pub fn ccr6(&mut self) -> CCR6_W {
                CCR6_W { w: self }
            }
        }
    }
    #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [af1](af1) module"]
    pub type AF1 = crate::Reg<u32, _AF1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AF1;
    #[doc = "`read()` method returns [af1::R](af1::R) reader structure"]
    impl crate::Readable for AF1 {}
    #[doc = "`write(|w| ..)` method takes [af1::W](af1::W) writer structure"]
    impl crate::Writable for AF1 {}
    #[doc = "DMA address for full transfer"]
    pub mod af1 {
        #[doc = "Reader of register AF1"]
        pub type R = crate::R<u32, super::AF1>;
        #[doc = "Writer for register AF1"]
        pub type W = crate::W<u32, super::AF1>;
        #[doc = "Register AF1 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::AF1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `BKINE`"]
        pub type BKINE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKINE`"]
        pub struct BKINE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKINE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `BKCMP1E`"]
        pub type BKCMP1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKCMP1E`"]
        pub struct BKCMP1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKCMP1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `BKCMP2E`"]
        pub type BKCMP2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKCMP2E`"]
        pub struct BKCMP2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKCMP2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `BKINP`"]
        pub type BKINP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKINP`"]
        pub struct BKINP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKINP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `BKCMP1P`"]
        pub type BKCMP1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKCMP1P`"]
        pub struct BKCMP1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKCMP1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `BKCMP2P`"]
        pub type BKCMP2P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKCMP2P`"]
        pub struct BKCMP2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKCMP2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `ETRSEL`"]
        pub type ETRSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ETRSEL`"]
        pub struct ETRSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETRSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 14)) | (((value as u32) & 0x07) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - BRK BKIN input enable"]
            #[inline(always)]
            pub fn bkine(&self) -> BKINE_R {
                BKINE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - BRK COMP1 enable"]
            #[inline(always)]
            pub fn bkcmp1e(&self) -> BKCMP1E_R {
                BKCMP1E_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - BRK COMP2 enable"]
            #[inline(always)]
            pub fn bkcmp2e(&self) -> BKCMP2E_R {
                BKCMP2E_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BRK BKIN input polarity"]
            #[inline(always)]
            pub fn bkinp(&self) -> BKINP_R {
                BKINP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - BRK COMP1 input polarity"]
            #[inline(always)]
            pub fn bkcmp1p(&self) -> BKCMP1P_R {
                BKCMP1P_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - BRK COMP2 input polarity"]
            #[inline(always)]
            pub fn bkcmp2p(&self) -> BKCMP2P_R {
                BKCMP2P_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 14:16 - ETR source selection"]
            #[inline(always)]
            pub fn etrsel(&self) -> ETRSEL_R {
                ETRSEL_R::new(((self.bits >> 14) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - BRK BKIN input enable"]
            #[inline(always)]
            pub fn bkine(&mut self) -> BKINE_W {
                BKINE_W { w: self }
            }
            #[doc = "Bit 1 - BRK COMP1 enable"]
            #[inline(always)]
            pub fn bkcmp1e(&mut self) -> BKCMP1E_W {
                BKCMP1E_W { w: self }
            }
            #[doc = "Bit 2 - BRK COMP2 enable"]
            #[inline(always)]
            pub fn bkcmp2e(&mut self) -> BKCMP2E_W {
                BKCMP2E_W { w: self }
            }
            #[doc = "Bit 9 - BRK BKIN input polarity"]
            #[inline(always)]
            pub fn bkinp(&mut self) -> BKINP_W {
                BKINP_W { w: self }
            }
            #[doc = "Bit 10 - BRK COMP1 input polarity"]
            #[inline(always)]
            pub fn bkcmp1p(&mut self) -> BKCMP1P_W {
                BKCMP1P_W { w: self }
            }
            #[doc = "Bit 11 - BRK COMP2 input polarity"]
            #[inline(always)]
            pub fn bkcmp2p(&mut self) -> BKCMP2P_W {
                BKCMP2P_W { w: self }
            }
            #[doc = "Bits 14:16 - ETR source selection"]
            #[inline(always)]
            pub fn etrsel(&mut self) -> ETRSEL_W {
                ETRSEL_W { w: self }
            }
        }
    }
    #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [af2](af2) module"]
    pub type AF2 = crate::Reg<u32, _AF2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AF2;
    #[doc = "`read()` method returns [af2::R](af2::R) reader structure"]
    impl crate::Readable for AF2 {}
    #[doc = "`write(|w| ..)` method takes [af2::W](af2::W) writer structure"]
    impl crate::Writable for AF2 {}
    #[doc = "DMA address for full transfer"]
    pub mod af2 {
        #[doc = "Reader of register AF2"]
        pub type R = crate::R<u32, super::AF2>;
        #[doc = "Writer for register AF2"]
        pub type W = crate::W<u32, super::AF2>;
        #[doc = "Register AF2 `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::AF2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `BK2INE`"]
        pub type BK2INE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2INE`"]
        pub struct BK2INE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2INE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `BK2CMP1E`"]
        pub type BK2CMP1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2CMP1E`"]
        pub struct BK2CMP1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2CMP1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `BK2CMP2E`"]
        pub type BK2CMP2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2CMP2E`"]
        pub struct BK2CMP2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2CMP2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `BK2DFBK0E`"]
        pub type BK2DFBK0E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2DFBK0E`"]
        pub struct BK2DFBK0E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2DFBK0E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `BK2INP`"]
        pub type BK2INP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2INP`"]
        pub struct BK2INP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2INP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `BK2CMP1P`"]
        pub type BK2CMP1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2CMP1P`"]
        pub struct BK2CMP1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2CMP1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `BK2CMP2P`"]
        pub type BK2CMP2P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BK2CMP2P`"]
        pub struct BK2CMP2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BK2CMP2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - BRK2 BKIN input enable"]
            #[inline(always)]
            pub fn bk2ine(&self) -> BK2INE_R {
                BK2INE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - BRK2 COMP1 enable"]
            #[inline(always)]
            pub fn bk2cmp1e(&self) -> BK2CMP1E_R {
                BK2CMP1E_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - BRK2 COMP2 enable"]
            #[inline(always)]
            pub fn bk2cmp2e(&self) -> BK2CMP2E_R {
                BK2CMP2E_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 8 - BRK2 DFSDM_BREAK0 enable"]
            #[inline(always)]
            pub fn bk2dfbk0e(&self) -> BK2DFBK0E_R {
                BK2DFBK0E_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - BRK2 BKIN input polarity"]
            #[inline(always)]
            pub fn bk2inp(&self) -> BK2INP_R {
                BK2INP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - BRK2 COMP1 input polarity"]
            #[inline(always)]
            pub fn bk2cmp1p(&self) -> BK2CMP1P_R {
                BK2CMP1P_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - BRK2 COMP2 input polarity"]
            #[inline(always)]
            pub fn bk2cmp2p(&self) -> BK2CMP2P_R {
                BK2CMP2P_R::new(((self.bits >> 11) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - BRK2 BKIN input enable"]
            #[inline(always)]
            pub fn bk2ine(&mut self) -> BK2INE_W {
                BK2INE_W { w: self }
            }
            #[doc = "Bit 1 - BRK2 COMP1 enable"]
            #[inline(always)]
            pub fn bk2cmp1e(&mut self) -> BK2CMP1E_W {
                BK2CMP1E_W { w: self }
            }
            #[doc = "Bit 2 - BRK2 COMP2 enable"]
            #[inline(always)]
            pub fn bk2cmp2e(&mut self) -> BK2CMP2E_W {
                BK2CMP2E_W { w: self }
            }
            #[doc = "Bit 8 - BRK2 DFSDM_BREAK0 enable"]
            #[inline(always)]
            pub fn bk2dfbk0e(&mut self) -> BK2DFBK0E_W {
                BK2DFBK0E_W { w: self }
            }
            #[doc = "Bit 9 - BRK2 BKIN input polarity"]
            #[inline(always)]
            pub fn bk2inp(&mut self) -> BK2INP_W {
                BK2INP_W { w: self }
            }
            #[doc = "Bit 10 - BRK2 COMP1 input polarity"]
            #[inline(always)]
            pub fn bk2cmp1p(&mut self) -> BK2CMP1P_W {
                BK2CMP1P_W { w: self }
            }
            #[doc = "Bit 11 - BRK2 COMP2 input polarity"]
            #[inline(always)]
            pub fn bk2cmp2p(&mut self) -> BK2CMP2P_W {
                BK2CMP2P_W { w: self }
            }
        }
    }
    #[doc = "TIM1 timer input selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tisel](tisel) module"]
    pub type TISEL = crate::Reg<u32, _TISEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TISEL;
    #[doc = "`read()` method returns [tisel::R](tisel::R) reader structure"]
    impl crate::Readable for TISEL {}
    #[doc = "`write(|w| ..)` method takes [tisel::W](tisel::W) writer structure"]
    impl crate::Writable for TISEL {}
    #[doc = "TIM1 timer input selection register"]
    pub mod tisel {
        #[doc = "Reader of register TISEL"]
        pub type R = crate::R<u32, super::TISEL>;
        #[doc = "Writer for register TISEL"]
        pub type W = crate::W<u32, super::TISEL>;
        #[doc = "Register TISEL `reset()`'s with value 0"]
        impl crate::ResetValue for super::TISEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TI1SEL3_0`"]
        pub type TI1SEL3_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TI1SEL3_0`"]
        pub struct TI1SEL3_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1SEL3_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Reader of field `TI2SEL3_0`"]
        pub type TI2SEL3_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TI2SEL3_0`"]
        pub struct TI2SEL3_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI2SEL3_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TI3SEL3_0`"]
        pub type TI3SEL3_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TI3SEL3_0`"]
        pub struct TI3SEL3_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI3SEL3_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `TI4SEL3_0`"]
        pub type TI4SEL3_0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TI4SEL3_0`"]
        pub struct TI4SEL3_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI4SEL3_0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - selects TI1\\[0\\]
to TI1\\[15\\]
input"]
            #[inline(always)]
            pub fn ti1sel3_0(&self) -> TI1SEL3_0_R {
                TI1SEL3_0_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - selects TI2\\[0\\]
to TI2\\[15\\]
input"]
            #[inline(always)]
            pub fn ti2sel3_0(&self) -> TI2SEL3_0_R {
                TI2SEL3_0_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - selects TI3\\[0\\]
to TI3\\[15\\]
input"]
            #[inline(always)]
            pub fn ti3sel3_0(&self) -> TI3SEL3_0_R {
                TI3SEL3_0_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - selects TI4\\[0\\]
to TI4\\[15\\]
input"]
            #[inline(always)]
            pub fn ti4sel3_0(&self) -> TI4SEL3_0_R {
                TI4SEL3_0_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - selects TI1\\[0\\]
to TI1\\[15\\]
input"]
            #[inline(always)]
            pub fn ti1sel3_0(&mut self) -> TI1SEL3_0_W {
                TI1SEL3_0_W { w: self }
            }
            #[doc = "Bits 8:11 - selects TI2\\[0\\]
to TI2\\[15\\]
input"]
            #[inline(always)]
            pub fn ti2sel3_0(&mut self) -> TI2SEL3_0_W {
                TI2SEL3_0_W { w: self }
            }
            #[doc = "Bits 16:19 - selects TI3\\[0\\]
to TI3\\[15\\]
input"]
            #[inline(always)]
            pub fn ti3sel3_0(&mut self) -> TI3SEL3_0_W {
                TI3SEL3_0_W { w: self }
            }
            #[doc = "Bits 24:27 - selects TI4\\[0\\]
to TI4\\[15\\]
input"]
            #[inline(always)]
            pub fn ti4sel3_0(&mut self) -> TI4SEL3_0_W {
                TI4SEL3_0_W { w: self }
            }
        }
    }
}
#[doc = "Analog to Digital Converter instance 1"]
pub struct ADC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ADC {}
impl ADC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc::RegisterBlock {
        0x4001_2400 as *const _
    }
}
impl Deref for ADC {
    type Target = adc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*ADC::ptr() }
    }
}
#[doc = "Analog to Digital Converter instance 1"]
pub mod adc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - ADC interrupt and status register"]
        pub isr: ISR,
        #[doc = "0x04 - ADC interrupt enable register"]
        pub ier: IER,
        #[doc = "0x08 - ADC control register"]
        pub cr: CR,
        #[doc = "0x0c - ADC configuration register 1"]
        pub cfgr1: CFGR1,
        #[doc = "0x10 - ADC configuration register 2"]
        pub cfgr2: CFGR2,
        #[doc = "0x14 - ADC sampling time register"]
        pub smpr: SMPR,
        _reserved6: [u8; 8usize],
        #[doc = "0x20 - watchdog threshold register"]
        pub awd1tr: AWD1TR,
        #[doc = "0x24 - watchdog threshold register"]
        pub awd2tr: AWD2TR,
        _reserved_8_chselr: [u8; 4usize],
        #[doc = "0x2c - watchdog threshold register"]
        pub awd3tr: AWD3TR,
        _reserved10: [u8; 16usize],
        #[doc = "0x40 - ADC group regular conversion data register"]
        pub dr: DR,
        _reserved11: [u8; 92usize],
        #[doc = "0xa0 - ADC analog watchdog 2 configuration register"]
        pub awd2cr: AWD2CR,
        #[doc = "0xa4 - ADC analog watchdog 3 configuration register"]
        pub awd3cr: AWD3CR,
        _reserved13: [u8; 12usize],
        #[doc = "0xb4 - ADC calibration factors register"]
        pub calfact: CALFACT,
        _reserved14: [u8; 592usize],
        #[doc = "0x308 - ADC common control register"]
        pub ccr: CCR,
    }
    impl RegisterBlock {
        #[doc = "0x28 - channel selection register CHSELRMOD = 1 in ADC_CFGR1"]
        #[inline(always)]
        pub fn chselr_1(&self) -> &CHSELR_1 {
            unsafe { &*(((self as *const Self) as *const u8).add(40usize) as *const CHSELR_1) }
        }
        #[doc = "0x28 - channel selection register CHSELRMOD = 1 in ADC_CFGR1"]
        #[inline(always)]
        pub fn chselr_1_mut(&self) -> &mut CHSELR_1 {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(40usize) as *mut CHSELR_1) }
        }
        #[doc = "0x28 - channel selection register"]
        #[inline(always)]
        pub fn chselr(&self) -> &CHSELR {
            unsafe { &*(((self as *const Self) as *const u8).add(40usize) as *const CHSELR) }
        }
        #[doc = "0x28 - channel selection register"]
        #[inline(always)]
        pub fn chselr_mut(&self) -> &mut CHSELR {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(40usize) as *mut CHSELR) }
        }
    }
    #[doc = "ADC interrupt and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "`write(|w| ..)` method takes [isr::W](isr::W) writer structure"]
    impl crate::Writable for ISR {}
    #[doc = "ADC interrupt and status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Writer for register ISR"]
        pub type W = crate::W<u32, super::ISR>;
        #[doc = "Register ISR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ISR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCRDY`"]
        pub type CCRDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCRDY`"]
        pub struct CCRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCRDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `EOCAL`"]
        pub type EOCAL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOCAL`"]
        pub struct EOCAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOCAL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `AWD3`"]
        pub type AWD3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWD3`"]
        pub struct AWD3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `AWD2`"]
        pub type AWD2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWD2`"]
        pub struct AWD2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `AWD1`"]
        pub type AWD1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWD1`"]
        pub struct AWD1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OVR`"]
        pub type OVR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVR`"]
        pub struct OVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `EOS`"]
        pub type EOS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOS`"]
        pub struct EOS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `EOC`"]
        pub type EOC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOC`"]
        pub struct EOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `EOSMP`"]
        pub type EOSMP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOSMP`"]
        pub struct EOSMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOSMP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `ADRDY`"]
        pub type ADRDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADRDY`"]
        pub struct ADRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADRDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - Channel Configuration Ready flag"]
            #[inline(always)]
            pub fn ccrdy(&self) -> CCRDY_R {
                CCRDY_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - End Of Calibration flag"]
            #[inline(always)]
            pub fn eocal(&self) -> EOCAL_R {
                EOCAL_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - ADC analog watchdog 3 flag"]
            #[inline(always)]
            pub fn awd3(&self) -> AWD3_R {
                AWD3_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ADC analog watchdog 2 flag"]
            #[inline(always)]
            pub fn awd2(&self) -> AWD2_R {
                AWD2_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ADC analog watchdog 1 flag"]
            #[inline(always)]
            pub fn awd1(&self) -> AWD1_R {
                AWD1_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ADC group regular overrun flag"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ADC group regular end of sequence conversions flag"]
            #[inline(always)]
            pub fn eos(&self) -> EOS_R {
                EOS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - ADC group regular end of unitary conversion flag"]
            #[inline(always)]
            pub fn eoc(&self) -> EOC_R {
                EOC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - ADC group regular end of sampling flag"]
            #[inline(always)]
            pub fn eosmp(&self) -> EOSMP_R {
                EOSMP_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - ADC ready flag"]
            #[inline(always)]
            pub fn adrdy(&self) -> ADRDY_R {
                ADRDY_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - Channel Configuration Ready flag"]
            #[inline(always)]
            pub fn ccrdy(&mut self) -> CCRDY_W {
                CCRDY_W { w: self }
            }
            #[doc = "Bit 11 - End Of Calibration flag"]
            #[inline(always)]
            pub fn eocal(&mut self) -> EOCAL_W {
                EOCAL_W { w: self }
            }
            #[doc = "Bit 9 - ADC analog watchdog 3 flag"]
            #[inline(always)]
            pub fn awd3(&mut self) -> AWD3_W {
                AWD3_W { w: self }
            }
            #[doc = "Bit 8 - ADC analog watchdog 2 flag"]
            #[inline(always)]
            pub fn awd2(&mut self) -> AWD2_W {
                AWD2_W { w: self }
            }
            #[doc = "Bit 7 - ADC analog watchdog 1 flag"]
            #[inline(always)]
            pub fn awd1(&mut self) -> AWD1_W {
                AWD1_W { w: self }
            }
            #[doc = "Bit 4 - ADC group regular overrun flag"]
            #[inline(always)]
            pub fn ovr(&mut self) -> OVR_W {
                OVR_W { w: self }
            }
            #[doc = "Bit 3 - ADC group regular end of sequence conversions flag"]
            #[inline(always)]
            pub fn eos(&mut self) -> EOS_W {
                EOS_W { w: self }
            }
            #[doc = "Bit 2 - ADC group regular end of unitary conversion flag"]
            #[inline(always)]
            pub fn eoc(&mut self) -> EOC_W {
                EOC_W { w: self }
            }
            #[doc = "Bit 1 - ADC group regular end of sampling flag"]
            #[inline(always)]
            pub fn eosmp(&mut self) -> EOSMP_W {
                EOSMP_W { w: self }
            }
            #[doc = "Bit 0 - ADC ready flag"]
            #[inline(always)]
            pub fn adrdy(&mut self) -> ADRDY_W {
                ADRDY_W { w: self }
            }
        }
    }
    #[doc = "ADC interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ier](ier) module"]
    pub type IER = crate::Reg<u32, _IER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IER;
    #[doc = "`read()` method returns [ier::R](ier::R) reader structure"]
    impl crate::Readable for IER {}
    #[doc = "`write(|w| ..)` method takes [ier::W](ier::W) writer structure"]
    impl crate::Writable for IER {}
    #[doc = "ADC interrupt enable register"]
    pub mod ier {
        #[doc = "Reader of register IER"]
        pub type R = crate::R<u32, super::IER>;
        #[doc = "Writer for register IER"]
        pub type W = crate::W<u32, super::IER>;
        #[doc = "Register IER `reset()`'s with value 0"]
        impl crate::ResetValue for super::IER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCRDYIE`"]
        pub type CCRDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCRDYIE`"]
        pub struct CCRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `EOCALIE`"]
        pub type EOCALIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOCALIE`"]
        pub struct EOCALIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOCALIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `AWD3IE`"]
        pub type AWD3IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWD3IE`"]
        pub struct AWD3IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD3IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `AWD2IE`"]
        pub type AWD2IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWD2IE`"]
        pub struct AWD2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD2IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `AWD1IE`"]
        pub type AWD1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWD1IE`"]
        pub struct AWD1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OVRIE`"]
        pub type OVRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVRIE`"]
        pub struct OVRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `EOSIE`"]
        pub type EOSIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOSIE`"]
        pub struct EOSIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOSIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `EOCIE`"]
        pub type EOCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOCIE`"]
        pub struct EOCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `EOSMPIE`"]
        pub type EOSMPIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EOSMPIE`"]
        pub struct EOSMPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EOSMPIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `ADRDYIE`"]
        pub type ADRDYIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADRDYIE`"]
        pub struct ADRDYIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADRDYIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 13 - Channel Configuration Ready Interrupt enable"]
            #[inline(always)]
            pub fn ccrdyie(&self) -> CCRDYIE_R {
                CCRDYIE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 11 - End of calibration interrupt enable"]
            #[inline(always)]
            pub fn eocalie(&self) -> EOCALIE_R {
                EOCALIE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - ADC analog watchdog 3 interrupt"]
            #[inline(always)]
            pub fn awd3ie(&self) -> AWD3IE_R {
                AWD3IE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ADC analog watchdog 2 interrupt"]
            #[inline(always)]
            pub fn awd2ie(&self) -> AWD2IE_R {
                AWD2IE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - ADC analog watchdog 1 interrupt"]
            #[inline(always)]
            pub fn awd1ie(&self) -> AWD1IE_R {
                AWD1IE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ADC group regular overrun interrupt"]
            #[inline(always)]
            pub fn ovrie(&self) -> OVRIE_R {
                OVRIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ADC group regular end of sequence conversions interrupt"]
            #[inline(always)]
            pub fn eosie(&self) -> EOSIE_R {
                EOSIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - ADC group regular end of unitary conversion interrupt"]
            #[inline(always)]
            pub fn eocie(&self) -> EOCIE_R {
                EOCIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - ADC group regular end of sampling interrupt"]
            #[inline(always)]
            pub fn eosmpie(&self) -> EOSMPIE_R {
                EOSMPIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - ADC ready interrupt"]
            #[inline(always)]
            pub fn adrdyie(&self) -> ADRDYIE_R {
                ADRDYIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 13 - Channel Configuration Ready Interrupt enable"]
            #[inline(always)]
            pub fn ccrdyie(&mut self) -> CCRDYIE_W {
                CCRDYIE_W { w: self }
            }
            #[doc = "Bit 11 - End of calibration interrupt enable"]
            #[inline(always)]
            pub fn eocalie(&mut self) -> EOCALIE_W {
                EOCALIE_W { w: self }
            }
            #[doc = "Bit 9 - ADC analog watchdog 3 interrupt"]
            #[inline(always)]
            pub fn awd3ie(&mut self) -> AWD3IE_W {
                AWD3IE_W { w: self }
            }
            #[doc = "Bit 8 - ADC analog watchdog 2 interrupt"]
            #[inline(always)]
            pub fn awd2ie(&mut self) -> AWD2IE_W {
                AWD2IE_W { w: self }
            }
            #[doc = "Bit 7 - ADC analog watchdog 1 interrupt"]
            #[inline(always)]
            pub fn awd1ie(&mut self) -> AWD1IE_W {
                AWD1IE_W { w: self }
            }
            #[doc = "Bit 4 - ADC group regular overrun interrupt"]
            #[inline(always)]
            pub fn ovrie(&mut self) -> OVRIE_W {
                OVRIE_W { w: self }
            }
            #[doc = "Bit 3 - ADC group regular end of sequence conversions interrupt"]
            #[inline(always)]
            pub fn eosie(&mut self) -> EOSIE_W {
                EOSIE_W { w: self }
            }
            #[doc = "Bit 2 - ADC group regular end of unitary conversion interrupt"]
            #[inline(always)]
            pub fn eocie(&mut self) -> EOCIE_W {
                EOCIE_W { w: self }
            }
            #[doc = "Bit 1 - ADC group regular end of sampling interrupt"]
            #[inline(always)]
            pub fn eosmpie(&mut self) -> EOSMPIE_W {
                EOSMPIE_W { w: self }
            }
            #[doc = "Bit 0 - ADC ready interrupt"]
            #[inline(always)]
            pub fn adrdyie(&mut self) -> ADRDYIE_W {
                ADRDYIE_W { w: self }
            }
        }
    }
    #[doc = "ADC control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "ADC control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADCAL`"]
        pub type ADCAL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADCAL`"]
        pub struct ADCAL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADCAL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `ADVREGEN`"]
        pub type ADVREGEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADVREGEN`"]
        pub struct ADVREGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADVREGEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `ADSTP`"]
        pub type ADSTP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADSTP`"]
        pub struct ADSTP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADSTP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ADSTART`"]
        pub type ADSTART_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADSTART`"]
        pub struct ADSTART_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADSTART_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ADDIS`"]
        pub type ADDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADDIS`"]
        pub struct ADDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `ADEN`"]
        pub type ADEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADEN`"]
        pub struct ADEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - ADC calibration"]
            #[inline(always)]
            pub fn adcal(&self) -> ADCAL_R {
                ADCAL_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 28 - ADC voltage regulator enable"]
            #[inline(always)]
            pub fn advregen(&self) -> ADVREGEN_R {
                ADVREGEN_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 4 - ADC group regular conversion stop"]
            #[inline(always)]
            pub fn adstp(&self) -> ADSTP_R {
                ADSTP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 2 - ADC group regular conversion start"]
            #[inline(always)]
            pub fn adstart(&self) -> ADSTART_R {
                ADSTART_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - ADC disable"]
            #[inline(always)]
            pub fn addis(&self) -> ADDIS_R {
                ADDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - ADC enable"]
            #[inline(always)]
            pub fn aden(&self) -> ADEN_R {
                ADEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - ADC calibration"]
            #[inline(always)]
            pub fn adcal(&mut self) -> ADCAL_W {
                ADCAL_W { w: self }
            }
            #[doc = "Bit 28 - ADC voltage regulator enable"]
            #[inline(always)]
            pub fn advregen(&mut self) -> ADVREGEN_W {
                ADVREGEN_W { w: self }
            }
            #[doc = "Bit 4 - ADC group regular conversion stop"]
            #[inline(always)]
            pub fn adstp(&mut self) -> ADSTP_W {
                ADSTP_W { w: self }
            }
            #[doc = "Bit 2 - ADC group regular conversion start"]
            #[inline(always)]
            pub fn adstart(&mut self) -> ADSTART_W {
                ADSTART_W { w: self }
            }
            #[doc = "Bit 1 - ADC disable"]
            #[inline(always)]
            pub fn addis(&mut self) -> ADDIS_W {
                ADDIS_W { w: self }
            }
            #[doc = "Bit 0 - ADC enable"]
            #[inline(always)]
            pub fn aden(&mut self) -> ADEN_W {
                ADEN_W { w: self }
            }
        }
    }
    #[doc = "ADC configuration register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr1](cfgr1) module"]
    pub type CFGR1 = crate::Reg<u32, _CFGR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR1;
    #[doc = "`read()` method returns [cfgr1::R](cfgr1::R) reader structure"]
    impl crate::Readable for CFGR1 {}
    #[doc = "`write(|w| ..)` method takes [cfgr1::W](cfgr1::W) writer structure"]
    impl crate::Writable for CFGR1 {}
    #[doc = "ADC configuration register 1"]
    pub mod cfgr1 {
        #[doc = "Reader of register CFGR1"]
        pub type R = crate::R<u32, super::CFGR1>;
        #[doc = "Writer for register CFGR1"]
        pub type W = crate::W<u32, super::CFGR1>;
        #[doc = "Register CFGR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AWDCH1CH`"]
        pub type AWDCH1CH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `AWDCH1CH`"]
        pub struct AWDCH1CH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWDCH1CH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 26)) | (((value as u32) & 0x1f) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `AWD1EN`"]
        pub type AWD1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWD1EN`"]
        pub struct AWD1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `AWD1SGL`"]
        pub type AWD1SGL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AWD1SGL`"]
        pub struct AWD1SGL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD1SGL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `CHSELRMOD`"]
        pub type CHSELRMOD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CHSELRMOD`"]
        pub struct CHSELRMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSELRMOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `DISCEN`"]
        pub type DISCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISCEN`"]
        pub struct DISCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `AUTOFF`"]
        pub type AUTOFF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUTOFF`"]
        pub struct AUTOFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUTOFF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `WAIT`"]
        pub type WAIT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WAIT`"]
        pub struct WAIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CONT`"]
        pub type CONT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CONT`"]
        pub struct CONT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CONT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `OVRMOD`"]
        pub type OVRMOD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVRMOD`"]
        pub struct OVRMOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVRMOD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `EXTEN`"]
        pub type EXTEN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTEN`"]
        pub struct EXTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `EXTSEL`"]
        pub type EXTSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `EXTSEL`"]
        pub struct EXTSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 6)) | (((value as u32) & 0x07) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ALIGN`"]
        pub type ALIGN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALIGN`"]
        pub struct ALIGN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALIGN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `RES`"]
        pub type RES_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RES`"]
        pub struct RES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `SCANDIR`"]
        pub type SCANDIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SCANDIR`"]
        pub struct SCANDIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCANDIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DMACFG`"]
        pub type DMACFG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMACFG`"]
        pub struct DMACFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMACFG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DMAEN`"]
        pub type DMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAEN`"]
        pub struct DMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 26:30 - ADC analog watchdog 1 monitored channel selection"]
            #[inline(always)]
            pub fn awdch1ch(&self) -> AWDCH1CH_R {
                AWDCH1CH_R::new(((self.bits >> 26) & 0x1f) as u8)
            }
            #[doc = "Bit 23 - ADC analog watchdog 1 enable on scope ADC group regular"]
            #[inline(always)]
            pub fn awd1en(&self) -> AWD1EN_R {
                AWD1EN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - ADC analog watchdog 1 monitoring a single channel or all channels"]
            #[inline(always)]
            pub fn awd1sgl(&self) -> AWD1SGL_R {
                AWD1SGL_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Mode selection of the ADC_CHSELR register"]
            #[inline(always)]
            pub fn chselrmod(&self) -> CHSELRMOD_R {
                CHSELRMOD_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 16 - ADC group regular sequencer discontinuous mode"]
            #[inline(always)]
            pub fn discen(&self) -> DISCEN_R {
                DISCEN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Auto-off mode"]
            #[inline(always)]
            pub fn autoff(&self) -> AUTOFF_R {
                AUTOFF_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Wait conversion mode"]
            #[inline(always)]
            pub fn wait(&self) -> WAIT_R {
                WAIT_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - ADC group regular continuous conversion mode"]
            #[inline(always)]
            pub fn cont(&self) -> CONT_R {
                CONT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - ADC group regular overrun configuration"]
            #[inline(always)]
            pub fn ovrmod(&self) -> OVRMOD_R {
                OVRMOD_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 10:11 - ADC group regular external trigger polarity"]
            #[inline(always)]
            pub fn exten(&self) -> EXTEN_R {
                EXTEN_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 6:8 - ADC group regular external trigger source"]
            #[inline(always)]
            pub fn extsel(&self) -> EXTSEL_R {
                EXTSEL_R::new(((self.bits >> 6) & 0x07) as u8)
            }
            #[doc = "Bit 5 - ADC data alignement"]
            #[inline(always)]
            pub fn align(&self) -> ALIGN_R {
                ALIGN_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bits 3:4 - ADC data resolution"]
            #[inline(always)]
            pub fn res(&self) -> RES_R {
                RES_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bit 2 - Scan sequence direction"]
            #[inline(always)]
            pub fn scandir(&self) -> SCANDIR_R {
                SCANDIR_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - ADC DMA transfer configuration"]
            #[inline(always)]
            pub fn dmacfg(&self) -> DMACFG_R {
                DMACFG_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - ADC DMA transfer enable"]
            #[inline(always)]
            pub fn dmaen(&self) -> DMAEN_R {
                DMAEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 26:30 - ADC analog watchdog 1 monitored channel selection"]
            #[inline(always)]
            pub fn awdch1ch(&mut self) -> AWDCH1CH_W {
                AWDCH1CH_W { w: self }
            }
            #[doc = "Bit 23 - ADC analog watchdog 1 enable on scope ADC group regular"]
            #[inline(always)]
            pub fn awd1en(&mut self) -> AWD1EN_W {
                AWD1EN_W { w: self }
            }
            #[doc = "Bit 22 - ADC analog watchdog 1 monitoring a single channel or all channels"]
            #[inline(always)]
            pub fn awd1sgl(&mut self) -> AWD1SGL_W {
                AWD1SGL_W { w: self }
            }
            #[doc = "Bit 21 - Mode selection of the ADC_CHSELR register"]
            #[inline(always)]
            pub fn chselrmod(&mut self) -> CHSELRMOD_W {
                CHSELRMOD_W { w: self }
            }
            #[doc = "Bit 16 - ADC group regular sequencer discontinuous mode"]
            #[inline(always)]
            pub fn discen(&mut self) -> DISCEN_W {
                DISCEN_W { w: self }
            }
            #[doc = "Bit 15 - Auto-off mode"]
            #[inline(always)]
            pub fn autoff(&mut self) -> AUTOFF_W {
                AUTOFF_W { w: self }
            }
            #[doc = "Bit 14 - Wait conversion mode"]
            #[inline(always)]
            pub fn wait(&mut self) -> WAIT_W {
                WAIT_W { w: self }
            }
            #[doc = "Bit 13 - ADC group regular continuous conversion mode"]
            #[inline(always)]
            pub fn cont(&mut self) -> CONT_W {
                CONT_W { w: self }
            }
            #[doc = "Bit 12 - ADC group regular overrun configuration"]
            #[inline(always)]
            pub fn ovrmod(&mut self) -> OVRMOD_W {
                OVRMOD_W { w: self }
            }
            #[doc = "Bits 10:11 - ADC group regular external trigger polarity"]
            #[inline(always)]
            pub fn exten(&mut self) -> EXTEN_W {
                EXTEN_W { w: self }
            }
            #[doc = "Bits 6:8 - ADC group regular external trigger source"]
            #[inline(always)]
            pub fn extsel(&mut self) -> EXTSEL_W {
                EXTSEL_W { w: self }
            }
            #[doc = "Bit 5 - ADC data alignement"]
            #[inline(always)]
            pub fn align(&mut self) -> ALIGN_W {
                ALIGN_W { w: self }
            }
            #[doc = "Bits 3:4 - ADC data resolution"]
            #[inline(always)]
            pub fn res(&mut self) -> RES_W {
                RES_W { w: self }
            }
            #[doc = "Bit 2 - Scan sequence direction"]
            #[inline(always)]
            pub fn scandir(&mut self) -> SCANDIR_W {
                SCANDIR_W { w: self }
            }
            #[doc = "Bit 1 - ADC DMA transfer configuration"]
            #[inline(always)]
            pub fn dmacfg(&mut self) -> DMACFG_W {
                DMACFG_W { w: self }
            }
            #[doc = "Bit 0 - ADC DMA transfer enable"]
            #[inline(always)]
            pub fn dmaen(&mut self) -> DMAEN_W {
                DMAEN_W { w: self }
            }
        }
    }
    #[doc = "ADC configuration register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr2](cfgr2) module"]
    pub type CFGR2 = crate::Reg<u32, _CFGR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR2;
    #[doc = "`read()` method returns [cfgr2::R](cfgr2::R) reader structure"]
    impl crate::Readable for CFGR2 {}
    #[doc = "`write(|w| ..)` method takes [cfgr2::W](cfgr2::W) writer structure"]
    impl crate::Writable for CFGR2 {}
    #[doc = "ADC configuration register 2"]
    pub mod cfgr2 {
        #[doc = "Reader of register CFGR2"]
        pub type R = crate::R<u32, super::CFGR2>;
        #[doc = "Writer for register CFGR2"]
        pub type W = crate::W<u32, super::CFGR2>;
        #[doc = "Register CFGR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CKMODE`"]
        pub type CKMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CKMODE`"]
        pub struct CKMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `LFTRIG`"]
        pub type LFTRIG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LFTRIG`"]
        pub struct LFTRIG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LFTRIG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `TOVS`"]
        pub type TOVS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TOVS`"]
        pub struct TOVS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TOVS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `OVSS`"]
        pub type OVSS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OVSS`"]
        pub struct OVSS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVSS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 5)) | (((value as u32) & 0x0f) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `OVSR`"]
        pub type OVSR_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OVSR`"]
        pub struct OVSR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVSR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 2)) | (((value as u32) & 0x07) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OVSE`"]
        pub type OVSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVSE`"]
        pub struct OVSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 30:31 - ADC clock mode"]
            #[inline(always)]
            pub fn ckmode(&self) -> CKMODE_R {
                CKMODE_R::new(((self.bits >> 30) & 0x03) as u8)
            }
            #[doc = "Bit 29 - Low frequency trigger mode enable"]
            #[inline(always)]
            pub fn lftrig(&self) -> LFTRIG_R {
                LFTRIG_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 9 - ADC oversampling discontinuous mode (triggered mode) for ADC group regular"]
            #[inline(always)]
            pub fn tovs(&self) -> TOVS_R {
                TOVS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bits 5:8 - ADC oversampling shift"]
            #[inline(always)]
            pub fn ovss(&self) -> OVSS_R {
                OVSS_R::new(((self.bits >> 5) & 0x0f) as u8)
            }
            #[doc = "Bits 2:4 - ADC oversampling ratio"]
            #[inline(always)]
            pub fn ovsr(&self) -> OVSR_R {
                OVSR_R::new(((self.bits >> 2) & 0x07) as u8)
            }
            #[doc = "Bit 0 - ADC oversampler enable on scope ADC group regular"]
            #[inline(always)]
            pub fn ovse(&self) -> OVSE_R {
                OVSE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 30:31 - ADC clock mode"]
            #[inline(always)]
            pub fn ckmode(&mut self) -> CKMODE_W {
                CKMODE_W { w: self }
            }
            #[doc = "Bit 29 - Low frequency trigger mode enable"]
            #[inline(always)]
            pub fn lftrig(&mut self) -> LFTRIG_W {
                LFTRIG_W { w: self }
            }
            #[doc = "Bit 9 - ADC oversampling discontinuous mode (triggered mode) for ADC group regular"]
            #[inline(always)]
            pub fn tovs(&mut self) -> TOVS_W {
                TOVS_W { w: self }
            }
            #[doc = "Bits 5:8 - ADC oversampling shift"]
            #[inline(always)]
            pub fn ovss(&mut self) -> OVSS_W {
                OVSS_W { w: self }
            }
            #[doc = "Bits 2:4 - ADC oversampling ratio"]
            #[inline(always)]
            pub fn ovsr(&mut self) -> OVSR_W {
                OVSR_W { w: self }
            }
            #[doc = "Bit 0 - ADC oversampler enable on scope ADC group regular"]
            #[inline(always)]
            pub fn ovse(&mut self) -> OVSE_W {
                OVSE_W { w: self }
            }
        }
    }
    #[doc = "ADC sampling time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smpr](smpr) module"]
    pub type SMPR = crate::Reg<u32, _SMPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMPR;
    #[doc = "`read()` method returns [smpr::R](smpr::R) reader structure"]
    impl crate::Readable for SMPR {}
    #[doc = "`write(|w| ..)` method takes [smpr::W](smpr::W) writer structure"]
    impl crate::Writable for SMPR {}
    #[doc = "ADC sampling time register"]
    pub mod smpr {
        #[doc = "Reader of register SMPR"]
        pub type R = crate::R<u32, super::SMPR>;
        #[doc = "Writer for register SMPR"]
        pub type W = crate::W<u32, super::SMPR>;
        #[doc = "Register SMPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SMP1`"]
        pub type SMP1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SMP1`"]
        pub struct SMP1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        #[doc = "Reader of field `SMP2`"]
        pub type SMP2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SMP2`"]
        pub struct SMP2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMP2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SMPSEL`"]
        pub type SMPSEL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `SMPSEL`"]
        pub struct SMPSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMPSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits =
                    (self.w.bits & !(0x0007_ffff << 8)) | (((value as u32) & 0x0007_ffff) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - Sampling time selection"]
            #[inline(always)]
            pub fn smp1(&self) -> SMP1_R {
                SMP1_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 4:6 - Sampling time selection"]
            #[inline(always)]
            pub fn smp2(&self) -> SMP2_R {
                SMP2_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 8:26 - Channel sampling time selection"]
            #[inline(always)]
            pub fn smpsel(&self) -> SMPSEL_R {
                SMPSEL_R::new(((self.bits >> 8) & 0x0007_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Sampling time selection"]
            #[inline(always)]
            pub fn smp1(&mut self) -> SMP1_W {
                SMP1_W { w: self }
            }
            #[doc = "Bits 4:6 - Sampling time selection"]
            #[inline(always)]
            pub fn smp2(&mut self) -> SMP2_W {
                SMP2_W { w: self }
            }
            #[doc = "Bits 8:26 - Channel sampling time selection"]
            #[inline(always)]
            pub fn smpsel(&mut self) -> SMPSEL_W {
                SMPSEL_W { w: self }
            }
        }
    }
    #[doc = "watchdog threshold register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [awd1tr](awd1tr) module"]
    pub type AWD1TR = crate::Reg<u32, _AWD1TR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AWD1TR;
    #[doc = "`read()` method returns [awd1tr::R](awd1tr::R) reader structure"]
    impl crate::Readable for AWD1TR {}
    #[doc = "`write(|w| ..)` method takes [awd1tr::W](awd1tr::W) writer structure"]
    impl crate::Writable for AWD1TR {}
    #[doc = "watchdog threshold register"]
    pub mod awd1tr {
        #[doc = "Reader of register AWD1TR"]
        pub type R = crate::R<u32, super::AWD1TR>;
        #[doc = "Writer for register AWD1TR"]
        pub type W = crate::W<u32, super::AWD1TR>;
        #[doc = "Register AWD1TR `reset()`'s with value 0x0fff_0000"]
        impl crate::ResetValue for super::AWD1TR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff_0000
            }
        }
        #[doc = "Reader of field `HT1`"]
        pub type HT1_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `HT1`"]
        pub struct HT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 16)) | (((value as u32) & 0x0fff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `LT1`"]
        pub type LT1_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `LT1`"]
        pub struct LT1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LT1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:27 - ADC analog watchdog 1 threshold high"]
            #[inline(always)]
            pub fn ht1(&self) -> HT1_R {
                HT1_R::new(((self.bits >> 16) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:11 - ADC analog watchdog 1 threshold low"]
            #[inline(always)]
            pub fn lt1(&self) -> LT1_R {
                LT1_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:27 - ADC analog watchdog 1 threshold high"]
            #[inline(always)]
            pub fn ht1(&mut self) -> HT1_W {
                HT1_W { w: self }
            }
            #[doc = "Bits 0:11 - ADC analog watchdog 1 threshold low"]
            #[inline(always)]
            pub fn lt1(&mut self) -> LT1_W {
                LT1_W { w: self }
            }
        }
    }
    #[doc = "watchdog threshold register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [awd2tr](awd2tr) module"]
    pub type AWD2TR = crate::Reg<u32, _AWD2TR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AWD2TR;
    #[doc = "`read()` method returns [awd2tr::R](awd2tr::R) reader structure"]
    impl crate::Readable for AWD2TR {}
    #[doc = "`write(|w| ..)` method takes [awd2tr::W](awd2tr::W) writer structure"]
    impl crate::Writable for AWD2TR {}
    #[doc = "watchdog threshold register"]
    pub mod awd2tr {
        #[doc = "Reader of register AWD2TR"]
        pub type R = crate::R<u32, super::AWD2TR>;
        #[doc = "Writer for register AWD2TR"]
        pub type W = crate::W<u32, super::AWD2TR>;
        #[doc = "Register AWD2TR `reset()`'s with value 0x0fff_0000"]
        impl crate::ResetValue for super::AWD2TR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff_0000
            }
        }
        #[doc = "Reader of field `HT2`"]
        pub type HT2_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `HT2`"]
        pub struct HT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 16)) | (((value as u32) & 0x0fff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `LT2`"]
        pub type LT2_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `LT2`"]
        pub struct LT2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LT2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:27 - ADC analog watchdog 2 threshold high"]
            #[inline(always)]
            pub fn ht2(&self) -> HT2_R {
                HT2_R::new(((self.bits >> 16) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:11 - ADC analog watchdog 2 threshold low"]
            #[inline(always)]
            pub fn lt2(&self) -> LT2_R {
                LT2_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:27 - ADC analog watchdog 2 threshold high"]
            #[inline(always)]
            pub fn ht2(&mut self) -> HT2_W {
                HT2_W { w: self }
            }
            #[doc = "Bits 0:11 - ADC analog watchdog 2 threshold low"]
            #[inline(always)]
            pub fn lt2(&mut self) -> LT2_W {
                LT2_W { w: self }
            }
        }
    }
    #[doc = "channel selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chselr](chselr) module"]
    pub type CHSELR = crate::Reg<u32, _CHSELR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CHSELR;
    #[doc = "`read()` method returns [chselr::R](chselr::R) reader structure"]
    impl crate::Readable for CHSELR {}
    #[doc = "`write(|w| ..)` method takes [chselr::W](chselr::W) writer structure"]
    impl crate::Writable for CHSELR {}
    #[doc = "channel selection register"]
    pub mod chselr {
        #[doc = "Reader of register CHSELR"]
        pub type R = crate::R<u32, super::CHSELR>;
        #[doc = "Writer for register CHSELR"]
        pub type W = crate::W<u32, super::CHSELR>;
        #[doc = "Register CHSELR `reset()`'s with value 0x0fff_0000"]
        impl crate::ResetValue for super::CHSELR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff_0000
            }
        }
        #[doc = "Reader of field `CHSEL`"]
        pub type CHSEL_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CHSEL`"]
        pub struct CHSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CHSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0007_ffff) | ((value as u32) & 0x0007_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:18 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel(&self) -> CHSEL_R {
                CHSEL_R::new((self.bits & 0x0007_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:18 - Channel-x selection"]
            #[inline(always)]
            pub fn chsel(&mut self) -> CHSEL_W {
                CHSEL_W { w: self }
            }
        }
    }
    #[doc = "channel selection register CHSELRMOD = 1 in ADC_CFGR1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [chselr_1](chselr_1) module"]
    pub type CHSELR_1 = crate::Reg<u32, _CHSELR_1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CHSELR_1;
    #[doc = "`read()` method returns [chselr_1::R](chselr_1::R) reader structure"]
    impl crate::Readable for CHSELR_1 {}
    #[doc = "`write(|w| ..)` method takes [chselr_1::W](chselr_1::W) writer structure"]
    impl crate::Writable for CHSELR_1 {}
    #[doc = "channel selection register CHSELRMOD = 1 in ADC_CFGR1"]
    pub mod chselr_1 {
        #[doc = "Reader of register CHSELR_1"]
        pub type R = crate::R<u32, super::CHSELR_1>;
        #[doc = "Writer for register CHSELR_1"]
        pub type W = crate::W<u32, super::CHSELR_1>;
        #[doc = "Register CHSELR_1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CHSELR_1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SQ1`"]
        pub type SQ1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ1`"]
        pub struct SQ1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Reader of field `SQ2`"]
        pub type SQ2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ2`"]
        pub struct SQ2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SQ3`"]
        pub type SQ3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ3`"]
        pub struct SQ3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SQ4`"]
        pub type SQ4_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ4`"]
        pub struct SQ4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ4_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `SQ5`"]
        pub type SQ5_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ5`"]
        pub struct SQ5_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ5_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SQ6`"]
        pub type SQ6_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ6`"]
        pub struct SQ6_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ6_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `SQ7`"]
        pub type SQ7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ7`"]
        pub struct SQ7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `SQ8`"]
        pub type SQ8_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SQ8`"]
        pub struct SQ8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SQ8_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq1(&self) -> SQ1_R {
                SQ1_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq2(&self) -> SQ2_R {
                SQ2_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq3(&self) -> SQ3_R {
                SQ3_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq4(&self) -> SQ4_R {
                SQ4_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq5(&self) -> SQ5_R {
                SQ5_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq6(&self) -> SQ6_R {
                SQ6_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq7(&self) -> SQ7_R {
                SQ7_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 28:31 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq8(&self) -> SQ8_R {
                SQ8_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq1(&mut self) -> SQ1_W {
                SQ1_W { w: self }
            }
            #[doc = "Bits 4:7 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq2(&mut self) -> SQ2_W {
                SQ2_W { w: self }
            }
            #[doc = "Bits 8:11 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq3(&mut self) -> SQ3_W {
                SQ3_W { w: self }
            }
            #[doc = "Bits 12:15 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq4(&mut self) -> SQ4_W {
                SQ4_W { w: self }
            }
            #[doc = "Bits 16:19 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq5(&mut self) -> SQ5_W {
                SQ5_W { w: self }
            }
            #[doc = "Bits 20:23 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq6(&mut self) -> SQ6_W {
                SQ6_W { w: self }
            }
            #[doc = "Bits 24:27 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq7(&mut self) -> SQ7_W {
                SQ7_W { w: self }
            }
            #[doc = "Bits 28:31 - conversion of the sequence"]
            #[inline(always)]
            pub fn sq8(&mut self) -> SQ8_W {
                SQ8_W { w: self }
            }
        }
    }
    #[doc = "watchdog threshold register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [awd3tr](awd3tr) module"]
    pub type AWD3TR = crate::Reg<u32, _AWD3TR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AWD3TR;
    #[doc = "`read()` method returns [awd3tr::R](awd3tr::R) reader structure"]
    impl crate::Readable for AWD3TR {}
    #[doc = "`write(|w| ..)` method takes [awd3tr::W](awd3tr::W) writer structure"]
    impl crate::Writable for AWD3TR {}
    #[doc = "watchdog threshold register"]
    pub mod awd3tr {
        #[doc = "Reader of register AWD3TR"]
        pub type R = crate::R<u32, super::AWD3TR>;
        #[doc = "Writer for register AWD3TR"]
        pub type W = crate::W<u32, super::AWD3TR>;
        #[doc = "Register AWD3TR `reset()`'s with value 0x0fff_0000"]
        impl crate::ResetValue for super::AWD3TR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x0fff_0000
            }
        }
        #[doc = "Reader of field `HT3`"]
        pub type HT3_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `HT3`"]
        pub struct HT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 16)) | (((value as u32) & 0x0fff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `LT3`"]
        pub type LT3_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `LT3`"]
        pub struct LT3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LT3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:27 - ADC analog watchdog 3 threshold high"]
            #[inline(always)]
            pub fn ht3(&self) -> HT3_R {
                HT3_R::new(((self.bits >> 16) & 0x0fff) as u16)
            }
            #[doc = "Bits 0:11 - ADC analog watchdog 3 threshold high"]
            #[inline(always)]
            pub fn lt3(&self) -> LT3_R {
                LT3_R::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:27 - ADC analog watchdog 3 threshold high"]
            #[inline(always)]
            pub fn ht3(&mut self) -> HT3_W {
                HT3_W { w: self }
            }
            #[doc = "Bits 0:11 - ADC analog watchdog 3 threshold high"]
            #[inline(always)]
            pub fn lt3(&mut self) -> LT3_W {
                LT3_W { w: self }
            }
        }
    }
    #[doc = "ADC group regular conversion data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "ADC group regular conversion data register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Reader of field `regularDATA`"]
        pub type REGULARDATA_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - ADC group regular conversion data"]
            #[inline(always)]
            pub fn regular_data(&self) -> REGULARDATA_R {
                REGULARDATA_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "ADC analog watchdog 2 configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [awd2cr](awd2cr) module"]
    pub type AWD2CR = crate::Reg<u32, _AWD2CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AWD2CR;
    #[doc = "`read()` method returns [awd2cr::R](awd2cr::R) reader structure"]
    impl crate::Readable for AWD2CR {}
    #[doc = "`write(|w| ..)` method takes [awd2cr::W](awd2cr::W) writer structure"]
    impl crate::Writable for AWD2CR {}
    #[doc = "ADC analog watchdog 2 configuration register"]
    pub mod awd2cr {
        #[doc = "Reader of register AWD2CR"]
        pub type R = crate::R<u32, super::AWD2CR>;
        #[doc = "Writer for register AWD2CR"]
        pub type W = crate::W<u32, super::AWD2CR>;
        #[doc = "Register AWD2CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::AWD2CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AWD2CH`"]
        pub type AWD2CH_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `AWD2CH`"]
        pub struct AWD2CH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD2CH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0007_ffff) | ((value as u32) & 0x0007_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:18 - ADC analog watchdog 2 monitored channel selection"]
            #[inline(always)]
            pub fn awd2ch(&self) -> AWD2CH_R {
                AWD2CH_R::new((self.bits & 0x0007_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:18 - ADC analog watchdog 2 monitored channel selection"]
            #[inline(always)]
            pub fn awd2ch(&mut self) -> AWD2CH_W {
                AWD2CH_W { w: self }
            }
        }
    }
    #[doc = "ADC analog watchdog 3 configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [awd3cr](awd3cr) module"]
    pub type AWD3CR = crate::Reg<u32, _AWD3CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AWD3CR;
    #[doc = "`read()` method returns [awd3cr::R](awd3cr::R) reader structure"]
    impl crate::Readable for AWD3CR {}
    #[doc = "`write(|w| ..)` method takes [awd3cr::W](awd3cr::W) writer structure"]
    impl crate::Writable for AWD3CR {}
    #[doc = "ADC analog watchdog 3 configuration register"]
    pub mod awd3cr {
        #[doc = "Reader of register AWD3CR"]
        pub type R = crate::R<u32, super::AWD3CR>;
        #[doc = "Writer for register AWD3CR"]
        pub type W = crate::W<u32, super::AWD3CR>;
        #[doc = "Register AWD3CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::AWD3CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `AWD3CH`"]
        pub type AWD3CH_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `AWD3CH`"]
        pub struct AWD3CH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AWD3CH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0007_ffff) | ((value as u32) & 0x0007_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:18 - ADC analog watchdog 3 monitored channel selection"]
            #[inline(always)]
            pub fn awd3ch(&self) -> AWD3CH_R {
                AWD3CH_R::new((self.bits & 0x0007_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:18 - ADC analog watchdog 3 monitored channel selection"]
            #[inline(always)]
            pub fn awd3ch(&mut self) -> AWD3CH_W {
                AWD3CH_W { w: self }
            }
        }
    }
    #[doc = "ADC calibration factors register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calfact](calfact) module"]
    pub type CALFACT = crate::Reg<u32, _CALFACT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CALFACT;
    #[doc = "`read()` method returns [calfact::R](calfact::R) reader structure"]
    impl crate::Readable for CALFACT {}
    #[doc = "`write(|w| ..)` method takes [calfact::W](calfact::W) writer structure"]
    impl crate::Writable for CALFACT {}
    #[doc = "ADC calibration factors register"]
    pub mod calfact {
        #[doc = "Reader of register CALFACT"]
        pub type R = crate::R<u32, super::CALFACT>;
        #[doc = "Writer for register CALFACT"]
        pub type W = crate::W<u32, super::CALFACT>;
        #[doc = "Register CALFACT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CALFACT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CALFACT`"]
        pub type CALFACT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CALFACT`"]
        pub struct CALFACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALFACT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7f) | ((value as u32) & 0x7f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:6 - ADC calibration factor in single-ended mode"]
            #[inline(always)]
            pub fn calfact(&self) -> CALFACT_R {
                CALFACT_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - ADC calibration factor in single-ended mode"]
            #[inline(always)]
            pub fn calfact(&mut self) -> CALFACT_W {
                CALFACT_W { w: self }
            }
        }
    }
    #[doc = "ADC common control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "ADC common control register"]
    pub mod ccr {
        #[doc = "Reader of register CCR"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PRESC`"]
        pub type PRESC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PRESC`"]
        pub struct PRESC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRESC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 18)) | (((value as u32) & 0x0f) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `VREFEN`"]
        pub type VREFEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VREFEN`"]
        pub struct VREFEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VREFEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `TSEN`"]
        pub type TSEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSEN`"]
        pub struct TSEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `VBATEN`"]
        pub type VBATEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `VBATEN`"]
        pub struct VBATEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VBATEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 18:21 - ADC prescaler"]
            #[inline(always)]
            pub fn presc(&self) -> PRESC_R {
                PRESC_R::new(((self.bits >> 18) & 0x0f) as u8)
            }
            #[doc = "Bit 22 - VREFINT enable"]
            #[inline(always)]
            pub fn vrefen(&self) -> VREFEN_R {
                VREFEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - Temperature sensor enable"]
            #[inline(always)]
            pub fn tsen(&self) -> TSEN_R {
                TSEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - VBAT enable"]
            #[inline(always)]
            pub fn vbaten(&self) -> VBATEN_R {
                VBATEN_R::new(((self.bits >> 24) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 18:21 - ADC prescaler"]
            #[inline(always)]
            pub fn presc(&mut self) -> PRESC_W {
                PRESC_W { w: self }
            }
            #[doc = "Bit 22 - VREFINT enable"]
            #[inline(always)]
            pub fn vrefen(&mut self) -> VREFEN_W {
                VREFEN_W { w: self }
            }
            #[doc = "Bit 23 - Temperature sensor enable"]
            #[inline(always)]
            pub fn tsen(&mut self) -> TSEN_W {
                TSEN_W { w: self }
            }
            #[doc = "Bit 24 - VBAT enable"]
            #[inline(always)]
            pub fn vbaten(&mut self) -> VBATEN_W {
                VBATEN_W { w: self }
            }
        }
    }
}
#[doc = "System configuration controller"]
pub struct SYSCFG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCFG {}
impl SYSCFG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const syscfg::RegisterBlock {
        0x4001_0000 as *const _
    }
}
impl Deref for SYSCFG {
    type Target = syscfg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SYSCFG::ptr() }
    }
}
#[doc = "System configuration controller"]
pub mod syscfg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - SYSCFG configuration register 1"]
        pub cfgr1: CFGR1,
        _reserved1: [u8; 20usize],
        #[doc = "0x18 - SYSCFG configuration register 1"]
        pub cfgr2: CFGR2,
    }
    #[doc = "SYSCFG configuration register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr1](cfgr1) module"]
    pub type CFGR1 = crate::Reg<u32, _CFGR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR1;
    #[doc = "`read()` method returns [cfgr1::R](cfgr1::R) reader structure"]
    impl crate::Readable for CFGR1 {}
    #[doc = "`write(|w| ..)` method takes [cfgr1::W](cfgr1::W) writer structure"]
    impl crate::Writable for CFGR1 {}
    #[doc = "SYSCFG configuration register 1"]
    pub mod cfgr1 {
        #[doc = "Reader of register CFGR1"]
        pub type R = crate::R<u32, super::CFGR1>;
        #[doc = "Writer for register CFGR1"]
        pub type W = crate::W<u32, super::CFGR1>;
        #[doc = "Register CFGR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `I2C_PAx_FMP`"]
        pub type I2C_PAX_FMP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2C_PAx_FMP`"]
        pub struct I2C_PAX_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_PAX_FMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `I2C2_FMP`"]
        pub type I2C2_FMP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C2_FMP`"]
        pub struct I2C2_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C2_FMP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `I2C1_FMP`"]
        pub type I2C1_FMP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `I2C1_FMP`"]
        pub struct I2C1_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C1_FMP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `I2C_PBx_FMP`"]
        pub type I2C_PBX_FMP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `I2C_PBx_FMP`"]
        pub struct I2C_PBX_FMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> I2C_PBX_FMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `BOOSTEN`"]
        pub type BOOSTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BOOSTEN`"]
        pub struct BOOSTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BOOSTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IR_MOD`"]
        pub type IR_MOD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IR_MOD`"]
        pub struct IR_MOD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IR_MOD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `IR_POL`"]
        pub type IR_POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IR_POL`"]
        pub struct IR_POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IR_POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `PA11_PA12_RMP`"]
        pub type PA11_PA12_RMP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PA11_PA12_RMP`"]
        pub struct PA11_PA12_RMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA11_PA12_RMP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MEM_MODE`"]
        pub type MEM_MODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MEM_MODE`"]
        pub struct MEM_MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MEM_MODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 22:23 - Fast Mode Plus (FM+) driving capability activation bits"]
            #[inline(always)]
            pub fn i2c_pax_fmp(&self) -> I2C_PAX_FMP_R {
                I2C_PAX_FMP_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bit 21 - FM+ driving capability activation for I2C2"]
            #[inline(always)]
            pub fn i2c2_fmp(&self) -> I2C2_FMP_R {
                I2C2_FMP_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - FM+ driving capability activation for I2C1"]
            #[inline(always)]
            pub fn i2c1_fmp(&self) -> I2C1_FMP_R {
                I2C1_FMP_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bits 16:19 - Fast Mode Plus (FM+) driving capability activation bits"]
            #[inline(always)]
            pub fn i2c_pbx_fmp(&self) -> I2C_PBX_FMP_R {
                I2C_PBX_FMP_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 8 - I/O analog switch voltage booster enable"]
            #[inline(always)]
            pub fn boosten(&self) -> BOOSTEN_R {
                BOOSTEN_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bits 6:7 - IR Modulation Envelope signal selection."]
            #[inline(always)]
            pub fn ir_mod(&self) -> IR_MOD_R {
                IR_MOD_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bit 5 - IR output polarity selection"]
            #[inline(always)]
            pub fn ir_pol(&self) -> IR_POL_R {
                IR_POL_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - PA11 and PA12 remapping bit."]
            #[inline(always)]
            pub fn pa11_pa12_rmp(&self) -> PA11_PA12_RMP_R {
                PA11_PA12_RMP_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Memory mapping selection bits"]
            #[inline(always)]
            pub fn mem_mode(&self) -> MEM_MODE_R {
                MEM_MODE_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 22:23 - Fast Mode Plus (FM+) driving capability activation bits"]
            #[inline(always)]
            pub fn i2c_pax_fmp(&mut self) -> I2C_PAX_FMP_W {
                I2C_PAX_FMP_W { w: self }
            }
            #[doc = "Bit 21 - FM+ driving capability activation for I2C2"]
            #[inline(always)]
            pub fn i2c2_fmp(&mut self) -> I2C2_FMP_W {
                I2C2_FMP_W { w: self }
            }
            #[doc = "Bit 20 - FM+ driving capability activation for I2C1"]
            #[inline(always)]
            pub fn i2c1_fmp(&mut self) -> I2C1_FMP_W {
                I2C1_FMP_W { w: self }
            }
            #[doc = "Bits 16:19 - Fast Mode Plus (FM+) driving capability activation bits"]
            #[inline(always)]
            pub fn i2c_pbx_fmp(&mut self) -> I2C_PBX_FMP_W {
                I2C_PBX_FMP_W { w: self }
            }
            #[doc = "Bit 8 - I/O analog switch voltage booster enable"]
            #[inline(always)]
            pub fn boosten(&mut self) -> BOOSTEN_W {
                BOOSTEN_W { w: self }
            }
            #[doc = "Bits 6:7 - IR Modulation Envelope signal selection."]
            #[inline(always)]
            pub fn ir_mod(&mut self) -> IR_MOD_W {
                IR_MOD_W { w: self }
            }
            #[doc = "Bit 5 - IR output polarity selection"]
            #[inline(always)]
            pub fn ir_pol(&mut self) -> IR_POL_W {
                IR_POL_W { w: self }
            }
            #[doc = "Bit 4 - PA11 and PA12 remapping bit."]
            #[inline(always)]
            pub fn pa11_pa12_rmp(&mut self) -> PA11_PA12_RMP_W {
                PA11_PA12_RMP_W { w: self }
            }
            #[doc = "Bits 0:1 - Memory mapping selection bits"]
            #[inline(always)]
            pub fn mem_mode(&mut self) -> MEM_MODE_W {
                MEM_MODE_W { w: self }
            }
        }
    }
    #[doc = "SYSCFG configuration register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr2](cfgr2) module"]
    pub type CFGR2 = crate::Reg<u32, _CFGR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR2;
    #[doc = "`read()` method returns [cfgr2::R](cfgr2::R) reader structure"]
    impl crate::Readable for CFGR2 {}
    #[doc = "`write(|w| ..)` method takes [cfgr2::W](cfgr2::W) writer structure"]
    impl crate::Writable for CFGR2 {}
    #[doc = "SYSCFG configuration register 1"]
    pub mod cfgr2 {
        #[doc = "Reader of register CFGR2"]
        pub type R = crate::R<u32, super::CFGR2>;
        #[doc = "Writer for register CFGR2"]
        pub type W = crate::W<u32, super::CFGR2>;
        #[doc = "Register CFGR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LOCKUP_LOCK`"]
        pub type LOCKUP_LOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LOCKUP_LOCK`"]
        pub struct LOCKUP_LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LOCKUP_LOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `SRAM_PARITY_LOCK`"]
        pub type SRAM_PARITY_LOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SRAM_PARITY_LOCK`"]
        pub struct SRAM_PARITY_LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRAM_PARITY_LOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `PVD_LOCK`"]
        pub type PVD_LOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PVD_LOCK`"]
        pub struct PVD_LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PVD_LOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ECC_LOCK`"]
        pub type ECC_LOCK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ECC_LOCK`"]
        pub struct ECC_LOCK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECC_LOCK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `SRAM_PEF`"]
        pub type SRAM_PEF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SRAM_PEF`"]
        pub struct SRAM_PEF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SRAM_PEF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `PA1_CDEN`"]
        pub type PA1_CDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PA1_CDEN`"]
        pub struct PA1_CDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA1_CDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PA3_CDEN`"]
        pub type PA3_CDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PA3_CDEN`"]
        pub struct PA3_CDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA3_CDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `PA5_CDEN`"]
        pub type PA5_CDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PA5_CDEN`"]
        pub struct PA5_CDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA5_CDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `PA6_CDEN`"]
        pub type PA6_CDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PA6_CDEN`"]
        pub struct PA6_CDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA6_CDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `PA13_CDEN`"]
        pub type PA13_CDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PA13_CDEN`"]
        pub struct PA13_CDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PA13_CDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `PB0_CDEN`"]
        pub type PB0_CDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PB0_CDEN`"]
        pub struct PB0_CDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PB0_CDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `PB1_CDEN`"]
        pub type PB1_CDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PB1_CDEN`"]
        pub struct PB1_CDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PB1_CDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `PB2_CDEN`"]
        pub type PB2_CDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PB2_CDEN`"]
        pub struct PB2_CDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PB2_CDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Cortex-M0+ LOCKUP bit enable bit"]
            #[inline(always)]
            pub fn lockup_lock(&self) -> LOCKUP_LOCK_R {
                LOCKUP_LOCK_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - SRAM parity lock bit"]
            #[inline(always)]
            pub fn sram_parity_lock(&self) -> SRAM_PARITY_LOCK_R {
                SRAM_PARITY_LOCK_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - PVD lock enable bit"]
            #[inline(always)]
            pub fn pvd_lock(&self) -> PVD_LOCK_R {
                PVD_LOCK_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ECC error lock bit"]
            #[inline(always)]
            pub fn ecc_lock(&self) -> ECC_LOCK_R {
                ECC_LOCK_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 8 - SRAM parity error flag"]
            #[inline(always)]
            pub fn sram_pef(&self) -> SRAM_PEF_R {
                SRAM_PEF_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 16 - PA1_CDEN"]
            #[inline(always)]
            pub fn pa1_cden(&self) -> PA1_CDEN_R {
                PA1_CDEN_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - PA3_CDEN"]
            #[inline(always)]
            pub fn pa3_cden(&self) -> PA3_CDEN_R {
                PA3_CDEN_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - PA5_CDEN"]
            #[inline(always)]
            pub fn pa5_cden(&self) -> PA5_CDEN_R {
                PA5_CDEN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - PA6_CDEN"]
            #[inline(always)]
            pub fn pa6_cden(&self) -> PA6_CDEN_R {
                PA6_CDEN_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - PA13_CDEN"]
            #[inline(always)]
            pub fn pa13_cden(&self) -> PA13_CDEN_R {
                PA13_CDEN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - PB0_CDEN"]
            #[inline(always)]
            pub fn pb0_cden(&self) -> PB0_CDEN_R {
                PB0_CDEN_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - PB1_CDEN"]
            #[inline(always)]
            pub fn pb1_cden(&self) -> PB1_CDEN_R {
                PB1_CDEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - PB2_CDEN"]
            #[inline(always)]
            pub fn pb2_cden(&self) -> PB2_CDEN_R {
                PB2_CDEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Cortex-M0+ LOCKUP bit enable bit"]
            #[inline(always)]
            pub fn lockup_lock(&mut self) -> LOCKUP_LOCK_W {
                LOCKUP_LOCK_W { w: self }
            }
            #[doc = "Bit 1 - SRAM parity lock bit"]
            #[inline(always)]
            pub fn sram_parity_lock(&mut self) -> SRAM_PARITY_LOCK_W {
                SRAM_PARITY_LOCK_W { w: self }
            }
            #[doc = "Bit 2 - PVD lock enable bit"]
            #[inline(always)]
            pub fn pvd_lock(&mut self) -> PVD_LOCK_W {
                PVD_LOCK_W { w: self }
            }
            #[doc = "Bit 3 - ECC error lock bit"]
            #[inline(always)]
            pub fn ecc_lock(&mut self) -> ECC_LOCK_W {
                ECC_LOCK_W { w: self }
            }
            #[doc = "Bit 8 - SRAM parity error flag"]
            #[inline(always)]
            pub fn sram_pef(&mut self) -> SRAM_PEF_W {
                SRAM_PEF_W { w: self }
            }
            #[doc = "Bit 16 - PA1_CDEN"]
            #[inline(always)]
            pub fn pa1_cden(&mut self) -> PA1_CDEN_W {
                PA1_CDEN_W { w: self }
            }
            #[doc = "Bit 17 - PA3_CDEN"]
            #[inline(always)]
            pub fn pa3_cden(&mut self) -> PA3_CDEN_W {
                PA3_CDEN_W { w: self }
            }
            #[doc = "Bit 18 - PA5_CDEN"]
            #[inline(always)]
            pub fn pa5_cden(&mut self) -> PA5_CDEN_W {
                PA5_CDEN_W { w: self }
            }
            #[doc = "Bit 19 - PA6_CDEN"]
            #[inline(always)]
            pub fn pa6_cden(&mut self) -> PA6_CDEN_W {
                PA6_CDEN_W { w: self }
            }
            #[doc = "Bit 20 - PA13_CDEN"]
            #[inline(always)]
            pub fn pa13_cden(&mut self) -> PA13_CDEN_W {
                PA13_CDEN_W { w: self }
            }
            #[doc = "Bit 21 - PB0_CDEN"]
            #[inline(always)]
            pub fn pb0_cden(&mut self) -> PB0_CDEN_W {
                PB0_CDEN_W { w: self }
            }
            #[doc = "Bit 22 - PB1_CDEN"]
            #[inline(always)]
            pub fn pb1_cden(&mut self) -> PB1_CDEN_W {
                PB1_CDEN_W { w: self }
            }
            #[doc = "Bit 23 - PB2_CDEN"]
            #[inline(always)]
            pub fn pb2_cden(&mut self) -> PB2_CDEN_W {
                PB2_CDEN_W { w: self }
            }
        }
    }
}
#[doc = "Tamper and backup registers"]
pub struct TAMP {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TAMP {}
impl TAMP {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tamp::RegisterBlock {
        0x4000_b000 as *const _
    }
}
impl Deref for TAMP {
    type Target = tamp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TAMP::ptr() }
    }
}
#[doc = "Tamper and backup registers"]
pub mod tamp {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        _reserved2: [u8; 4usize],
        #[doc = "0x0c - TAMP filter control register"]
        pub fltcr: FLTCR,
        _reserved3: [u8; 28usize],
        #[doc = "0x2c - TAMP interrupt enable register"]
        pub ier: IER,
        #[doc = "0x30 - TAMP status register"]
        pub sr: SR,
        #[doc = "0x34 - TAMP masked interrupt status register"]
        pub misr: MISR,
        _reserved6: [u8; 4usize],
        #[doc = "0x3c - TAMP status clear register"]
        pub scr: SCR,
        _reserved7: [u8; 192usize],
        #[doc = "0x100 - TAMP backup register"]
        pub bkp0r: BKP0R,
        #[doc = "0x104 - TAMP backup register"]
        pub bkp1r: BKP1R,
        #[doc = "0x108 - TAMP backup register"]
        pub bkp2r: BKP2R,
        #[doc = "0x10c - TAMP backup register"]
        pub bkp3r: BKP3R,
        #[doc = "0x110 - TAMP backup register"]
        pub bkp4r: BKP4R,
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0xffff_0000"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff_0000
            }
        }
        #[doc = "Reader of field `TAMP1E`"]
        pub type TAMP1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1E`"]
        pub struct TAMP1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2E`"]
        pub type TAMP2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2E`"]
        pub struct TAMP2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `ITAMP1E`"]
        pub type ITAMP1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITAMP1E`"]
        pub struct ITAMP1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITAMP1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `ITAMP3E`"]
        pub type ITAMP3E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITAMP3E`"]
        pub struct ITAMP3E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITAMP3E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `ITAMP4E`"]
        pub type ITAMP4E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITAMP4E`"]
        pub struct ITAMP4E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITAMP4E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `ITAMP5E`"]
        pub type ITAMP5E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITAMP5E`"]
        pub struct ITAMP5E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITAMP5E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `ITAMP6E`"]
        pub type ITAMP6E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITAMP6E`"]
        pub struct ITAMP6E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITAMP6E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - TAMP1E"]
            #[inline(always)]
            pub fn tamp1e(&self) -> TAMP1E_R {
                TAMP1E_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TAMP2E"]
            #[inline(always)]
            pub fn tamp2e(&self) -> TAMP2E_R {
                TAMP2E_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 16 - ITAMP1E"]
            #[inline(always)]
            pub fn itamp1e(&self) -> ITAMP1E_R {
                ITAMP1E_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 18 - ITAMP3E"]
            #[inline(always)]
            pub fn itamp3e(&self) -> ITAMP3E_R {
                ITAMP3E_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - ITAMP4E"]
            #[inline(always)]
            pub fn itamp4e(&self) -> ITAMP4E_R {
                ITAMP4E_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - ITAMP5E"]
            #[inline(always)]
            pub fn itamp5e(&self) -> ITAMP5E_R {
                ITAMP5E_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - ITAMP6E"]
            #[inline(always)]
            pub fn itamp6e(&self) -> ITAMP6E_R {
                ITAMP6E_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TAMP1E"]
            #[inline(always)]
            pub fn tamp1e(&mut self) -> TAMP1E_W {
                TAMP1E_W { w: self }
            }
            #[doc = "Bit 1 - TAMP2E"]
            #[inline(always)]
            pub fn tamp2e(&mut self) -> TAMP2E_W {
                TAMP2E_W { w: self }
            }
            #[doc = "Bit 16 - ITAMP1E"]
            #[inline(always)]
            pub fn itamp1e(&mut self) -> ITAMP1E_W {
                ITAMP1E_W { w: self }
            }
            #[doc = "Bit 18 - ITAMP3E"]
            #[inline(always)]
            pub fn itamp3e(&mut self) -> ITAMP3E_W {
                ITAMP3E_W { w: self }
            }
            #[doc = "Bit 19 - ITAMP4E"]
            #[inline(always)]
            pub fn itamp4e(&mut self) -> ITAMP4E_W {
                ITAMP4E_W { w: self }
            }
            #[doc = "Bit 20 - ITAMP5E"]
            #[inline(always)]
            pub fn itamp5e(&mut self) -> ITAMP5E_W {
                ITAMP5E_W { w: self }
            }
            #[doc = "Bit 21 - ITAMP6E"]
            #[inline(always)]
            pub fn itamp6e(&mut self) -> ITAMP6E_W {
                ITAMP6E_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAMP1NOER`"]
        pub type TAMP1NOER_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1NOER`"]
        pub struct TAMP1NOER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1NOER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2NOER`"]
        pub type TAMP2NOER_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2NOER`"]
        pub struct TAMP2NOER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2NOER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP1MSK`"]
        pub type TAMP1MSK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1MSK`"]
        pub struct TAMP1MSK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1MSK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2MSK`"]
        pub type TAMP2MSK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2MSK`"]
        pub struct TAMP2MSK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2MSK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP1TRG`"]
        pub type TAMP1TRG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1TRG`"]
        pub struct TAMP1TRG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1TRG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2TRG`"]
        pub type TAMP2TRG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2TRG`"]
        pub struct TAMP2TRG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2TRG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - TAMP1NOER"]
            #[inline(always)]
            pub fn tamp1noer(&self) -> TAMP1NOER_R {
                TAMP1NOER_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TAMP2NOER"]
            #[inline(always)]
            pub fn tamp2noer(&self) -> TAMP2NOER_R {
                TAMP2NOER_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 16 - TAMP1MSK"]
            #[inline(always)]
            pub fn tamp1msk(&self) -> TAMP1MSK_R {
                TAMP1MSK_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - TAMP2MSK"]
            #[inline(always)]
            pub fn tamp2msk(&self) -> TAMP2MSK_R {
                TAMP2MSK_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 24 - TAMP1TRG"]
            #[inline(always)]
            pub fn tamp1trg(&self) -> TAMP1TRG_R {
                TAMP1TRG_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - TAMP2TRG"]
            #[inline(always)]
            pub fn tamp2trg(&self) -> TAMP2TRG_R {
                TAMP2TRG_R::new(((self.bits >> 25) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TAMP1NOER"]
            #[inline(always)]
            pub fn tamp1noer(&mut self) -> TAMP1NOER_W {
                TAMP1NOER_W { w: self }
            }
            #[doc = "Bit 1 - TAMP2NOER"]
            #[inline(always)]
            pub fn tamp2noer(&mut self) -> TAMP2NOER_W {
                TAMP2NOER_W { w: self }
            }
            #[doc = "Bit 16 - TAMP1MSK"]
            #[inline(always)]
            pub fn tamp1msk(&mut self) -> TAMP1MSK_W {
                TAMP1MSK_W { w: self }
            }
            #[doc = "Bit 17 - TAMP2MSK"]
            #[inline(always)]
            pub fn tamp2msk(&mut self) -> TAMP2MSK_W {
                TAMP2MSK_W { w: self }
            }
            #[doc = "Bit 24 - TAMP1TRG"]
            #[inline(always)]
            pub fn tamp1trg(&mut self) -> TAMP1TRG_W {
                TAMP1TRG_W { w: self }
            }
            #[doc = "Bit 25 - TAMP2TRG"]
            #[inline(always)]
            pub fn tamp2trg(&mut self) -> TAMP2TRG_W {
                TAMP2TRG_W { w: self }
            }
        }
    }
    #[doc = "TAMP filter control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fltcr](fltcr) module"]
    pub type FLTCR = crate::Reg<u32, _FLTCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FLTCR;
    #[doc = "`read()` method returns [fltcr::R](fltcr::R) reader structure"]
    impl crate::Readable for FLTCR {}
    #[doc = "`write(|w| ..)` method takes [fltcr::W](fltcr::W) writer structure"]
    impl crate::Writable for FLTCR {}
    #[doc = "TAMP filter control register"]
    pub mod fltcr {
        #[doc = "Reader of register FLTCR"]
        pub type R = crate::R<u32, super::FLTCR>;
        #[doc = "Writer for register FLTCR"]
        pub type W = crate::W<u32, super::FLTCR>;
        #[doc = "Register FLTCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::FLTCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAMPFREQ`"]
        pub type TAMPFREQ_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMPFREQ`"]
        pub struct TAMPFREQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPFREQ_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPFLT`"]
        pub type TAMPFLT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMPFLT`"]
        pub struct TAMPFLT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPFLT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPPRCH`"]
        pub type TAMPPRCH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TAMPPRCH`"]
        pub struct TAMPPRCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPPRCH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPPUDIS`"]
        pub type TAMPPUDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMPPUDIS`"]
        pub struct TAMPPUDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPPUDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - TAMPFREQ"]
            #[inline(always)]
            pub fn tampfreq(&self) -> TAMPFREQ_R {
                TAMPFREQ_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bits 3:4 - TAMPFLT"]
            #[inline(always)]
            pub fn tampflt(&self) -> TAMPFLT_R {
                TAMPFLT_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bits 5:6 - TAMPPRCH"]
            #[inline(always)]
            pub fn tampprch(&self) -> TAMPPRCH_R {
                TAMPPRCH_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 7 - TAMPPUDIS"]
            #[inline(always)]
            pub fn tamppudis(&self) -> TAMPPUDIS_R {
                TAMPPUDIS_R::new(((self.bits >> 7) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - TAMPFREQ"]
            #[inline(always)]
            pub fn tampfreq(&mut self) -> TAMPFREQ_W {
                TAMPFREQ_W { w: self }
            }
            #[doc = "Bits 3:4 - TAMPFLT"]
            #[inline(always)]
            pub fn tampflt(&mut self) -> TAMPFLT_W {
                TAMPFLT_W { w: self }
            }
            #[doc = "Bits 5:6 - TAMPPRCH"]
            #[inline(always)]
            pub fn tampprch(&mut self) -> TAMPPRCH_W {
                TAMPPRCH_W { w: self }
            }
            #[doc = "Bit 7 - TAMPPUDIS"]
            #[inline(always)]
            pub fn tamppudis(&mut self) -> TAMPPUDIS_W {
                TAMPPUDIS_W { w: self }
            }
        }
    }
    #[doc = "TAMP interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ier](ier) module"]
    pub type IER = crate::Reg<u32, _IER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IER;
    #[doc = "`read()` method returns [ier::R](ier::R) reader structure"]
    impl crate::Readable for IER {}
    #[doc = "`write(|w| ..)` method takes [ier::W](ier::W) writer structure"]
    impl crate::Writable for IER {}
    #[doc = "TAMP interrupt enable register"]
    pub mod ier {
        #[doc = "Reader of register IER"]
        pub type R = crate::R<u32, super::IER>;
        #[doc = "Writer for register IER"]
        pub type W = crate::W<u32, super::IER>;
        #[doc = "Register IER `reset()`'s with value 0"]
        impl crate::ResetValue for super::IER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TAMP1IE`"]
        pub type TAMP1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP1IE`"]
        pub struct TAMP1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TAMP2IE`"]
        pub type TAMP2IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMP2IE`"]
        pub struct TAMP2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMP2IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `ITAMP1IE`"]
        pub type ITAMP1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITAMP1IE`"]
        pub struct ITAMP1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITAMP1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `ITAMP3IE`"]
        pub type ITAMP3IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITAMP3IE`"]
        pub struct ITAMP3IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITAMP3IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `ITAMP4IE`"]
        pub type ITAMP4IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITAMP4IE`"]
        pub struct ITAMP4IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITAMP4IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `ITAMP5IE`"]
        pub type ITAMP5IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITAMP5IE`"]
        pub struct ITAMP5IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITAMP5IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `ITAMP6IE`"]
        pub type ITAMP6IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITAMP6IE`"]
        pub struct ITAMP6IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITAMP6IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - TAMP1IE"]
            #[inline(always)]
            pub fn tamp1ie(&self) -> TAMP1IE_R {
                TAMP1IE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TAMP2IE"]
            #[inline(always)]
            pub fn tamp2ie(&self) -> TAMP2IE_R {
                TAMP2IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 16 - ITAMP1IE"]
            #[inline(always)]
            pub fn itamp1ie(&self) -> ITAMP1IE_R {
                ITAMP1IE_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 18 - ITAMP3IE"]
            #[inline(always)]
            pub fn itamp3ie(&self) -> ITAMP3IE_R {
                ITAMP3IE_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - ITAMP4IE"]
            #[inline(always)]
            pub fn itamp4ie(&self) -> ITAMP4IE_R {
                ITAMP4IE_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - ITAMP5IE"]
            #[inline(always)]
            pub fn itamp5ie(&self) -> ITAMP5IE_R {
                ITAMP5IE_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - ITAMP6IE"]
            #[inline(always)]
            pub fn itamp6ie(&self) -> ITAMP6IE_R {
                ITAMP6IE_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TAMP1IE"]
            #[inline(always)]
            pub fn tamp1ie(&mut self) -> TAMP1IE_W {
                TAMP1IE_W { w: self }
            }
            #[doc = "Bit 1 - TAMP2IE"]
            #[inline(always)]
            pub fn tamp2ie(&mut self) -> TAMP2IE_W {
                TAMP2IE_W { w: self }
            }
            #[doc = "Bit 16 - ITAMP1IE"]
            #[inline(always)]
            pub fn itamp1ie(&mut self) -> ITAMP1IE_W {
                ITAMP1IE_W { w: self }
            }
            #[doc = "Bit 18 - ITAMP3IE"]
            #[inline(always)]
            pub fn itamp3ie(&mut self) -> ITAMP3IE_W {
                ITAMP3IE_W { w: self }
            }
            #[doc = "Bit 19 - ITAMP4IE"]
            #[inline(always)]
            pub fn itamp4ie(&mut self) -> ITAMP4IE_W {
                ITAMP4IE_W { w: self }
            }
            #[doc = "Bit 20 - ITAMP5IE"]
            #[inline(always)]
            pub fn itamp5ie(&mut self) -> ITAMP5IE_W {
                ITAMP5IE_W { w: self }
            }
            #[doc = "Bit 21 - ITAMP6IE"]
            #[inline(always)]
            pub fn itamp6ie(&mut self) -> ITAMP6IE_W {
                ITAMP6IE_W { w: self }
            }
        }
    }
    #[doc = "TAMP status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "TAMP status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Reader of field `TAMP1F`"]
        pub type TAMP1F_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMP2F`"]
        pub type TAMP2F_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP1F`"]
        pub type ITAMP1F_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP3F`"]
        pub type ITAMP3F_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP4F`"]
        pub type ITAMP4F_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP5F`"]
        pub type ITAMP5F_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP6F`"]
        pub type ITAMP6F_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP7F`"]
        pub type ITAMP7F_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - TAMP1F"]
            #[inline(always)]
            pub fn tamp1f(&self) -> TAMP1F_R {
                TAMP1F_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TAMP2F"]
            #[inline(always)]
            pub fn tamp2f(&self) -> TAMP2F_R {
                TAMP2F_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 16 - ITAMP1F"]
            #[inline(always)]
            pub fn itamp1f(&self) -> ITAMP1F_R {
                ITAMP1F_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 18 - ITAMP3F"]
            #[inline(always)]
            pub fn itamp3f(&self) -> ITAMP3F_R {
                ITAMP3F_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - ITAMP4F"]
            #[inline(always)]
            pub fn itamp4f(&self) -> ITAMP4F_R {
                ITAMP4F_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - ITAMP5F"]
            #[inline(always)]
            pub fn itamp5f(&self) -> ITAMP5F_R {
                ITAMP5F_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - ITAMP6F"]
            #[inline(always)]
            pub fn itamp6f(&self) -> ITAMP6F_R {
                ITAMP6F_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - ITAMP7F"]
            #[inline(always)]
            pub fn itamp7f(&self) -> ITAMP7F_R {
                ITAMP7F_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
    }
    #[doc = "TAMP masked interrupt status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [misr](misr) module"]
    pub type MISR = crate::Reg<u32, _MISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MISR;
    #[doc = "`read()` method returns [misr::R](misr::R) reader structure"]
    impl crate::Readable for MISR {}
    #[doc = "TAMP masked interrupt status register"]
    pub mod misr {
        #[doc = "Reader of register MISR"]
        pub type R = crate::R<u32, super::MISR>;
        #[doc = "Reader of field `TAMP1MF`"]
        pub type TAMP1MF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TAMP2MF`"]
        pub type TAMP2MF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP1MF`"]
        pub type ITAMP1MF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP3MF`"]
        pub type ITAMP3MF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP4MF`"]
        pub type ITAMP4MF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP5MF`"]
        pub type ITAMP5MF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITAMP6MF`"]
        pub type ITAMP6MF_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - TAMP1MF:"]
            #[inline(always)]
            pub fn tamp1mf(&self) -> TAMP1MF_R {
                TAMP1MF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TAMP2MF"]
            #[inline(always)]
            pub fn tamp2mf(&self) -> TAMP2MF_R {
                TAMP2MF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 16 - ITAMP1MF"]
            #[inline(always)]
            pub fn itamp1mf(&self) -> ITAMP1MF_R {
                ITAMP1MF_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 18 - ITAMP3MF"]
            #[inline(always)]
            pub fn itamp3mf(&self) -> ITAMP3MF_R {
                ITAMP3MF_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - ITAMP4MF"]
            #[inline(always)]
            pub fn itamp4mf(&self) -> ITAMP4MF_R {
                ITAMP4MF_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - ITAMP5MF"]
            #[inline(always)]
            pub fn itamp5mf(&self) -> ITAMP5MF_R {
                ITAMP5MF_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - ITAMP6MF"]
            #[inline(always)]
            pub fn itamp6mf(&self) -> ITAMP6MF_R {
                ITAMP6MF_R::new(((self.bits >> 21) & 0x01) != 0)
            }
        }
    }
    #[doc = "TAMP status clear register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [scr](scr) module"]
    pub type SCR = crate::Reg<u32, _SCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SCR;
    #[doc = "`write(|w| ..)` method takes [scr::W](scr::W) writer structure"]
    impl crate::Writable for SCR {}
    #[doc = "TAMP status clear register"]
    pub mod scr {
        #[doc = "Writer for register SCR"]
        pub type W = crate::W<u32, super::SCR>;
        #[doc = "Register SCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CTAMP1F`"]
        pub struct CTAMP1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTAMP1F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTAMP2F`"]
        pub struct CTAMP2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTAMP2F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `CITAMP1F`"]
        pub struct CITAMP1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CITAMP1F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Write proxy for field `CITAMP3F`"]
        pub struct CITAMP3F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CITAMP3F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Write proxy for field `CITAMP4F`"]
        pub struct CITAMP4F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CITAMP4F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Write proxy for field `CITAMP5F`"]
        pub struct CITAMP5F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CITAMP5F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Write proxy for field `CITAMP6F`"]
        pub struct CITAMP6F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CITAMP6F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Write proxy for field `CITAMP7F`"]
        pub struct CITAMP7F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CITAMP7F_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 0 - CTAMP1F"]
            #[inline(always)]
            pub fn ctamp1f(&mut self) -> CTAMP1F_W {
                CTAMP1F_W { w: self }
            }
            #[doc = "Bit 1 - CTAMP2F"]
            #[inline(always)]
            pub fn ctamp2f(&mut self) -> CTAMP2F_W {
                CTAMP2F_W { w: self }
            }
            #[doc = "Bit 16 - CITAMP1F"]
            #[inline(always)]
            pub fn citamp1f(&mut self) -> CITAMP1F_W {
                CITAMP1F_W { w: self }
            }
            #[doc = "Bit 18 - CITAMP3F"]
            #[inline(always)]
            pub fn citamp3f(&mut self) -> CITAMP3F_W {
                CITAMP3F_W { w: self }
            }
            #[doc = "Bit 19 - CITAMP4F"]
            #[inline(always)]
            pub fn citamp4f(&mut self) -> CITAMP4F_W {
                CITAMP4F_W { w: self }
            }
            #[doc = "Bit 20 - CITAMP5F"]
            #[inline(always)]
            pub fn citamp5f(&mut self) -> CITAMP5F_W {
                CITAMP5F_W { w: self }
            }
            #[doc = "Bit 21 - CITAMP6F"]
            #[inline(always)]
            pub fn citamp6f(&mut self) -> CITAMP6F_W {
                CITAMP6F_W { w: self }
            }
            #[doc = "Bit 22 - CITAMP7F"]
            #[inline(always)]
            pub fn citamp7f(&mut self) -> CITAMP7F_W {
                CITAMP7F_W { w: self }
            }
        }
    }
    #[doc = "TAMP backup register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bkp0r](bkp0r) module"]
    pub type BKP0R = crate::Reg<u32, _BKP0R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BKP0R;
    #[doc = "`read()` method returns [bkp0r::R](bkp0r::R) reader structure"]
    impl crate::Readable for BKP0R {}
    #[doc = "`write(|w| ..)` method takes [bkp0r::W](bkp0r::W) writer structure"]
    impl crate::Writable for BKP0R {}
    #[doc = "TAMP backup register"]
    pub mod bkp0r {
        #[doc = "Reader of register BKP0R"]
        pub type R = crate::R<u32, super::BKP0R>;
        #[doc = "Writer for register BKP0R"]
        pub type W = crate::W<u32, super::BKP0R>;
        #[doc = "Register BKP0R `reset()`'s with value 0"]
        impl crate::ResetValue for super::BKP0R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
        }
    }
    #[doc = "TAMP backup register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bkp1r](bkp1r) module"]
    pub type BKP1R = crate::Reg<u32, _BKP1R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BKP1R;
    #[doc = "`read()` method returns [bkp1r::R](bkp1r::R) reader structure"]
    impl crate::Readable for BKP1R {}
    #[doc = "`write(|w| ..)` method takes [bkp1r::W](bkp1r::W) writer structure"]
    impl crate::Writable for BKP1R {}
    #[doc = "TAMP backup register"]
    pub mod bkp1r {
        #[doc = "Reader of register BKP1R"]
        pub type R = crate::R<u32, super::BKP1R>;
        #[doc = "Writer for register BKP1R"]
        pub type W = crate::W<u32, super::BKP1R>;
        #[doc = "Register BKP1R `reset()`'s with value 0"]
        impl crate::ResetValue for super::BKP1R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
        }
    }
    #[doc = "TAMP backup register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bkp2r](bkp2r) module"]
    pub type BKP2R = crate::Reg<u32, _BKP2R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BKP2R;
    #[doc = "`read()` method returns [bkp2r::R](bkp2r::R) reader structure"]
    impl crate::Readable for BKP2R {}
    #[doc = "`write(|w| ..)` method takes [bkp2r::W](bkp2r::W) writer structure"]
    impl crate::Writable for BKP2R {}
    #[doc = "TAMP backup register"]
    pub mod bkp2r {
        #[doc = "Reader of register BKP2R"]
        pub type R = crate::R<u32, super::BKP2R>;
        #[doc = "Writer for register BKP2R"]
        pub type W = crate::W<u32, super::BKP2R>;
        #[doc = "Register BKP2R `reset()`'s with value 0"]
        impl crate::ResetValue for super::BKP2R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
        }
    }
    #[doc = "TAMP backup register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bkp3r](bkp3r) module"]
    pub type BKP3R = crate::Reg<u32, _BKP3R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BKP3R;
    #[doc = "`read()` method returns [bkp3r::R](bkp3r::R) reader structure"]
    impl crate::Readable for BKP3R {}
    #[doc = "`write(|w| ..)` method takes [bkp3r::W](bkp3r::W) writer structure"]
    impl crate::Writable for BKP3R {}
    #[doc = "TAMP backup register"]
    pub mod bkp3r {
        #[doc = "Reader of register BKP3R"]
        pub type R = crate::R<u32, super::BKP3R>;
        #[doc = "Writer for register BKP3R"]
        pub type W = crate::W<u32, super::BKP3R>;
        #[doc = "Register BKP3R `reset()`'s with value 0"]
        impl crate::ResetValue for super::BKP3R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
        }
    }
    #[doc = "TAMP backup register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bkp4r](bkp4r) module"]
    pub type BKP4R = crate::Reg<u32, _BKP4R>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BKP4R;
    #[doc = "`read()` method returns [bkp4r::R](bkp4r::R) reader structure"]
    impl crate::Readable for BKP4R {}
    #[doc = "`write(|w| ..)` method takes [bkp4r::W](bkp4r::W) writer structure"]
    impl crate::Writable for BKP4R {}
    #[doc = "TAMP backup register"]
    pub mod bkp4r {
        #[doc = "Reader of register BKP4R"]
        pub type R = crate::R<u32, super::BKP4R>;
        #[doc = "Writer for register BKP4R"]
        pub type W = crate::W<u32, super::BKP4R>;
        #[doc = "Register BKP4R `reset()`'s with value 0"]
        impl crate::ResetValue for super::BKP4R {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff_ffff) | ((value as u32) & 0xffff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new((self.bits & 0xffff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - BKP"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
        }
    }
}
#[doc = "Low power timer"]
pub struct LPTIM1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM1 {}
impl LPTIM1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        0x4000_7c00 as *const _
    }
}
impl Deref for LPTIM1 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*LPTIM1::ptr() }
    }
}
#[doc = "Low power timer"]
pub mod lptim1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Interrupt and Status Register"]
        pub isr: ISR,
        #[doc = "0x04 - Interrupt Clear Register"]
        pub icr: ICR,
        #[doc = "0x08 - Interrupt Enable Register"]
        pub ier: IER,
        #[doc = "0x0c - Configuration Register"]
        pub cfgr: CFGR,
        #[doc = "0x10 - Control Register"]
        pub cr: CR,
        #[doc = "0x14 - Compare Register"]
        pub cmp: CMP,
        #[doc = "0x18 - Autoreload Register"]
        pub arr: ARR,
        #[doc = "0x1c - Counter Register"]
        pub cnt: CNT,
        _reserved8: [u8; 4usize],
        #[doc = "0x24 - LPTIM configuration register 2"]
        pub cfgr2: CFGR2,
    }
    #[doc = "Interrupt and Status Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "Interrupt and Status Register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Reader of field `DOWN`"]
        pub type DOWN_R = crate::R<bool, bool>;
        #[doc = "Reader of field `UP`"]
        pub type UP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ARROK`"]
        pub type ARROK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CMPOK`"]
        pub type CMPOK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTTRIG`"]
        pub type EXTTRIG_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ARRM`"]
        pub type ARRM_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CMPM`"]
        pub type CMPM_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 6 - Counter direction change up to down"]
            #[inline(always)]
            pub fn down(&self) -> DOWN_R {
                DOWN_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Counter direction change down to up"]
            #[inline(always)]
            pub fn up(&self) -> UP_R {
                UP_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Autoreload register update OK"]
            #[inline(always)]
            pub fn arrok(&self) -> ARROK_R {
                ARROK_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Compare register update OK"]
            #[inline(always)]
            pub fn cmpok(&self) -> CMPOK_R {
                CMPOK_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - External trigger edge event"]
            #[inline(always)]
            pub fn exttrig(&self) -> EXTTRIG_R {
                EXTTRIG_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Autoreload match"]
            #[inline(always)]
            pub fn arrm(&self) -> ARRM_R {
                ARRM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Compare match"]
            #[inline(always)]
            pub fn cmpm(&self) -> CMPM_R {
                CMPM_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt Clear Register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "Interrupt Clear Register"]
    pub mod icr {
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `DOWNCF`"]
        pub struct DOWNCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DOWNCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `UPCF`"]
        pub struct UPCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UPCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `ARROKCF`"]
        pub struct ARROKCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARROKCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `CMPOKCF`"]
        pub struct CMPOKCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMPOKCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `EXTTRIGCF`"]
        pub struct EXTTRIGCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTTRIGCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `ARRMCF`"]
        pub struct ARRMCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARRMCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `CMPMCF`"]
        pub struct CMPMCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMPMCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 6 - Direction change to down Clear Flag"]
            #[inline(always)]
            pub fn downcf(&mut self) -> DOWNCF_W {
                DOWNCF_W { w: self }
            }
            #[doc = "Bit 5 - Direction change to UP Clear Flag"]
            #[inline(always)]
            pub fn upcf(&mut self) -> UPCF_W {
                UPCF_W { w: self }
            }
            #[doc = "Bit 4 - Autoreload register update OK Clear Flag"]
            #[inline(always)]
            pub fn arrokcf(&mut self) -> ARROKCF_W {
                ARROKCF_W { w: self }
            }
            #[doc = "Bit 3 - Compare register update OK Clear Flag"]
            #[inline(always)]
            pub fn cmpokcf(&mut self) -> CMPOKCF_W {
                CMPOKCF_W { w: self }
            }
            #[doc = "Bit 2 - External trigger valid edge Clear Flag"]
            #[inline(always)]
            pub fn exttrigcf(&mut self) -> EXTTRIGCF_W {
                EXTTRIGCF_W { w: self }
            }
            #[doc = "Bit 1 - Autoreload match Clear Flag"]
            #[inline(always)]
            pub fn arrmcf(&mut self) -> ARRMCF_W {
                ARRMCF_W { w: self }
            }
            #[doc = "Bit 0 - compare match Clear Flag"]
            #[inline(always)]
            pub fn cmpmcf(&mut self) -> CMPMCF_W {
                CMPMCF_W { w: self }
            }
        }
    }
    #[doc = "Interrupt Enable Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ier](ier) module"]
    pub type IER = crate::Reg<u32, _IER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IER;
    #[doc = "`read()` method returns [ier::R](ier::R) reader structure"]
    impl crate::Readable for IER {}
    #[doc = "`write(|w| ..)` method takes [ier::W](ier::W) writer structure"]
    impl crate::Writable for IER {}
    #[doc = "Interrupt Enable Register"]
    pub mod ier {
        #[doc = "Reader of register IER"]
        pub type R = crate::R<u32, super::IER>;
        #[doc = "Writer for register IER"]
        pub type W = crate::W<u32, super::IER>;
        #[doc = "Register IER `reset()`'s with value 0"]
        impl crate::ResetValue for super::IER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DOWNIE`"]
        pub type DOWNIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DOWNIE`"]
        pub struct DOWNIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DOWNIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `UPIE`"]
        pub type UPIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UPIE`"]
        pub struct UPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UPIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `ARROKIE`"]
        pub type ARROKIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ARROKIE`"]
        pub struct ARROKIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARROKIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CMPOKIE`"]
        pub type CMPOKIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMPOKIE`"]
        pub struct CMPOKIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMPOKIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `EXTTRIGIE`"]
        pub type EXTTRIGIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EXTTRIGIE`"]
        pub struct EXTTRIGIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EXTTRIGIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ARRMIE`"]
        pub type ARRMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ARRMIE`"]
        pub struct ARRMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARRMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CMPMIE`"]
        pub type CMPMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMPMIE`"]
        pub struct CMPMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMPMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 6 - Direction change to down Interrupt Enable"]
            #[inline(always)]
            pub fn downie(&self) -> DOWNIE_R {
                DOWNIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Direction change to UP Interrupt Enable"]
            #[inline(always)]
            pub fn upie(&self) -> UPIE_R {
                UPIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Autoreload register update OK Interrupt Enable"]
            #[inline(always)]
            pub fn arrokie(&self) -> ARROKIE_R {
                ARROKIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Compare register update OK Interrupt Enable"]
            #[inline(always)]
            pub fn cmpokie(&self) -> CMPOKIE_R {
                CMPOKIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - External trigger valid edge Interrupt Enable"]
            #[inline(always)]
            pub fn exttrigie(&self) -> EXTTRIGIE_R {
                EXTTRIGIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Autoreload match Interrupt Enable"]
            #[inline(always)]
            pub fn arrmie(&self) -> ARRMIE_R {
                ARRMIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Compare match Interrupt Enable"]
            #[inline(always)]
            pub fn cmpmie(&self) -> CMPMIE_R {
                CMPMIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 6 - Direction change to down Interrupt Enable"]
            #[inline(always)]
            pub fn downie(&mut self) -> DOWNIE_W {
                DOWNIE_W { w: self }
            }
            #[doc = "Bit 5 - Direction change to UP Interrupt Enable"]
            #[inline(always)]
            pub fn upie(&mut self) -> UPIE_W {
                UPIE_W { w: self }
            }
            #[doc = "Bit 4 - Autoreload register update OK Interrupt Enable"]
            #[inline(always)]
            pub fn arrokie(&mut self) -> ARROKIE_W {
                ARROKIE_W { w: self }
            }
            #[doc = "Bit 3 - Compare register update OK Interrupt Enable"]
            #[inline(always)]
            pub fn cmpokie(&mut self) -> CMPOKIE_W {
                CMPOKIE_W { w: self }
            }
            #[doc = "Bit 2 - External trigger valid edge Interrupt Enable"]
            #[inline(always)]
            pub fn exttrigie(&mut self) -> EXTTRIGIE_W {
                EXTTRIGIE_W { w: self }
            }
            #[doc = "Bit 1 - Autoreload match Interrupt Enable"]
            #[inline(always)]
            pub fn arrmie(&mut self) -> ARRMIE_W {
                ARRMIE_W { w: self }
            }
            #[doc = "Bit 0 - Compare match Interrupt Enable"]
            #[inline(always)]
            pub fn cmpmie(&mut self) -> CMPMIE_W {
                CMPMIE_W { w: self }
            }
        }
    }
    #[doc = "Configuration Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr](cfgr) module"]
    pub type CFGR = crate::Reg<u32, _CFGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR;
    #[doc = "`read()` method returns [cfgr::R](cfgr::R) reader structure"]
    impl crate::Readable for CFGR {}
    #[doc = "`write(|w| ..)` method takes [cfgr::W](cfgr::W) writer structure"]
    impl crate::Writable for CFGR {}
    #[doc = "Configuration Register"]
    pub mod cfgr {
        #[doc = "Reader of register CFGR"]
        pub type R = crate::R<u32, super::CFGR>;
        #[doc = "Writer for register CFGR"]
        pub type W = crate::W<u32, super::CFGR>;
        #[doc = "Register CFGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ENC`"]
        pub type ENC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ENC`"]
        pub struct ENC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `COUNTMODE`"]
        pub type COUNTMODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COUNTMODE`"]
        pub struct COUNTMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COUNTMODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `PRELOAD`"]
        pub type PRELOAD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PRELOAD`"]
        pub struct PRELOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRELOAD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `WAVPOL`"]
        pub type WAVPOL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WAVPOL`"]
        pub struct WAVPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAVPOL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `WAVE`"]
        pub type WAVE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WAVE`"]
        pub struct WAVE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAVE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `TIMOUT`"]
        pub type TIMOUT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMOUT`"]
        pub struct TIMOUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMOUT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `TRIGEN`"]
        pub type TRIGEN_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRIGEN`"]
        pub struct TRIGEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIGEN_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 17)) | (((value as u32) & 0x03) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `TRIGSEL`"]
        pub type TRIGSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRIGSEL`"]
        pub struct TRIGSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIGSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `PRESC`"]
        pub type PRESC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PRESC`"]
        pub struct PRESC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRESC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 9)) | (((value as u32) & 0x07) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TRGFLT`"]
        pub type TRGFLT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRGFLT`"]
        pub struct TRGFLT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRGFLT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 6)) | (((value as u32) & 0x03) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CKFLT`"]
        pub type CKFLT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CKFLT`"]
        pub struct CKFLT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKFLT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 3)) | (((value as u32) & 0x03) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CKPOL`"]
        pub type CKPOL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CKPOL`"]
        pub struct CKPOL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKPOL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 1)) | (((value as u32) & 0x03) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CKSEL`"]
        pub type CKSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CKSEL`"]
        pub struct CKSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - Encoder mode enable"]
            #[inline(always)]
            pub fn enc(&self) -> ENC_R {
                ENC_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - counter mode enabled"]
            #[inline(always)]
            pub fn countmode(&self) -> COUNTMODE_R {
                COUNTMODE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Registers update mode"]
            #[inline(always)]
            pub fn preload(&self) -> PRELOAD_R {
                PRELOAD_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - Waveform shape polarity"]
            #[inline(always)]
            pub fn wavpol(&self) -> WAVPOL_R {
                WAVPOL_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - Waveform shape"]
            #[inline(always)]
            pub fn wave(&self) -> WAVE_R {
                WAVE_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - Timeout enable"]
            #[inline(always)]
            pub fn timout(&self) -> TIMOUT_R {
                TIMOUT_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bits 17:18 - Trigger enable and polarity"]
            #[inline(always)]
            pub fn trigen(&self) -> TRIGEN_R {
                TRIGEN_R::new(((self.bits >> 17) & 0x03) as u8)
            }
            #[doc = "Bits 13:15 - Trigger selector"]
            #[inline(always)]
            pub fn trigsel(&self) -> TRIGSEL_R {
                TRIGSEL_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bits 9:11 - Clock prescaler"]
            #[inline(always)]
            pub fn presc(&self) -> PRESC_R {
                PRESC_R::new(((self.bits >> 9) & 0x07) as u8)
            }
            #[doc = "Bits 6:7 - Configurable digital filter for trigger"]
            #[inline(always)]
            pub fn trgflt(&self) -> TRGFLT_R {
                TRGFLT_R::new(((self.bits >> 6) & 0x03) as u8)
            }
            #[doc = "Bits 3:4 - Configurable digital filter for external clock"]
            #[inline(always)]
            pub fn ckflt(&self) -> CKFLT_R {
                CKFLT_R::new(((self.bits >> 3) & 0x03) as u8)
            }
            #[doc = "Bits 1:2 - Clock Polarity"]
            #[inline(always)]
            pub fn ckpol(&self) -> CKPOL_R {
                CKPOL_R::new(((self.bits >> 1) & 0x03) as u8)
            }
            #[doc = "Bit 0 - Clock selector"]
            #[inline(always)]
            pub fn cksel(&self) -> CKSEL_R {
                CKSEL_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 24 - Encoder mode enable"]
            #[inline(always)]
            pub fn enc(&mut self) -> ENC_W {
                ENC_W { w: self }
            }
            #[doc = "Bit 23 - counter mode enabled"]
            #[inline(always)]
            pub fn countmode(&mut self) -> COUNTMODE_W {
                COUNTMODE_W { w: self }
            }
            #[doc = "Bit 22 - Registers update mode"]
            #[inline(always)]
            pub fn preload(&mut self) -> PRELOAD_W {
                PRELOAD_W { w: self }
            }
            #[doc = "Bit 21 - Waveform shape polarity"]
            #[inline(always)]
            pub fn wavpol(&mut self) -> WAVPOL_W {
                WAVPOL_W { w: self }
            }
            #[doc = "Bit 20 - Waveform shape"]
            #[inline(always)]
            pub fn wave(&mut self) -> WAVE_W {
                WAVE_W { w: self }
            }
            #[doc = "Bit 19 - Timeout enable"]
            #[inline(always)]
            pub fn timout(&mut self) -> TIMOUT_W {
                TIMOUT_W { w: self }
            }
            #[doc = "Bits 17:18 - Trigger enable and polarity"]
            #[inline(always)]
            pub fn trigen(&mut self) -> TRIGEN_W {
                TRIGEN_W { w: self }
            }
            #[doc = "Bits 13:15 - Trigger selector"]
            #[inline(always)]
            pub fn trigsel(&mut self) -> TRIGSEL_W {
                TRIGSEL_W { w: self }
            }
            #[doc = "Bits 9:11 - Clock prescaler"]
            #[inline(always)]
            pub fn presc(&mut self) -> PRESC_W {
                PRESC_W { w: self }
            }
            #[doc = "Bits 6:7 - Configurable digital filter for trigger"]
            #[inline(always)]
            pub fn trgflt(&mut self) -> TRGFLT_W {
                TRGFLT_W { w: self }
            }
            #[doc = "Bits 3:4 - Configurable digital filter for external clock"]
            #[inline(always)]
            pub fn ckflt(&mut self) -> CKFLT_W {
                CKFLT_W { w: self }
            }
            #[doc = "Bits 1:2 - Clock Polarity"]
            #[inline(always)]
            pub fn ckpol(&mut self) -> CKPOL_W {
                CKPOL_W { w: self }
            }
            #[doc = "Bit 0 - Clock selector"]
            #[inline(always)]
            pub fn cksel(&mut self) -> CKSEL_W {
                CKSEL_W { w: self }
            }
        }
    }
    #[doc = "Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Control Register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RSTARE`"]
        pub type RSTARE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RSTARE`"]
        pub struct RSTARE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSTARE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `COUNTRST`"]
        pub type COUNTRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COUNTRST`"]
        pub struct COUNTRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COUNTRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CNTSTRT`"]
        pub type CNTSTRT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CNTSTRT`"]
        pub struct CNTSTRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNTSTRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `SNGSTRT`"]
        pub type SNGSTRT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SNGSTRT`"]
        pub struct SNGSTRT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SNGSTRT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `ENABLE`"]
        pub type ENABLE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ENABLE`"]
        pub struct ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 4 - Reset after read enable"]
            #[inline(always)]
            pub fn rstare(&self) -> RSTARE_R {
                RSTARE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Counter reset"]
            #[inline(always)]
            pub fn countrst(&self) -> COUNTRST_R {
                COUNTRST_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Timer start in continuous mode"]
            #[inline(always)]
            pub fn cntstrt(&self) -> CNTSTRT_R {
                CNTSTRT_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - LPTIM start in single mode"]
            #[inline(always)]
            pub fn sngstrt(&self) -> SNGSTRT_R {
                SNGSTRT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - LPTIM Enable"]
            #[inline(always)]
            pub fn enable(&self) -> ENABLE_R {
                ENABLE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 4 - Reset after read enable"]
            #[inline(always)]
            pub fn rstare(&mut self) -> RSTARE_W {
                RSTARE_W { w: self }
            }
            #[doc = "Bit 3 - Counter reset"]
            #[inline(always)]
            pub fn countrst(&mut self) -> COUNTRST_W {
                COUNTRST_W { w: self }
            }
            #[doc = "Bit 2 - Timer start in continuous mode"]
            #[inline(always)]
            pub fn cntstrt(&mut self) -> CNTSTRT_W {
                CNTSTRT_W { w: self }
            }
            #[doc = "Bit 1 - LPTIM start in single mode"]
            #[inline(always)]
            pub fn sngstrt(&mut self) -> SNGSTRT_W {
                SNGSTRT_W { w: self }
            }
            #[doc = "Bit 0 - LPTIM Enable"]
            #[inline(always)]
            pub fn enable(&mut self) -> ENABLE_W {
                ENABLE_W { w: self }
            }
        }
    }
    #[doc = "Compare Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cmp](cmp) module"]
    pub type CMP = crate::Reg<u32, _CMP>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CMP;
    #[doc = "`read()` method returns [cmp::R](cmp::R) reader structure"]
    impl crate::Readable for CMP {}
    #[doc = "`write(|w| ..)` method takes [cmp::W](cmp::W) writer structure"]
    impl crate::Writable for CMP {}
    #[doc = "Compare Register"]
    pub mod cmp {
        #[doc = "Reader of register CMP"]
        pub type R = crate::R<u32, super::CMP>;
        #[doc = "Writer for register CMP"]
        pub type W = crate::W<u32, super::CMP>;
        #[doc = "Register CMP `reset()`'s with value 0"]
        impl crate::ResetValue for super::CMP {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CMP`"]
        pub type CMP_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CMP`"]
        pub struct CMP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Compare value"]
            #[inline(always)]
            pub fn cmp(&self) -> CMP_R {
                CMP_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Compare value"]
            #[inline(always)]
            pub fn cmp(&mut self) -> CMP_W {
                CMP_W { w: self }
            }
        }
    }
    #[doc = "Autoreload Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "Autoreload Register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Auto reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Auto reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "Counter Register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "Counter Register"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "LPTIM configuration register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cfgr2](cfgr2) module"]
    pub type CFGR2 = crate::Reg<u32, _CFGR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CFGR2;
    #[doc = "`read()` method returns [cfgr2::R](cfgr2::R) reader structure"]
    impl crate::Readable for CFGR2 {}
    #[doc = "`write(|w| ..)` method takes [cfgr2::W](cfgr2::W) writer structure"]
    impl crate::Writable for CFGR2 {}
    #[doc = "LPTIM configuration register 2"]
    pub mod cfgr2 {
        #[doc = "Reader of register CFGR2"]
        pub type R = crate::R<u32, super::CFGR2>;
        #[doc = "Writer for register CFGR2"]
        pub type W = crate::W<u32, super::CFGR2>;
        #[doc = "Register CFGR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CFGR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IN2SEL`"]
        pub type IN2SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IN2SEL`"]
        pub struct IN2SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IN2SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IN1SEL`"]
        pub type IN1SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IN1SEL`"]
        pub struct IN1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IN1SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:5 - LPTIM1 Input 2 selection"]
            #[inline(always)]
            pub fn in2sel(&self) -> IN2SEL_R {
                IN2SEL_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - LPTIMx Input 1 selection"]
            #[inline(always)]
            pub fn in1sel(&self) -> IN1SEL_R {
                IN1SEL_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:5 - LPTIM1 Input 2 selection"]
            #[inline(always)]
            pub fn in2sel(&mut self) -> IN2SEL_W {
                IN2SEL_W { w: self }
            }
            #[doc = "Bits 0:1 - LPTIMx Input 1 selection"]
            #[inline(always)]
            pub fn in1sel(&mut self) -> IN1SEL_W {
                IN1SEL_W { w: self }
            }
        }
    }
}
#[doc = "Low power timer"]
pub struct LPTIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPTIM2 {}
impl LPTIM2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lptim1::RegisterBlock {
        0x4000_9400 as *const _
    }
}
impl Deref for LPTIM2 {
    type Target = lptim1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*LPTIM2::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct LPUART {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LPUART {}
impl LPUART {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lpuart::RegisterBlock {
        0x4000_8000 as *const _
    }
}
impl Deref for LPUART {
    type Target = lpuart::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*LPUART::ptr() }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod lpuart {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - Control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - Control register 3"]
        pub cr3: CR3,
        #[doc = "0x0c - Baud rate register"]
        pub brr: BRR,
        _reserved4: [u8; 8usize],
        #[doc = "0x18 - Request register"]
        pub rqr: RQR,
        #[doc = "0x1c - Interrupt & status register"]
        pub isr: ISR,
        #[doc = "0x20 - Interrupt flag clear register"]
        pub icr: ICR,
        #[doc = "0x24 - Receive data register"]
        pub rdr: RDR,
        #[doc = "0x28 - Transmit data register"]
        pub tdr: TDR,
        #[doc = "0x2c - Prescaler register"]
        pub presc: PRESC,
    }
    #[doc = "Control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "Control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RXFFIE`"]
        pub type RXFFIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXFFIE`"]
        pub struct RXFFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFFIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `TXFEIE`"]
        pub type TXFEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXFEIE`"]
        pub struct TXFEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `FIFOEN`"]
        pub type FIFOEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FIFOEN`"]
        pub struct FIFOEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FIFOEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `M1`"]
        pub type M1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `M1`"]
        pub struct M1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DEAT`"]
        pub type DEAT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DEAT`"]
        pub struct DEAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEAT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 21)) | (((value as u32) & 0x1f) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `DEDT0`"]
        pub type DEDT0_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DEDT0`"]
        pub struct DEDT0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEDT0_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 16)) | (((value as u32) & 0x1f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CMIE`"]
        pub type CMIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CMIE`"]
        pub struct CMIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `MME`"]
        pub type MME_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MME`"]
        pub struct MME_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MME_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `M0`"]
        pub type M0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `M0`"]
        pub struct M0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> M0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `WAKE`"]
        pub type WAKE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WAKE`"]
        pub struct WAKE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WAKE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `PCE`"]
        pub type PCE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PCE`"]
        pub struct PCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PCE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `PS`"]
        pub type PS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PS`"]
        pub struct PS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `PEIE`"]
        pub type PEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PEIE`"]
        pub struct PEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TXEIE`"]
        pub type TXEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXEIE`"]
        pub struct TXEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `RXNEIE`"]
        pub type RXNEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXNEIE`"]
        pub struct RXNEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXNEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `IDLEIE`"]
        pub type IDLEIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IDLEIE`"]
        pub struct IDLEIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDLEIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `TE`"]
        pub type TE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TE`"]
        pub struct TE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `RE`"]
        pub type RE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RE`"]
        pub struct RE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `UESM`"]
        pub type UESM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UESM`"]
        pub struct UESM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UESM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `UE`"]
        pub type UE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UE`"]
        pub struct UE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - RXFIFO Full interrupt enable"]
            #[inline(always)]
            pub fn rxffie(&self) -> RXFFIE_R {
                RXFFIE_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - TXFIFO empty interrupt enable"]
            #[inline(always)]
            pub fn txfeie(&self) -> TXFEIE_R {
                TXFEIE_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 29 - FIFO mode enable"]
            #[inline(always)]
            pub fn fifoen(&self) -> FIFOEN_R {
                FIFOEN_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Word length"]
            #[inline(always)]
            pub fn m1(&self) -> M1_R {
                M1_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bits 21:25 - DEAT0"]
            #[inline(always)]
            pub fn deat(&self) -> DEAT_R {
                DEAT_R::new(((self.bits >> 21) & 0x1f) as u8)
            }
            #[doc = "Bits 16:20 - DEDT0"]
            #[inline(always)]
            pub fn dedt0(&self) -> DEDT0_R {
                DEDT0_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bit 14 - Character match interrupt enable"]
            #[inline(always)]
            pub fn cmie(&self) -> CMIE_R {
                CMIE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Mute mode enable"]
            #[inline(always)]
            pub fn mme(&self) -> MME_R {
                MME_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn m0(&self) -> M0_R {
                M0_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Receiver wakeup method"]
            #[inline(always)]
            pub fn wake(&self) -> WAKE_R {
                WAKE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Parity control enable"]
            #[inline(always)]
            pub fn pce(&self) -> PCE_R {
                PCE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Parity selection"]
            #[inline(always)]
            pub fn ps(&self) -> PS_R {
                PS_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - PE interrupt enable"]
            #[inline(always)]
            pub fn peie(&self) -> PEIE_R {
                PEIE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - interrupt enable"]
            #[inline(always)]
            pub fn txeie(&self) -> TXEIE_R {
                TXEIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - RXNE interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&self) -> RXNEIE_R {
                RXNEIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IDLE interrupt enable"]
            #[inline(always)]
            pub fn idleie(&self) -> IDLEIE_R {
                IDLEIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn te(&self) -> TE_R {
                TE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn re(&self) -> RE_R {
                RE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - USART enable in Stop mode"]
            #[inline(always)]
            pub fn uesm(&self) -> UESM_R {
                UESM_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - USART enable"]
            #[inline(always)]
            pub fn ue(&self) -> UE_R {
                UE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 31 - RXFIFO Full interrupt enable"]
            #[inline(always)]
            pub fn rxffie(&mut self) -> RXFFIE_W {
                RXFFIE_W { w: self }
            }
            #[doc = "Bit 30 - TXFIFO empty interrupt enable"]
            #[inline(always)]
            pub fn txfeie(&mut self) -> TXFEIE_W {
                TXFEIE_W { w: self }
            }
            #[doc = "Bit 29 - FIFO mode enable"]
            #[inline(always)]
            pub fn fifoen(&mut self) -> FIFOEN_W {
                FIFOEN_W { w: self }
            }
            #[doc = "Bit 28 - Word length"]
            #[inline(always)]
            pub fn m1(&mut self) -> M1_W {
                M1_W { w: self }
            }
            #[doc = "Bits 21:25 - DEAT0"]
            #[inline(always)]
            pub fn deat(&mut self) -> DEAT_W {
                DEAT_W { w: self }
            }
            #[doc = "Bits 16:20 - DEDT0"]
            #[inline(always)]
            pub fn dedt0(&mut self) -> DEDT0_W {
                DEDT0_W { w: self }
            }
            #[doc = "Bit 14 - Character match interrupt enable"]
            #[inline(always)]
            pub fn cmie(&mut self) -> CMIE_W {
                CMIE_W { w: self }
            }
            #[doc = "Bit 13 - Mute mode enable"]
            #[inline(always)]
            pub fn mme(&mut self) -> MME_W {
                MME_W { w: self }
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn m0(&mut self) -> M0_W {
                M0_W { w: self }
            }
            #[doc = "Bit 11 - Receiver wakeup method"]
            #[inline(always)]
            pub fn wake(&mut self) -> WAKE_W {
                WAKE_W { w: self }
            }
            #[doc = "Bit 10 - Parity control enable"]
            #[inline(always)]
            pub fn pce(&mut self) -> PCE_W {
                PCE_W { w: self }
            }
            #[doc = "Bit 9 - Parity selection"]
            #[inline(always)]
            pub fn ps(&mut self) -> PS_W {
                PS_W { w: self }
            }
            #[doc = "Bit 8 - PE interrupt enable"]
            #[inline(always)]
            pub fn peie(&mut self) -> PEIE_W {
                PEIE_W { w: self }
            }
            #[doc = "Bit 7 - interrupt enable"]
            #[inline(always)]
            pub fn txeie(&mut self) -> TXEIE_W {
                TXEIE_W { w: self }
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 5 - RXNE interrupt enable"]
            #[inline(always)]
            pub fn rxneie(&mut self) -> RXNEIE_W {
                RXNEIE_W { w: self }
            }
            #[doc = "Bit 4 - IDLE interrupt enable"]
            #[inline(always)]
            pub fn idleie(&mut self) -> IDLEIE_W {
                IDLEIE_W { w: self }
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn te(&mut self) -> TE_W {
                TE_W { w: self }
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn re(&mut self) -> RE_W {
                RE_W { w: self }
            }
            #[doc = "Bit 1 - USART enable in Stop mode"]
            #[inline(always)]
            pub fn uesm(&mut self) -> UESM_W {
                UESM_W { w: self }
            }
            #[doc = "Bit 0 - USART enable"]
            #[inline(always)]
            pub fn ue(&mut self) -> UE_W {
                UE_W { w: self }
            }
        }
    }
    #[doc = "Control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "Control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADD4_7`"]
        pub type ADD4_7_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADD4_7`"]
        pub struct ADD4_7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD4_7_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `ADD0_3`"]
        pub type ADD0_3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ADD0_3`"]
        pub struct ADD0_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD0_3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `MSBFIRST`"]
        pub type MSBFIRST_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSBFIRST`"]
        pub struct MSBFIRST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSBFIRST_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `TAINV`"]
        pub type TAINV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAINV`"]
        pub struct TAINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAINV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `TXINV`"]
        pub type TXINV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXINV`"]
        pub struct TXINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXINV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `RXINV`"]
        pub type RXINV_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXINV`"]
        pub struct RXINV_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXINV_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SWAP`"]
        pub type SWAP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SWAP`"]
        pub struct SWAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SWAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `STOP`"]
        pub type STOP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `STOP`"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `ADDM7`"]
        pub type ADDM7_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADDM7`"]
        pub struct ADDM7_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDM7_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 28:31 - Address of the USART node"]
            #[inline(always)]
            pub fn add4_7(&self) -> ADD4_7_R {
                ADD4_7_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Address of the USART node"]
            #[inline(always)]
            pub fn add0_3(&self) -> ADD0_3_R {
                ADD0_3_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bit 19 - Most significant bit first"]
            #[inline(always)]
            pub fn msbfirst(&self) -> MSBFIRST_R {
                MSBFIRST_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Binary data inversion"]
            #[inline(always)]
            pub fn tainv(&self) -> TAINV_R {
                TAINV_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - TX pin active level inversion"]
            #[inline(always)]
            pub fn txinv(&self) -> TXINV_R {
                TXINV_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - RX pin active level inversion"]
            #[inline(always)]
            pub fn rxinv(&self) -> RXINV_R {
                RXINV_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Swap TX/RX pins"]
            #[inline(always)]
            pub fn swap(&self) -> SWAP_R {
                SWAP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - STOP bits"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bit 4 - 7-bit Address Detection/4-bit Address Detection"]
            #[inline(always)]
            pub fn addm7(&self) -> ADDM7_R {
                ADDM7_R::new(((self.bits >> 4) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 28:31 - Address of the USART node"]
            #[inline(always)]
            pub fn add4_7(&mut self) -> ADD4_7_W {
                ADD4_7_W { w: self }
            }
            #[doc = "Bits 24:27 - Address of the USART node"]
            #[inline(always)]
            pub fn add0_3(&mut self) -> ADD0_3_W {
                ADD0_3_W { w: self }
            }
            #[doc = "Bit 19 - Most significant bit first"]
            #[inline(always)]
            pub fn msbfirst(&mut self) -> MSBFIRST_W {
                MSBFIRST_W { w: self }
            }
            #[doc = "Bit 18 - Binary data inversion"]
            #[inline(always)]
            pub fn tainv(&mut self) -> TAINV_W {
                TAINV_W { w: self }
            }
            #[doc = "Bit 17 - TX pin active level inversion"]
            #[inline(always)]
            pub fn txinv(&mut self) -> TXINV_W {
                TXINV_W { w: self }
            }
            #[doc = "Bit 16 - RX pin active level inversion"]
            #[inline(always)]
            pub fn rxinv(&mut self) -> RXINV_W {
                RXINV_W { w: self }
            }
            #[doc = "Bit 15 - Swap TX/RX pins"]
            #[inline(always)]
            pub fn swap(&mut self) -> SWAP_W {
                SWAP_W { w: self }
            }
            #[doc = "Bits 12:13 - STOP bits"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 4 - 7-bit Address Detection/4-bit Address Detection"]
            #[inline(always)]
            pub fn addm7(&mut self) -> ADDM7_W {
                ADDM7_W { w: self }
            }
        }
    }
    #[doc = "Control register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr3](cr3) module"]
    pub type CR3 = crate::Reg<u32, _CR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR3;
    #[doc = "`read()` method returns [cr3::R](cr3::R) reader structure"]
    impl crate::Readable for CR3 {}
    #[doc = "`write(|w| ..)` method takes [cr3::W](cr3::W) writer structure"]
    impl crate::Writable for CR3 {}
    #[doc = "Control register 3"]
    pub mod cr3 {
        #[doc = "Reader of register CR3"]
        pub type R = crate::R<u32, super::CR3>;
        #[doc = "Writer for register CR3"]
        pub type W = crate::W<u32, super::CR3>;
        #[doc = "Register CR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TXFTCFG`"]
        pub type TXFTCFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TXFTCFG`"]
        pub struct TXFTCFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFTCFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 29)) | (((value as u32) & 0x07) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `RXFTIE`"]
        pub type RXFTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXFTIE`"]
        pub struct RXFTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `RXFTCFG`"]
        pub type RXFTCFG_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RXFTCFG`"]
        pub struct RXFTCFG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFTCFG_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 25)) | (((value as u32) & 0x07) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `TXFTIE`"]
        pub type TXFTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXFTIE`"]
        pub struct TXFTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `WUFIE`"]
        pub type WUFIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUFIE`"]
        pub struct WUFIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUFIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `WUS`"]
        pub type WUS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WUS`"]
        pub struct WUS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `DEP`"]
        pub type DEP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DEP`"]
        pub struct DEP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `DEM`"]
        pub type DEM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DEM`"]
        pub struct DEM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DEM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `DDRE`"]
        pub type DDRE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DDRE`"]
        pub struct DDRE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DDRE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `OVRDIS`"]
        pub type OVRDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OVRDIS`"]
        pub struct OVRDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVRDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CTSIE`"]
        pub type CTSIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTSIE`"]
        pub struct CTSIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CTSE`"]
        pub type CTSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTSE`"]
        pub struct CTSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `RTSE`"]
        pub type RTSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RTSE`"]
        pub struct RTSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RTSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DMAT`"]
        pub type DMAT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAT`"]
        pub struct DMAT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `DMAR`"]
        pub type DMAR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DMAR`"]
        pub struct DMAR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `HDSEL`"]
        pub type HDSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HDSEL`"]
        pub struct HDSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HDSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `EIE`"]
        pub type EIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `EIE`"]
        pub struct EIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> EIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 29:31 - TXFIFO threshold configuration"]
            #[inline(always)]
            pub fn txftcfg(&self) -> TXFTCFG_R {
                TXFTCFG_R::new(((self.bits >> 29) & 0x07) as u8)
            }
            #[doc = "Bit 28 - RXFIFO threshold interrupt enable"]
            #[inline(always)]
            pub fn rxftie(&self) -> RXFTIE_R {
                RXFTIE_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bits 25:27 - Receive FIFO threshold configuration"]
            #[inline(always)]
            pub fn rxftcfg(&self) -> RXFTCFG_R {
                RXFTCFG_R::new(((self.bits >> 25) & 0x07) as u8)
            }
            #[doc = "Bit 23 - threshold interrupt enable"]
            #[inline(always)]
            pub fn txftie(&self) -> TXFTIE_R {
                TXFTIE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - Wakeup from Stop mode interrupt enable"]
            #[inline(always)]
            pub fn wufie(&self) -> WUFIE_R {
                WUFIE_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Wakeup from Stop mode interrupt flag selection"]
            #[inline(always)]
            pub fn wus(&self) -> WUS_R {
                WUS_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bit 15 - Driver enable polarity selection"]
            #[inline(always)]
            pub fn dep(&self) -> DEP_R {
                DEP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Driver enable mode"]
            #[inline(always)]
            pub fn dem(&self) -> DEM_R {
                DEM_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - DMA Disable on Reception Error"]
            #[inline(always)]
            pub fn ddre(&self) -> DDRE_R {
                DDRE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Overrun Disable"]
            #[inline(always)]
            pub fn ovrdis(&self) -> OVRDIS_R {
                OVRDIS_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&self) -> CTSIE_R {
                CTSIE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctse(&self) -> CTSE_R {
                CTSE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtse(&self) -> RTSE_R {
                RTSE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - DMA enable transmitter"]
            #[inline(always)]
            pub fn dmat(&self) -> DMAT_R {
                DMAT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - DMA enable receiver"]
            #[inline(always)]
            pub fn dmar(&self) -> DMAR_R {
                DMAR_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hdsel(&self) -> HDSEL_R {
                HDSEL_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn eie(&self) -> EIE_R {
                EIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 29:31 - TXFIFO threshold configuration"]
            #[inline(always)]
            pub fn txftcfg(&mut self) -> TXFTCFG_W {
                TXFTCFG_W { w: self }
            }
            #[doc = "Bit 28 - RXFIFO threshold interrupt enable"]
            #[inline(always)]
            pub fn rxftie(&mut self) -> RXFTIE_W {
                RXFTIE_W { w: self }
            }
            #[doc = "Bits 25:27 - Receive FIFO threshold configuration"]
            #[inline(always)]
            pub fn rxftcfg(&mut self) -> RXFTCFG_W {
                RXFTCFG_W { w: self }
            }
            #[doc = "Bit 23 - threshold interrupt enable"]
            #[inline(always)]
            pub fn txftie(&mut self) -> TXFTIE_W {
                TXFTIE_W { w: self }
            }
            #[doc = "Bit 22 - Wakeup from Stop mode interrupt enable"]
            #[inline(always)]
            pub fn wufie(&mut self) -> WUFIE_W {
                WUFIE_W { w: self }
            }
            #[doc = "Bits 20:21 - Wakeup from Stop mode interrupt flag selection"]
            #[inline(always)]
            pub fn wus(&mut self) -> WUS_W {
                WUS_W { w: self }
            }
            #[doc = "Bit 15 - Driver enable polarity selection"]
            #[inline(always)]
            pub fn dep(&mut self) -> DEP_W {
                DEP_W { w: self }
            }
            #[doc = "Bit 14 - Driver enable mode"]
            #[inline(always)]
            pub fn dem(&mut self) -> DEM_W {
                DEM_W { w: self }
            }
            #[doc = "Bit 13 - DMA Disable on Reception Error"]
            #[inline(always)]
            pub fn ddre(&mut self) -> DDRE_W {
                DDRE_W { w: self }
            }
            #[doc = "Bit 12 - Overrun Disable"]
            #[inline(always)]
            pub fn ovrdis(&mut self) -> OVRDIS_W {
                OVRDIS_W { w: self }
            }
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&mut self) -> CTSIE_W {
                CTSIE_W { w: self }
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctse(&mut self) -> CTSE_W {
                CTSE_W { w: self }
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtse(&mut self) -> RTSE_W {
                RTSE_W { w: self }
            }
            #[doc = "Bit 7 - DMA enable transmitter"]
            #[inline(always)]
            pub fn dmat(&mut self) -> DMAT_W {
                DMAT_W { w: self }
            }
            #[doc = "Bit 6 - DMA enable receiver"]
            #[inline(always)]
            pub fn dmar(&mut self) -> DMAR_W {
                DMAR_W { w: self }
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hdsel(&mut self) -> HDSEL_W {
                HDSEL_W { w: self }
            }
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn eie(&mut self) -> EIE_W {
                EIE_W { w: self }
            }
        }
    }
    #[doc = "Baud rate register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [brr](brr) module"]
    pub type BRR = crate::Reg<u32, _BRR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _BRR;
    #[doc = "`read()` method returns [brr::R](brr::R) reader structure"]
    impl crate::Readable for BRR {}
    #[doc = "`write(|w| ..)` method takes [brr::W](brr::W) writer structure"]
    impl crate::Writable for BRR {}
    #[doc = "Baud rate register"]
    pub mod brr {
        #[doc = "Reader of register BRR"]
        pub type R = crate::R<u32, super::BRR>;
        #[doc = "Writer for register BRR"]
        pub type W = crate::W<u32, super::BRR>;
        #[doc = "Register BRR `reset()`'s with value 0"]
        impl crate::ResetValue for super::BRR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `BRR`"]
        pub type BRR_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `BRR`"]
        pub struct BRR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BRR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x000f_ffff) | ((value as u32) & 0x000f_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:19 - BRR"]
            #[inline(always)]
            pub fn brr(&self) -> BRR_R {
                BRR_R::new((self.bits & 0x000f_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:19 - BRR"]
            #[inline(always)]
            pub fn brr(&mut self) -> BRR_W {
                BRR_W { w: self }
            }
        }
    }
    #[doc = "Request register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rqr](rqr) module"]
    pub type RQR = crate::Reg<u32, _RQR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RQR;
    #[doc = "`write(|w| ..)` method takes [rqr::W](rqr::W) writer structure"]
    impl crate::Writable for RQR {}
    #[doc = "Request register"]
    pub mod rqr {
        #[doc = "Writer for register RQR"]
        pub type W = crate::W<u32, super::RQR>;
        #[doc = "Register RQR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RQR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `TXFRQ`"]
        pub struct TXFRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXFRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `RXFRQ`"]
        pub struct RXFRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXFRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `MMRQ`"]
        pub struct MMRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `SBKRQ`"]
        pub struct SBKRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBKRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `ABRRQ`"]
        pub struct ABRRQ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ABRRQ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 4 - Transmit data flush request"]
            #[inline(always)]
            pub fn txfrq(&mut self) -> TXFRQ_W {
                TXFRQ_W { w: self }
            }
            #[doc = "Bit 3 - Receive data flush request"]
            #[inline(always)]
            pub fn rxfrq(&mut self) -> RXFRQ_W {
                RXFRQ_W { w: self }
            }
            #[doc = "Bit 2 - Mute mode request"]
            #[inline(always)]
            pub fn mmrq(&mut self) -> MMRQ_W {
                MMRQ_W { w: self }
            }
            #[doc = "Bit 1 - Send break request"]
            #[inline(always)]
            pub fn sbkrq(&mut self) -> SBKRQ_W {
                SBKRQ_W { w: self }
            }
            #[doc = "Bit 0 - Auto baud rate request"]
            #[inline(always)]
            pub fn abrrq(&mut self) -> ABRRQ_W {
                ABRRQ_W { w: self }
            }
        }
    }
    #[doc = "Interrupt & status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "Interrupt & status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Reader of field `TXFT`"]
        pub type TXFT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXFT`"]
        pub type RXFT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXFF`"]
        pub type RXFF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXFE`"]
        pub type TXFE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `REACK`"]
        pub type REACK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TEACK`"]
        pub type TEACK_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUF`"]
        pub type WUF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RWU`"]
        pub type RWU_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SBKF`"]
        pub type SBKF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CMF`"]
        pub type CMF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CTS`"]
        pub type CTS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `CTSIF`"]
        pub type CTSIF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXE`"]
        pub type TXE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TC`"]
        pub type TC_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXNE`"]
        pub type RXNE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `IDLE`"]
        pub type IDLE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ORE`"]
        pub type ORE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `NF`"]
        pub type NF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FE`"]
        pub type FE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PE`"]
        pub type PE_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 27 - TXFIFO threshold flag"]
            #[inline(always)]
            pub fn txft(&self) -> TXFT_R {
                TXFT_R::new(((self.bits >> 27) & 0x01) != 0)
            }
            #[doc = "Bit 26 - RXFIFO threshold flag"]
            #[inline(always)]
            pub fn rxft(&self) -> RXFT_R {
                RXFT_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 24 - RXFIFO Full"]
            #[inline(always)]
            pub fn rxff(&self) -> RXFF_R {
                RXFF_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 23 - TXFIFO Empty"]
            #[inline(always)]
            pub fn txfe(&self) -> TXFE_R {
                TXFE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - REACK"]
            #[inline(always)]
            pub fn reack(&self) -> REACK_R {
                REACK_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 21 - TEACK"]
            #[inline(always)]
            pub fn teack(&self) -> TEACK_R {
                TEACK_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 20 - WUF"]
            #[inline(always)]
            pub fn wuf(&self) -> WUF_R {
                WUF_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 19 - RWU"]
            #[inline(always)]
            pub fn rwu(&self) -> RWU_R {
                RWU_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 18 - SBKF"]
            #[inline(always)]
            pub fn sbkf(&self) -> SBKF_R {
                SBKF_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 17 - CMF"]
            #[inline(always)]
            pub fn cmf(&self) -> CMF_R {
                CMF_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 16 - BUSY"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 10 - CTS"]
            #[inline(always)]
            pub fn cts(&self) -> CTS_R {
                CTS_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - CTSIF"]
            #[inline(always)]
            pub fn ctsif(&self) -> CTSIF_R {
                CTSIF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 7 - TXE"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - TC"]
            #[inline(always)]
            pub fn tc(&self) -> TC_R {
                TC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - RXNE"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - IDLE"]
            #[inline(always)]
            pub fn idle(&self) -> IDLE_R {
                IDLE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - ORE"]
            #[inline(always)]
            pub fn ore(&self) -> ORE_R {
                ORE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - NF"]
            #[inline(always)]
            pub fn nf(&self) -> NF_R {
                NF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - FE"]
            #[inline(always)]
            pub fn fe(&self) -> FE_R {
                FE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - PE"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "Interrupt flag clear register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "Interrupt flag clear register"]
    pub mod icr {
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `WUCF`"]
        pub struct WUCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Write proxy for field `CMCF`"]
        pub struct CMCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Write proxy for field `CTSCF`"]
        pub struct CTSCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `TCCF`"]
        pub struct TCCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `IDLECF`"]
        pub struct IDLECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDLECF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `ORECF`"]
        pub struct ORECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ORECF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `NCF`"]
        pub struct NCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `FECF`"]
        pub struct FECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FECF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `PECF`"]
        pub struct PECF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 20 - Wakeup from Stop mode clear flag"]
            #[inline(always)]
            pub fn wucf(&mut self) -> WUCF_W {
                WUCF_W { w: self }
            }
            #[doc = "Bit 17 - Character match clear flag"]
            #[inline(always)]
            pub fn cmcf(&mut self) -> CMCF_W {
                CMCF_W { w: self }
            }
            #[doc = "Bit 9 - CTS clear flag"]
            #[inline(always)]
            pub fn ctscf(&mut self) -> CTSCF_W {
                CTSCF_W { w: self }
            }
            #[doc = "Bit 6 - Transmission complete clear flag"]
            #[inline(always)]
            pub fn tccf(&mut self) -> TCCF_W {
                TCCF_W { w: self }
            }
            #[doc = "Bit 4 - Idle line detected clear flag"]
            #[inline(always)]
            pub fn idlecf(&mut self) -> IDLECF_W {
                IDLECF_W { w: self }
            }
            #[doc = "Bit 3 - Overrun error clear flag"]
            #[inline(always)]
            pub fn orecf(&mut self) -> ORECF_W {
                ORECF_W { w: self }
            }
            #[doc = "Bit 2 - Noise detected clear flag"]
            #[inline(always)]
            pub fn ncf(&mut self) -> NCF_W {
                NCF_W { w: self }
            }
            #[doc = "Bit 1 - Framing error clear flag"]
            #[inline(always)]
            pub fn fecf(&mut self) -> FECF_W {
                FECF_W { w: self }
            }
            #[doc = "Bit 0 - Parity error clear flag"]
            #[inline(always)]
            pub fn pecf(&mut self) -> PECF_W {
                PECF_W { w: self }
            }
        }
    }
    #[doc = "Receive data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rdr](rdr) module"]
    pub type RDR = crate::Reg<u32, _RDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RDR;
    #[doc = "`read()` method returns [rdr::R](rdr::R) reader structure"]
    impl crate::Readable for RDR {}
    #[doc = "Receive data register"]
    pub mod rdr {
        #[doc = "Reader of register RDR"]
        pub type R = crate::R<u32, super::RDR>;
        #[doc = "Reader of field `RDR`"]
        pub type RDR_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:8 - Receive data value"]
            #[inline(always)]
            pub fn rdr(&self) -> RDR_R {
                RDR_R::new((self.bits & 0x01ff) as u16)
            }
        }
    }
    #[doc = "Transmit data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tdr](tdr) module"]
    pub type TDR = crate::Reg<u32, _TDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TDR;
    #[doc = "`read()` method returns [tdr::R](tdr::R) reader structure"]
    impl crate::Readable for TDR {}
    #[doc = "`write(|w| ..)` method takes [tdr::W](tdr::W) writer structure"]
    impl crate::Writable for TDR {}
    #[doc = "Transmit data register"]
    pub mod tdr {
        #[doc = "Reader of register TDR"]
        pub type R = crate::R<u32, super::TDR>;
        #[doc = "Writer for register TDR"]
        pub type W = crate::W<u32, super::TDR>;
        #[doc = "Register TDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TDR`"]
        pub type TDR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TDR`"]
        pub struct TDR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | ((value as u32) & 0x01ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:8 - Transmit data value"]
            #[inline(always)]
            pub fn tdr(&self) -> TDR_R {
                TDR_R::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:8 - Transmit data value"]
            #[inline(always)]
            pub fn tdr(&mut self) -> TDR_W {
                TDR_W { w: self }
            }
        }
    }
    #[doc = "Prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [presc](presc) module"]
    pub type PRESC = crate::Reg<u32, _PRESC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PRESC;
    #[doc = "`read()` method returns [presc::R](presc::R) reader structure"]
    impl crate::Readable for PRESC {}
    #[doc = "`write(|w| ..)` method takes [presc::W](presc::W) writer structure"]
    impl crate::Writable for PRESC {}
    #[doc = "Prescaler register"]
    pub mod presc {
        #[doc = "Reader of register PRESC"]
        pub type R = crate::R<u32, super::PRESC>;
        #[doc = "Writer for register PRESC"]
        pub type W = crate::W<u32, super::PRESC>;
        #[doc = "Register PRESC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PRESC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PRESCALER`"]
        pub type PRESCALER_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PRESCALER`"]
        pub struct PRESCALER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRESCALER_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - Clock prescaler"]
            #[inline(always)]
            pub fn prescaler(&self) -> PRESCALER_R {
                PRESCALER_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Clock prescaler"]
            #[inline(always)]
            pub fn prescaler(&mut self) -> PRESCALER_W {
                PRESCALER_W { w: self }
            }
        }
    }
}
#[doc = "Inter-integrated circuit"]
pub struct I2C1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1 {}
impl I2C1 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        0x4000_5400 as *const _
    }
}
impl Deref for I2C1 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*I2C1::ptr() }
    }
}
#[doc = "Inter-integrated circuit"]
pub mod i2c1 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - Control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - Own address register 1"]
        pub oar1: OAR1,
        #[doc = "0x0c - Own address register 2"]
        pub oar2: OAR2,
        #[doc = "0x10 - Timing register"]
        pub timingr: TIMINGR,
        #[doc = "0x14 - Status register 1"]
        pub timeoutr: TIMEOUTR,
        #[doc = "0x18 - Interrupt and Status register"]
        pub isr: ISR,
        #[doc = "0x1c - Interrupt clear register"]
        pub icr: ICR,
        #[doc = "0x20 - PEC register"]
        pub pecr: PECR,
        #[doc = "0x24 - Receive data register"]
        pub rxdr: RXDR,
        #[doc = "0x28 - Transmit data register"]
        pub txdr: TXDR,
    }
    #[doc = "Control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "Control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PE`"]
        pub type PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PE`"]
        pub struct PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TXIE`"]
        pub type TXIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXIE`"]
        pub struct TXIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `RXIE`"]
        pub type RXIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXIE`"]
        pub struct RXIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `ADDRIE`"]
        pub type ADDRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADDRIE`"]
        pub struct ADDRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `NACKIE`"]
        pub type NACKIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NACKIE`"]
        pub struct NACKIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NACKIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `STOPIE`"]
        pub type STOPIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STOPIE`"]
        pub struct STOPIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOPIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `TCIE`"]
        pub type TCIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TCIE`"]
        pub struct TCIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TCIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ERRIE`"]
        pub type ERRIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ERRIE`"]
        pub struct ERRIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ERRIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `DNF`"]
        pub type DNF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DNF`"]
        pub struct DNF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DNF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ANFOFF`"]
        pub type ANFOFF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ANFOFF`"]
        pub struct ANFOFF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ANFOFF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TXDMAEN`"]
        pub type TXDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXDMAEN`"]
        pub struct TXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `RXDMAEN`"]
        pub type RXDMAEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RXDMAEN`"]
        pub struct RXDMAEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RXDMAEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `SBC`"]
        pub type SBC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SBC`"]
        pub struct SBC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SBC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `NOSTRETCH`"]
        pub type NOSTRETCH_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NOSTRETCH`"]
        pub struct NOSTRETCH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NOSTRETCH_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `WUPEN`"]
        pub type WUPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUPEN`"]
        pub struct WUPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `GCEN`"]
        pub type GCEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `GCEN`"]
        pub struct GCEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> GCEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `SMBHEN`"]
        pub type SMBHEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMBHEN`"]
        pub struct SMBHEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMBHEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `SMBDEN`"]
        pub type SMBDEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMBDEN`"]
        pub struct SMBDEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMBDEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `ALERTEN`"]
        pub type ALERTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALERTEN`"]
        pub struct ALERTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALERTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `PECEN`"]
        pub type PECEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PECEN`"]
        pub struct PECEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Peripheral enable"]
            #[inline(always)]
            pub fn pe(&self) -> PE_R {
                PE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TX Interrupt enable"]
            #[inline(always)]
            pub fn txie(&self) -> TXIE_R {
                TXIE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - RX Interrupt enable"]
            #[inline(always)]
            pub fn rxie(&self) -> RXIE_R {
                RXIE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Address match interrupt enable (slave only)"]
            #[inline(always)]
            pub fn addrie(&self) -> ADDRIE_R {
                ADDRIE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Not acknowledge received interrupt enable"]
            #[inline(always)]
            pub fn nackie(&self) -> NACKIE_R {
                NACKIE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - STOP detection Interrupt enable"]
            #[inline(always)]
            pub fn stopie(&self) -> STOPIE_R {
                STOPIE_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transfer Complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TCIE_R {
                TCIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Error interrupts enable"]
            #[inline(always)]
            pub fn errie(&self) -> ERRIE_R {
                ERRIE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Digital noise filter"]
            #[inline(always)]
            pub fn dnf(&self) -> DNF_R {
                DNF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 12 - Analog noise filter OFF"]
            #[inline(always)]
            pub fn anfoff(&self) -> ANFOFF_R {
                ANFOFF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 14 - DMA transmission requests enable"]
            #[inline(always)]
            pub fn txdmaen(&self) -> TXDMAEN_R {
                TXDMAEN_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - DMA reception requests enable"]
            #[inline(always)]
            pub fn rxdmaen(&self) -> RXDMAEN_R {
                RXDMAEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Slave byte control"]
            #[inline(always)]
            pub fn sbc(&self) -> SBC_R {
                SBC_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - Clock stretching disable"]
            #[inline(always)]
            pub fn nostretch(&self) -> NOSTRETCH_R {
                NOSTRETCH_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - Wakeup from STOP enable"]
            #[inline(always)]
            pub fn wupen(&self) -> WUPEN_R {
                WUPEN_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - General call enable"]
            #[inline(always)]
            pub fn gcen(&self) -> GCEN_R {
                GCEN_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - SMBus Host address enable"]
            #[inline(always)]
            pub fn smbhen(&self) -> SMBHEN_R {
                SMBHEN_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bit 21 - SMBus Device Default address enable"]
            #[inline(always)]
            pub fn smbden(&self) -> SMBDEN_R {
                SMBDEN_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 22 - SMBUS alert enable"]
            #[inline(always)]
            pub fn alerten(&self) -> ALERTEN_R {
                ALERTEN_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bit 23 - PEC enable"]
            #[inline(always)]
            pub fn pecen(&self) -> PECEN_R {
                PECEN_R::new(((self.bits >> 23) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Peripheral enable"]
            #[inline(always)]
            pub fn pe(&mut self) -> PE_W {
                PE_W { w: self }
            }
            #[doc = "Bit 1 - TX Interrupt enable"]
            #[inline(always)]
            pub fn txie(&mut self) -> TXIE_W {
                TXIE_W { w: self }
            }
            #[doc = "Bit 2 - RX Interrupt enable"]
            #[inline(always)]
            pub fn rxie(&mut self) -> RXIE_W {
                RXIE_W { w: self }
            }
            #[doc = "Bit 3 - Address match interrupt enable (slave only)"]
            #[inline(always)]
            pub fn addrie(&mut self) -> ADDRIE_W {
                ADDRIE_W { w: self }
            }
            #[doc = "Bit 4 - Not acknowledge received interrupt enable"]
            #[inline(always)]
            pub fn nackie(&mut self) -> NACKIE_W {
                NACKIE_W { w: self }
            }
            #[doc = "Bit 5 - STOP detection Interrupt enable"]
            #[inline(always)]
            pub fn stopie(&mut self) -> STOPIE_W {
                STOPIE_W { w: self }
            }
            #[doc = "Bit 6 - Transfer Complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&mut self) -> TCIE_W {
                TCIE_W { w: self }
            }
            #[doc = "Bit 7 - Error interrupts enable"]
            #[inline(always)]
            pub fn errie(&mut self) -> ERRIE_W {
                ERRIE_W { w: self }
            }
            #[doc = "Bits 8:11 - Digital noise filter"]
            #[inline(always)]
            pub fn dnf(&mut self) -> DNF_W {
                DNF_W { w: self }
            }
            #[doc = "Bit 12 - Analog noise filter OFF"]
            #[inline(always)]
            pub fn anfoff(&mut self) -> ANFOFF_W {
                ANFOFF_W { w: self }
            }
            #[doc = "Bit 14 - DMA transmission requests enable"]
            #[inline(always)]
            pub fn txdmaen(&mut self) -> TXDMAEN_W {
                TXDMAEN_W { w: self }
            }
            #[doc = "Bit 15 - DMA reception requests enable"]
            #[inline(always)]
            pub fn rxdmaen(&mut self) -> RXDMAEN_W {
                RXDMAEN_W { w: self }
            }
            #[doc = "Bit 16 - Slave byte control"]
            #[inline(always)]
            pub fn sbc(&mut self) -> SBC_W {
                SBC_W { w: self }
            }
            #[doc = "Bit 17 - Clock stretching disable"]
            #[inline(always)]
            pub fn nostretch(&mut self) -> NOSTRETCH_W {
                NOSTRETCH_W { w: self }
            }
            #[doc = "Bit 18 - Wakeup from STOP enable"]
            #[inline(always)]
            pub fn wupen(&mut self) -> WUPEN_W {
                WUPEN_W { w: self }
            }
            #[doc = "Bit 19 - General call enable"]
            #[inline(always)]
            pub fn gcen(&mut self) -> GCEN_W {
                GCEN_W { w: self }
            }
            #[doc = "Bit 20 - SMBus Host address enable"]
            #[inline(always)]
            pub fn smbhen(&mut self) -> SMBHEN_W {
                SMBHEN_W { w: self }
            }
            #[doc = "Bit 21 - SMBus Device Default address enable"]
            #[inline(always)]
            pub fn smbden(&mut self) -> SMBDEN_W {
                SMBDEN_W { w: self }
            }
            #[doc = "Bit 22 - SMBUS alert enable"]
            #[inline(always)]
            pub fn alerten(&mut self) -> ALERTEN_W {
                ALERTEN_W { w: self }
            }
            #[doc = "Bit 23 - PEC enable"]
            #[inline(always)]
            pub fn pecen(&mut self) -> PECEN_W {
                PECEN_W { w: self }
            }
        }
    }
    #[doc = "Control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "Control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PECBYTE`"]
        pub type PECBYTE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PECBYTE`"]
        pub struct PECBYTE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECBYTE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `AUTOEND`"]
        pub type AUTOEND_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AUTOEND`"]
        pub struct AUTOEND_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AUTOEND_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `RELOAD`"]
        pub type RELOAD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RELOAD`"]
        pub struct RELOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RELOAD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `NBYTES`"]
        pub type NBYTES_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `NBYTES`"]
        pub struct NBYTES_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NBYTES_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 16)) | (((value as u32) & 0xff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `NACK`"]
        pub type NACK_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NACK`"]
        pub struct NACK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NACK_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `STOP`"]
        pub type STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `STOP`"]
        pub struct STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `START`"]
        pub type START_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `START`"]
        pub struct START_W<'a> {
            w: &'a mut W,
        }
        impl<'a> START_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `HEAD10R`"]
        pub type HEAD10R_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HEAD10R`"]
        pub struct HEAD10R_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HEAD10R_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `ADD10`"]
        pub type ADD10_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADD10`"]
        pub struct ADD10_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD10_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `RD_WRN`"]
        pub type RD_WRN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RD_WRN`"]
        pub struct RD_WRN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RD_WRN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `SADD`"]
        pub type SADD_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `SADD`"]
        pub struct SADD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SADD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03ff) | ((value as u32) & 0x03ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 26 - Packet error checking byte"]
            #[inline(always)]
            pub fn pecbyte(&self) -> PECBYTE_R {
                PECBYTE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Automatic end mode (master mode)"]
            #[inline(always)]
            pub fn autoend(&self) -> AUTOEND_R {
                AUTOEND_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 24 - NBYTES reload mode"]
            #[inline(always)]
            pub fn reload(&self) -> RELOAD_R {
                RELOAD_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bits 16:23 - Number of bytes"]
            #[inline(always)]
            pub fn nbytes(&self) -> NBYTES_R {
                NBYTES_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bit 15 - NACK generation (slave mode)"]
            #[inline(always)]
            pub fn nack(&self) -> NACK_R {
                NACK_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Stop generation (master mode)"]
            #[inline(always)]
            pub fn stop(&self) -> STOP_R {
                STOP_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Start generation"]
            #[inline(always)]
            pub fn start(&self) -> START_R {
                START_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - 10-bit address header only read direction (master receiver mode)"]
            #[inline(always)]
            pub fn head10r(&self) -> HEAD10R_R {
                HEAD10R_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - 10-bit addressing mode (master mode)"]
            #[inline(always)]
            pub fn add10(&self) -> ADD10_R {
                ADD10_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Transfer direction (master mode)"]
            #[inline(always)]
            pub fn rd_wrn(&self) -> RD_WRN_R {
                RD_WRN_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 0:9 - Slave address bit (master mode)"]
            #[inline(always)]
            pub fn sadd(&self) -> SADD_R {
                SADD_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 26 - Packet error checking byte"]
            #[inline(always)]
            pub fn pecbyte(&mut self) -> PECBYTE_W {
                PECBYTE_W { w: self }
            }
            #[doc = "Bit 25 - Automatic end mode (master mode)"]
            #[inline(always)]
            pub fn autoend(&mut self) -> AUTOEND_W {
                AUTOEND_W { w: self }
            }
            #[doc = "Bit 24 - NBYTES reload mode"]
            #[inline(always)]
            pub fn reload(&mut self) -> RELOAD_W {
                RELOAD_W { w: self }
            }
            #[doc = "Bits 16:23 - Number of bytes"]
            #[inline(always)]
            pub fn nbytes(&mut self) -> NBYTES_W {
                NBYTES_W { w: self }
            }
            #[doc = "Bit 15 - NACK generation (slave mode)"]
            #[inline(always)]
            pub fn nack(&mut self) -> NACK_W {
                NACK_W { w: self }
            }
            #[doc = "Bit 14 - Stop generation (master mode)"]
            #[inline(always)]
            pub fn stop(&mut self) -> STOP_W {
                STOP_W { w: self }
            }
            #[doc = "Bit 13 - Start generation"]
            #[inline(always)]
            pub fn start(&mut self) -> START_W {
                START_W { w: self }
            }
            #[doc = "Bit 12 - 10-bit address header only read direction (master receiver mode)"]
            #[inline(always)]
            pub fn head10r(&mut self) -> HEAD10R_W {
                HEAD10R_W { w: self }
            }
            #[doc = "Bit 11 - 10-bit addressing mode (master mode)"]
            #[inline(always)]
            pub fn add10(&mut self) -> ADD10_W {
                ADD10_W { w: self }
            }
            #[doc = "Bit 10 - Transfer direction (master mode)"]
            #[inline(always)]
            pub fn rd_wrn(&mut self) -> RD_WRN_W {
                RD_WRN_W { w: self }
            }
            #[doc = "Bits 0:9 - Slave address bit (master mode)"]
            #[inline(always)]
            pub fn sadd(&mut self) -> SADD_W {
                SADD_W { w: self }
            }
        }
    }
    #[doc = "Own address register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [oar1](oar1) module"]
    pub type OAR1 = crate::Reg<u32, _OAR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OAR1;
    #[doc = "`read()` method returns [oar1::R](oar1::R) reader structure"]
    impl crate::Readable for OAR1 {}
    #[doc = "`write(|w| ..)` method takes [oar1::W](oar1::W) writer structure"]
    impl crate::Writable for OAR1 {}
    #[doc = "Own address register 1"]
    pub mod oar1 {
        #[doc = "Reader of register OAR1"]
        pub type R = crate::R<u32, super::OAR1>;
        #[doc = "Writer for register OAR1"]
        pub type W = crate::W<u32, super::OAR1>;
        #[doc = "Register OAR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::OAR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OA1_0`"]
        pub type OA1_0_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OA1_0`"]
        pub struct OA1_0_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA1_0_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `OA1_7_1`"]
        pub type OA1_7_1_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OA1_7_1`"]
        pub struct OA1_7_1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA1_7_1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 1)) | (((value as u32) & 0x7f) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `OA1_8_9`"]
        pub type OA1_8_9_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OA1_8_9`"]
        pub struct OA1_8_9_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA1_8_9_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OA1MODE`"]
        pub type OA1MODE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OA1MODE`"]
        pub struct OA1MODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA1MODE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `OA1EN`"]
        pub type OA1EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OA1EN`"]
        pub struct OA1EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA1EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Interface address"]
            #[inline(always)]
            pub fn oa1_0(&self) -> OA1_0_R {
                OA1_0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn oa1_7_1(&self) -> OA1_7_1_R {
                OA1_7_1_R::new(((self.bits >> 1) & 0x7f) as u8)
            }
            #[doc = "Bits 8:9 - Interface address"]
            #[inline(always)]
            pub fn oa1_8_9(&self) -> OA1_8_9_R {
                OA1_8_9_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 10 - Own Address 1 10-bit mode"]
            #[inline(always)]
            pub fn oa1mode(&self) -> OA1MODE_R {
                OA1MODE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Own Address 1 enable"]
            #[inline(always)]
            pub fn oa1en(&self) -> OA1EN_R {
                OA1EN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Interface address"]
            #[inline(always)]
            pub fn oa1_0(&mut self) -> OA1_0_W {
                OA1_0_W { w: self }
            }
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn oa1_7_1(&mut self) -> OA1_7_1_W {
                OA1_7_1_W { w: self }
            }
            #[doc = "Bits 8:9 - Interface address"]
            #[inline(always)]
            pub fn oa1_8_9(&mut self) -> OA1_8_9_W {
                OA1_8_9_W { w: self }
            }
            #[doc = "Bit 10 - Own Address 1 10-bit mode"]
            #[inline(always)]
            pub fn oa1mode(&mut self) -> OA1MODE_W {
                OA1MODE_W { w: self }
            }
            #[doc = "Bit 15 - Own Address 1 enable"]
            #[inline(always)]
            pub fn oa1en(&mut self) -> OA1EN_W {
                OA1EN_W { w: self }
            }
        }
    }
    #[doc = "Own address register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [oar2](oar2) module"]
    pub type OAR2 = crate::Reg<u32, _OAR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OAR2;
    #[doc = "`read()` method returns [oar2::R](oar2::R) reader structure"]
    impl crate::Readable for OAR2 {}
    #[doc = "`write(|w| ..)` method takes [oar2::W](oar2::W) writer structure"]
    impl crate::Writable for OAR2 {}
    #[doc = "Own address register 2"]
    pub mod oar2 {
        #[doc = "Reader of register OAR2"]
        pub type R = crate::R<u32, super::OAR2>;
        #[doc = "Writer for register OAR2"]
        pub type W = crate::W<u32, super::OAR2>;
        #[doc = "Register OAR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::OAR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OA2`"]
        pub type OA2_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OA2`"]
        pub struct OA2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA2_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 1)) | (((value as u32) & 0x7f) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `OA2MSK`"]
        pub type OA2MSK_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OA2MSK`"]
        pub struct OA2MSK_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA2MSK_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 8)) | (((value as u32) & 0x07) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OA2EN`"]
        pub type OA2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OA2EN`"]
        pub struct OA2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OA2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn oa2(&self) -> OA2_R {
                OA2_R::new(((self.bits >> 1) & 0x7f) as u8)
            }
            #[doc = "Bits 8:10 - Own Address 2 masks"]
            #[inline(always)]
            pub fn oa2msk(&self) -> OA2MSK_R {
                OA2MSK_R::new(((self.bits >> 8) & 0x07) as u8)
            }
            #[doc = "Bit 15 - Own Address 2 enable"]
            #[inline(always)]
            pub fn oa2en(&self) -> OA2EN_R {
                OA2EN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 1:7 - Interface address"]
            #[inline(always)]
            pub fn oa2(&mut self) -> OA2_W {
                OA2_W { w: self }
            }
            #[doc = "Bits 8:10 - Own Address 2 masks"]
            #[inline(always)]
            pub fn oa2msk(&mut self) -> OA2MSK_W {
                OA2MSK_W { w: self }
            }
            #[doc = "Bit 15 - Own Address 2 enable"]
            #[inline(always)]
            pub fn oa2en(&mut self) -> OA2EN_W {
                OA2EN_W { w: self }
            }
        }
    }
    #[doc = "Timing register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [timingr](timingr) module"]
    pub type TIMINGR = crate::Reg<u32, _TIMINGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TIMINGR;
    #[doc = "`read()` method returns [timingr::R](timingr::R) reader structure"]
    impl crate::Readable for TIMINGR {}
    #[doc = "`write(|w| ..)` method takes [timingr::W](timingr::W) writer structure"]
    impl crate::Writable for TIMINGR {}
    #[doc = "Timing register"]
    pub mod timingr {
        #[doc = "Reader of register TIMINGR"]
        pub type R = crate::R<u32, super::TIMINGR>;
        #[doc = "Writer for register TIMINGR"]
        pub type W = crate::W<u32, super::TIMINGR>;
        #[doc = "Register TIMINGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TIMINGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `SCLL`"]
        pub type SCLL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCLL`"]
        pub struct SCLL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        #[doc = "Reader of field `SCLH`"]
        pub type SCLH_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCLH`"]
        pub struct SCLH_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLH_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xff << 8)) | (((value as u32) & 0xff) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `SDADEL`"]
        pub type SDADEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SDADEL`"]
        pub struct SDADEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SDADEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SCLDEL`"]
        pub type SCLDEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SCLDEL`"]
        pub struct SCLDEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SCLDEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `PRESC`"]
        pub type PRESC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PRESC`"]
        pub struct PRESC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PRESC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 28)) | (((value as u32) & 0x0f) << 28);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - SCL low period (master mode)"]
            #[inline(always)]
            pub fn scll(&self) -> SCLL_R {
                SCLL_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - SCL high period (master mode)"]
            #[inline(always)]
            pub fn sclh(&self) -> SCLH_R {
                SCLH_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:19 - Data hold time"]
            #[inline(always)]
            pub fn sdadel(&self) -> SDADEL_R {
                SDADEL_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Data setup time"]
            #[inline(always)]
            pub fn scldel(&self) -> SCLDEL_R {
                SCLDEL_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 28:31 - Timing prescaler"]
            #[inline(always)]
            pub fn presc(&self) -> PRESC_R {
                PRESC_R::new(((self.bits >> 28) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - SCL low period (master mode)"]
            #[inline(always)]
            pub fn scll(&mut self) -> SCLL_W {
                SCLL_W { w: self }
            }
            #[doc = "Bits 8:15 - SCL high period (master mode)"]
            #[inline(always)]
            pub fn sclh(&mut self) -> SCLH_W {
                SCLH_W { w: self }
            }
            #[doc = "Bits 16:19 - Data hold time"]
            #[inline(always)]
            pub fn sdadel(&mut self) -> SDADEL_W {
                SDADEL_W { w: self }
            }
            #[doc = "Bits 20:23 - Data setup time"]
            #[inline(always)]
            pub fn scldel(&mut self) -> SCLDEL_W {
                SCLDEL_W { w: self }
            }
            #[doc = "Bits 28:31 - Timing prescaler"]
            #[inline(always)]
            pub fn presc(&mut self) -> PRESC_W {
                PRESC_W { w: self }
            }
        }
    }
    #[doc = "Status register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [timeoutr](timeoutr) module"]
    pub type TIMEOUTR = crate::Reg<u32, _TIMEOUTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TIMEOUTR;
    #[doc = "`read()` method returns [timeoutr::R](timeoutr::R) reader structure"]
    impl crate::Readable for TIMEOUTR {}
    #[doc = "`write(|w| ..)` method takes [timeoutr::W](timeoutr::W) writer structure"]
    impl crate::Writable for TIMEOUTR {}
    #[doc = "Status register 1"]
    pub mod timeoutr {
        #[doc = "Reader of register TIMEOUTR"]
        pub type R = crate::R<u32, super::TIMEOUTR>;
        #[doc = "Writer for register TIMEOUTR"]
        pub type W = crate::W<u32, super::TIMEOUTR>;
        #[doc = "Register TIMEOUTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TIMEOUTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TIMEOUTA`"]
        pub type TIMEOUTA_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TIMEOUTA`"]
        pub struct TIMEOUTA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMEOUTA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0fff) | ((value as u32) & 0x0fff);
                self.w
            }
        }
        #[doc = "Reader of field `TIDLE`"]
        pub type TIDLE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIDLE`"]
        pub struct TIDLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIDLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `TIMOUTEN`"]
        pub type TIMOUTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIMOUTEN`"]
        pub struct TIMOUTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMOUTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `TIMEOUTB`"]
        pub type TIMEOUTB_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `TIMEOUTB`"]
        pub struct TIMEOUTB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMEOUTB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0fff << 16)) | (((value as u32) & 0x0fff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `TEXTEN`"]
        pub type TEXTEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TEXTEN`"]
        pub struct TEXTEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TEXTEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:11 - Bus timeout A"]
            #[inline(always)]
            pub fn timeouta(&self) -> TIMEOUTA_R {
                TIMEOUTA_R::new((self.bits & 0x0fff) as u16)
            }
            #[doc = "Bit 12 - Idle clock timeout detection"]
            #[inline(always)]
            pub fn tidle(&self) -> TIDLE_R {
                TIDLE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Clock timeout enable"]
            #[inline(always)]
            pub fn timouten(&self) -> TIMOUTEN_R {
                TIMOUTEN_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 16:27 - Bus timeout B"]
            #[inline(always)]
            pub fn timeoutb(&self) -> TIMEOUTB_R {
                TIMEOUTB_R::new(((self.bits >> 16) & 0x0fff) as u16)
            }
            #[doc = "Bit 31 - Extended clock timeout enable"]
            #[inline(always)]
            pub fn texten(&self) -> TEXTEN_R {
                TEXTEN_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Bus timeout A"]
            #[inline(always)]
            pub fn timeouta(&mut self) -> TIMEOUTA_W {
                TIMEOUTA_W { w: self }
            }
            #[doc = "Bit 12 - Idle clock timeout detection"]
            #[inline(always)]
            pub fn tidle(&mut self) -> TIDLE_W {
                TIDLE_W { w: self }
            }
            #[doc = "Bit 15 - Clock timeout enable"]
            #[inline(always)]
            pub fn timouten(&mut self) -> TIMOUTEN_W {
                TIMOUTEN_W { w: self }
            }
            #[doc = "Bits 16:27 - Bus timeout B"]
            #[inline(always)]
            pub fn timeoutb(&mut self) -> TIMEOUTB_W {
                TIMEOUTB_W { w: self }
            }
            #[doc = "Bit 31 - Extended clock timeout enable"]
            #[inline(always)]
            pub fn texten(&mut self) -> TEXTEN_W {
                TEXTEN_W { w: self }
            }
        }
    }
    #[doc = "Interrupt and Status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [isr](isr) module"]
    pub type ISR = crate::Reg<u32, _ISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ISR;
    #[doc = "`read()` method returns [isr::R](isr::R) reader structure"]
    impl crate::Readable for ISR {}
    #[doc = "`write(|w| ..)` method takes [isr::W](isr::W) writer structure"]
    impl crate::Writable for ISR {}
    #[doc = "Interrupt and Status register"]
    pub mod isr {
        #[doc = "Reader of register ISR"]
        pub type R = crate::R<u32, super::ISR>;
        #[doc = "Writer for register ISR"]
        pub type W = crate::W<u32, super::ISR>;
        #[doc = "Register ISR `reset()`'s with value 0x01"]
        impl crate::ResetValue for super::ISR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x01
            }
        }
        #[doc = "Reader of field `ADDCODE`"]
        pub type ADDCODE_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BUSY`"]
        pub type BUSY_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ALERT`"]
        pub type ALERT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TIMEOUT`"]
        pub type TIMEOUT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `PECERR`"]
        pub type PECERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `OVR`"]
        pub type OVR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ARLO`"]
        pub type ARLO_R = crate::R<bool, bool>;
        #[doc = "Reader of field `BERR`"]
        pub type BERR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TCR`"]
        pub type TCR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TC`"]
        pub type TC_R = crate::R<bool, bool>;
        #[doc = "Reader of field `STOPF`"]
        pub type STOPF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `NACKF`"]
        pub type NACKF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ADDR`"]
        pub type ADDR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RXNE`"]
        pub type RXNE_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TXIS`"]
        pub type TXIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXIS`"]
        pub struct TXIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `TXE`"]
        pub type TXE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TXE`"]
        pub struct TXE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 17:23 - Address match code (Slave mode)"]
            #[inline(always)]
            pub fn addcode(&self) -> ADDCODE_R {
                ADDCODE_R::new(((self.bits >> 17) & 0x7f) as u8)
            }
            #[doc = "Bit 16 - Transfer direction (Slave mode)"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Bus busy"]
            #[inline(always)]
            pub fn busy(&self) -> BUSY_R {
                BUSY_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 13 - SMBus alert"]
            #[inline(always)]
            pub fn alert(&self) -> ALERT_R {
                ALERT_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Timeout or t_low detection flag"]
            #[inline(always)]
            pub fn timeout(&self) -> TIMEOUT_R {
                TIMEOUT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - PEC Error in reception"]
            #[inline(always)]
            pub fn pecerr(&self) -> PECERR_R {
                PECERR_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Overrun/Underrun (slave mode)"]
            #[inline(always)]
            pub fn ovr(&self) -> OVR_R {
                OVR_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Arbitration lost"]
            #[inline(always)]
            pub fn arlo(&self) -> ARLO_R {
                ARLO_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Bus error"]
            #[inline(always)]
            pub fn berr(&self) -> BERR_R {
                BERR_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Transfer Complete Reload"]
            #[inline(always)]
            pub fn tcr(&self) -> TCR_R {
                TCR_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Transfer Complete (master mode)"]
            #[inline(always)]
            pub fn tc(&self) -> TC_R {
                TC_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Stop detection flag"]
            #[inline(always)]
            pub fn stopf(&self) -> STOPF_R {
                STOPF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Not acknowledge received flag"]
            #[inline(always)]
            pub fn nackf(&self) -> NACKF_R {
                NACKF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Address matched (slave mode)"]
            #[inline(always)]
            pub fn addr(&self) -> ADDR_R {
                ADDR_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Receive data register not empty (receivers)"]
            #[inline(always)]
            pub fn rxne(&self) -> RXNE_R {
                RXNE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Transmit interrupt status (transmitters)"]
            #[inline(always)]
            pub fn txis(&self) -> TXIS_R {
                TXIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Transmit data register empty (transmitters)"]
            #[inline(always)]
            pub fn txe(&self) -> TXE_R {
                TXE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Transmit interrupt status (transmitters)"]
            #[inline(always)]
            pub fn txis(&mut self) -> TXIS_W {
                TXIS_W { w: self }
            }
            #[doc = "Bit 0 - Transmit data register empty (transmitters)"]
            #[inline(always)]
            pub fn txe(&mut self) -> TXE_W {
                TXE_W { w: self }
            }
        }
    }
    #[doc = "Interrupt clear register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icr](icr) module"]
    pub type ICR = crate::Reg<u32, _ICR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICR;
    #[doc = "`write(|w| ..)` method takes [icr::W](icr::W) writer structure"]
    impl crate::Writable for ICR {}
    #[doc = "Interrupt clear register"]
    pub mod icr {
        #[doc = "Writer for register ICR"]
        pub type W = crate::W<u32, super::ICR>;
        #[doc = "Register ICR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ICR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `ALERTCF`"]
        pub struct ALERTCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALERTCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Write proxy for field `TIMOUTCF`"]
        pub struct TIMOUTCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIMOUTCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Write proxy for field `PECCF`"]
        pub struct PECCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PECCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Write proxy for field `OVRCF`"]
        pub struct OVRCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OVRCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Write proxy for field `ARLOCF`"]
        pub struct ARLOCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARLOCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Write proxy for field `BERRCF`"]
        pub struct BERRCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BERRCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Write proxy for field `STOPCF`"]
        pub struct STOPCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> STOPCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Write proxy for field `NACKCF`"]
        pub struct NACKCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NACKCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `ADDRCF`"]
        pub struct ADDRCF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDRCF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 13 - Alert flag clear"]
            #[inline(always)]
            pub fn alertcf(&mut self) -> ALERTCF_W {
                ALERTCF_W { w: self }
            }
            #[doc = "Bit 12 - Timeout detection flag clear"]
            #[inline(always)]
            pub fn timoutcf(&mut self) -> TIMOUTCF_W {
                TIMOUTCF_W { w: self }
            }
            #[doc = "Bit 11 - PEC Error flag clear"]
            #[inline(always)]
            pub fn peccf(&mut self) -> PECCF_W {
                PECCF_W { w: self }
            }
            #[doc = "Bit 10 - Overrun/Underrun flag clear"]
            #[inline(always)]
            pub fn ovrcf(&mut self) -> OVRCF_W {
                OVRCF_W { w: self }
            }
            #[doc = "Bit 9 - Arbitration lost flag clear"]
            #[inline(always)]
            pub fn arlocf(&mut self) -> ARLOCF_W {
                ARLOCF_W { w: self }
            }
            #[doc = "Bit 8 - Bus error flag clear"]
            #[inline(always)]
            pub fn berrcf(&mut self) -> BERRCF_W {
                BERRCF_W { w: self }
            }
            #[doc = "Bit 5 - Stop detection flag clear"]
            #[inline(always)]
            pub fn stopcf(&mut self) -> STOPCF_W {
                STOPCF_W { w: self }
            }
            #[doc = "Bit 4 - Not Acknowledge flag clear"]
            #[inline(always)]
            pub fn nackcf(&mut self) -> NACKCF_W {
                NACKCF_W { w: self }
            }
            #[doc = "Bit 3 - Address Matched flag clear"]
            #[inline(always)]
            pub fn addrcf(&mut self) -> ADDRCF_W {
                ADDRCF_W { w: self }
            }
        }
    }
    #[doc = "PEC register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [pecr](pecr) module"]
    pub type PECR = crate::Reg<u32, _PECR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PECR;
    #[doc = "`read()` method returns [pecr::R](pecr::R) reader structure"]
    impl crate::Readable for PECR {}
    #[doc = "PEC register"]
    pub mod pecr {
        #[doc = "Reader of register PECR"]
        pub type R = crate::R<u32, super::PECR>;
        #[doc = "Reader of field `PEC`"]
        pub type PEC_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - Packet error checking register"]
            #[inline(always)]
            pub fn pec(&self) -> PEC_R {
                PEC_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Receive data register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxdr](rxdr) module"]
    pub type RXDR = crate::Reg<u32, _RXDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RXDR;
    #[doc = "`read()` method returns [rxdr::R](rxdr::R) reader structure"]
    impl crate::Readable for RXDR {}
    #[doc = "Receive data register"]
    pub mod rxdr {
        #[doc = "Reader of register RXDR"]
        pub type R = crate::R<u32, super::RXDR>;
        #[doc = "Reader of field `RXDATA`"]
        pub type RXDATA_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 0:7 - 8-bit receive data"]
            #[inline(always)]
            pub fn rxdata(&self) -> RXDATA_R {
                RXDATA_R::new((self.bits & 0xff) as u8)
            }
        }
    }
    #[doc = "Transmit data register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txdr](txdr) module"]
    pub type TXDR = crate::Reg<u32, _TXDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TXDR;
    #[doc = "`read()` method returns [txdr::R](txdr::R) reader structure"]
    impl crate::Readable for TXDR {}
    #[doc = "`write(|w| ..)` method takes [txdr::W](txdr::W) writer structure"]
    impl crate::Writable for TXDR {}
    #[doc = "Transmit data register"]
    pub mod txdr {
        #[doc = "Reader of register TXDR"]
        pub type R = crate::R<u32, super::TXDR>;
        #[doc = "Writer for register TXDR"]
        pub type W = crate::W<u32, super::TXDR>;
        #[doc = "Register TXDR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TXDR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TXDATA`"]
        pub type TXDATA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TXDATA`"]
        pub struct TXDATA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TXDATA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:7 - 8-bit transmit data"]
            #[inline(always)]
            pub fn txdata(&self) -> TXDATA_R {
                TXDATA_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - 8-bit transmit data"]
            #[inline(always)]
            pub fn txdata(&mut self) -> TXDATA_W {
                TXDATA_W { w: self }
            }
        }
    }
}
#[doc = "Inter-integrated circuit"]
pub struct I2C2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C2 {}
impl I2C2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1::RegisterBlock {
        0x4000_5800 as *const _
    }
}
impl Deref for I2C2 {
    type Target = i2c1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*I2C2::ptr() }
    }
}
#[doc = "Real-time clock"]
pub struct RTC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTC {}
impl RTC {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        0x4000_2800 as *const _
    }
}
impl Deref for RTC {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*RTC::ptr() }
    }
}
#[doc = "Real-time clock"]
pub mod rtc {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - time register"]
        pub tr: TR,
        #[doc = "0x04 - date register"]
        pub dr: DR,
        #[doc = "0x08 - sub second register"]
        pub ssr: SSR,
        #[doc = "0x0c - initialization and status register"]
        pub icsr: ICSR,
        #[doc = "0x10 - prescaler register"]
        pub prer: PRER,
        #[doc = "0x14 - wakeup timer register"]
        pub wutr: WUTR,
        #[doc = "0x18 - control register"]
        pub cr: CR,
        _reserved7: [u8; 8usize],
        #[doc = "0x24 - write protection register"]
        pub wpr: WPR,
        #[doc = "0x28 - calibration register"]
        pub calr: CALR,
        #[doc = "0x2c - shift control register"]
        pub shiftr: SHIFTR,
        #[doc = "0x30 - time stamp time register"]
        pub tstr: TSTR,
        #[doc = "0x34 - time stamp date register"]
        pub tsdr: TSDR,
        #[doc = "0x38 - timestamp sub second register"]
        pub tsssr: TSSSR,
        _reserved13: [u8; 4usize],
        #[doc = "0x40 - alarm A register"]
        pub alrmar: ALRMAR,
        #[doc = "0x44 - alarm A sub second register"]
        pub alrmassr: ALRMASSR,
        #[doc = "0x48 - alarm B register"]
        pub alrmbr: ALRMBR,
        #[doc = "0x4c - alarm B sub second register"]
        pub alrmbssr: ALRMBSSR,
        #[doc = "0x50 - status register"]
        pub sr: SR,
        #[doc = "0x54 - masked interrupt status register"]
        pub misr: MISR,
        _reserved19: [u8; 4usize],
        #[doc = "0x5c - status clear register"]
        pub scr: SCR,
    }
    #[doc = "time register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tr](tr) module"]
    pub type TR = crate::Reg<u32, _TR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TR;
    #[doc = "`read()` method returns [tr::R](tr::R) reader structure"]
    impl crate::Readable for TR {}
    #[doc = "`write(|w| ..)` method takes [tr::W](tr::W) writer structure"]
    impl crate::Writable for TR {}
    #[doc = "time register"]
    pub mod tr {
        #[doc = "Reader of register TR"]
        pub type R = crate::R<u32, super::TR>;
        #[doc = "Writer for register TR"]
        pub type W = crate::W<u32, super::TR>;
        #[doc = "Register TR `reset()`'s with value 0"]
        impl crate::ResetValue for super::TR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PM`"]
        pub struct PM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HT`"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HU`"]
        pub struct HU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNT`"]
        pub struct MNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNU`"]
        pub struct MNU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ST`"]
        pub struct ST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ST_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SU`"]
        pub struct SU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&mut self) -> PM_W {
                PM_W { w: self }
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&mut self) -> HU_W {
                HU_W { w: self }
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&mut self) -> MNT_W {
                MNT_W { w: self }
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&mut self) -> MNU_W {
                MNU_W { w: self }
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&mut self) -> ST_W {
                ST_W { w: self }
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&mut self) -> SU_W {
                SU_W { w: self }
            }
        }
    }
    #[doc = "date register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dr](dr) module"]
    pub type DR = crate::Reg<u32, _DR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DR;
    #[doc = "`read()` method returns [dr::R](dr::R) reader structure"]
    impl crate::Readable for DR {}
    #[doc = "`write(|w| ..)` method takes [dr::W](dr::W) writer structure"]
    impl crate::Writable for DR {}
    #[doc = "date register"]
    pub mod dr {
        #[doc = "Reader of register DR"]
        pub type R = crate::R<u32, super::DR>;
        #[doc = "Writer for register DR"]
        pub type W = crate::W<u32, super::DR>;
        #[doc = "Register DR `reset()`'s with value 0x2101"]
        impl crate::ResetValue for super::DR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x2101
            }
        }
        #[doc = "Reader of field `YT`"]
        pub type YT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `YT`"]
        pub struct YT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> YT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `YU`"]
        pub type YU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `YU`"]
        pub struct YU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> YU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `WDU`"]
        pub type WDU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WDU`"]
        pub struct WDU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 13)) | (((value as u32) & 0x07) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `MT`"]
        pub type MT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MT`"]
        pub struct MT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MU`"]
        pub type MU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MU`"]
        pub struct MU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DT`"]
        pub struct DT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 4)) | (((value as u32) & 0x03) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DU`"]
        pub struct DU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:23 - Year tens in BCD format"]
            #[inline(always)]
            pub fn yt(&self) -> YT_R {
                YT_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 16:19 - Year units in BCD format"]
            #[inline(always)]
            pub fn yu(&self) -> YU_R {
                YU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 13:15 - Week day units"]
            #[inline(always)]
            pub fn wdu(&self) -> WDU_R {
                WDU_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - Month tens in BCD format"]
            #[inline(always)]
            pub fn mt(&self) -> MT_R {
                MT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Month units in BCD format"]
            #[inline(always)]
            pub fn mu(&self) -> MU_R {
                MU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:3 - Date units in BCD format"]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:23 - Year tens in BCD format"]
            #[inline(always)]
            pub fn yt(&mut self) -> YT_W {
                YT_W { w: self }
            }
            #[doc = "Bits 16:19 - Year units in BCD format"]
            #[inline(always)]
            pub fn yu(&mut self) -> YU_W {
                YU_W { w: self }
            }
            #[doc = "Bits 13:15 - Week day units"]
            #[inline(always)]
            pub fn wdu(&mut self) -> WDU_W {
                WDU_W { w: self }
            }
            #[doc = "Bit 12 - Month tens in BCD format"]
            #[inline(always)]
            pub fn mt(&mut self) -> MT_W {
                MT_W { w: self }
            }
            #[doc = "Bits 8:11 - Month units in BCD format"]
            #[inline(always)]
            pub fn mu(&mut self) -> MU_W {
                MU_W { w: self }
            }
            #[doc = "Bits 4:5 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&mut self) -> DT_W {
                DT_W { w: self }
            }
            #[doc = "Bits 0:3 - Date units in BCD format"]
            #[inline(always)]
            pub fn du(&mut self) -> DU_W {
                DU_W { w: self }
            }
        }
    }
    #[doc = "sub second register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ssr](ssr) module"]
    pub type SSR = crate::Reg<u32, _SSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SSR;
    #[doc = "`read()` method returns [ssr::R](ssr::R) reader structure"]
    impl crate::Readable for SSR {}
    #[doc = "sub second register"]
    pub mod ssr {
        #[doc = "Reader of register SSR"]
        pub type R = crate::R<u32, super::SSR>;
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Sub second value"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "initialization and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [icsr](icsr) module"]
    pub type ICSR = crate::Reg<u32, _ICSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ICSR;
    #[doc = "`read()` method returns [icsr::R](icsr::R) reader structure"]
    impl crate::Readable for ICSR {}
    #[doc = "`write(|w| ..)` method takes [icsr::W](icsr::W) writer structure"]
    impl crate::Writable for ICSR {}
    #[doc = "initialization and status register"]
    pub mod icsr {
        #[doc = "Reader of register ICSR"]
        pub type R = crate::R<u32, super::ICSR>;
        #[doc = "Writer for register ICSR"]
        pub type W = crate::W<u32, super::ICSR>;
        #[doc = "Register ICSR `reset()`'s with value 0x07"]
        impl crate::ResetValue for super::ICSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x07
            }
        }
        #[doc = "Reader of field `ALRAWF`"]
        pub type ALRAWF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ALRBWF`"]
        pub type ALRBWF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUTWF`"]
        pub type WUTWF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `SHPF`"]
        pub type SHPF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SHPF`"]
        pub struct SHPF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SHPF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `INITS`"]
        pub type INITS_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RSF`"]
        pub type RSF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `RSF`"]
        pub struct RSF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RSF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `INITF`"]
        pub type INITF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `INIT`"]
        pub type INIT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `INIT`"]
        pub struct INIT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INIT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `RECALPF`"]
        pub type RECALPF_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - Alarm A write flag"]
            #[inline(always)]
            pub fn alrawf(&self) -> ALRAWF_R {
                ALRAWF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Alarm B write flag"]
            #[inline(always)]
            pub fn alrbwf(&self) -> ALRBWF_R {
                ALRBWF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Wakeup timer write flag"]
            #[inline(always)]
            pub fn wutwf(&self) -> WUTWF_R {
                WUTWF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Shift operation pending"]
            #[inline(always)]
            pub fn shpf(&self) -> SHPF_R {
                SHPF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Initialization status flag"]
            #[inline(always)]
            pub fn inits(&self) -> INITS_R {
                INITS_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Registers synchronization flag"]
            #[inline(always)]
            pub fn rsf(&self) -> RSF_R {
                RSF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Initialization flag"]
            #[inline(always)]
            pub fn initf(&self) -> INITF_R {
                INITF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Initialization mode"]
            #[inline(always)]
            pub fn init(&self) -> INIT_R {
                INIT_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Recalibration pending Flag"]
            #[inline(always)]
            pub fn recalpf(&self) -> RECALPF_R {
                RECALPF_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Shift operation pending"]
            #[inline(always)]
            pub fn shpf(&mut self) -> SHPF_W {
                SHPF_W { w: self }
            }
            #[doc = "Bit 5 - Registers synchronization flag"]
            #[inline(always)]
            pub fn rsf(&mut self) -> RSF_W {
                RSF_W { w: self }
            }
            #[doc = "Bit 7 - Initialization mode"]
            #[inline(always)]
            pub fn init(&mut self) -> INIT_W {
                INIT_W { w: self }
            }
        }
    }
    #[doc = "prescaler register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [prer](prer) module"]
    pub type PRER = crate::Reg<u32, _PRER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PRER;
    #[doc = "`read()` method returns [prer::R](prer::R) reader structure"]
    impl crate::Readable for PRER {}
    #[doc = "`write(|w| ..)` method takes [prer::W](prer::W) writer structure"]
    impl crate::Writable for PRER {}
    #[doc = "prescaler register"]
    pub mod prer {
        #[doc = "Reader of register PRER"]
        pub type R = crate::R<u32, super::PRER>;
        #[doc = "Writer for register PRER"]
        pub type W = crate::W<u32, super::PRER>;
        #[doc = "Register PRER `reset()`'s with value 0x007f_00ff"]
        impl crate::ResetValue for super::PRER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x007f_00ff
            }
        }
        #[doc = "Reader of field `PREDIV_A`"]
        pub type PREDIV_A_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `PREDIV_A`"]
        pub struct PREDIV_A_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PREDIV_A_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x7f << 16)) | (((value as u32) & 0x7f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `PREDIV_S`"]
        pub type PREDIV_S_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PREDIV_S`"]
        pub struct PREDIV_S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PREDIV_S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:22 - Asynchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_a(&self) -> PREDIV_A_R {
                PREDIV_A_R::new(((self.bits >> 16) & 0x7f) as u8)
            }
            #[doc = "Bits 0:14 - Synchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_s(&self) -> PREDIV_S_R {
                PREDIV_S_R::new((self.bits & 0x7fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:22 - Asynchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_a(&mut self) -> PREDIV_A_W {
                PREDIV_A_W { w: self }
            }
            #[doc = "Bits 0:14 - Synchronous prescaler factor"]
            #[inline(always)]
            pub fn prediv_s(&mut self) -> PREDIV_S_W {
                PREDIV_S_W { w: self }
            }
        }
    }
    #[doc = "wakeup timer register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wutr](wutr) module"]
    pub type WUTR = crate::Reg<u32, _WUTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WUTR;
    #[doc = "`read()` method returns [wutr::R](wutr::R) reader structure"]
    impl crate::Readable for WUTR {}
    #[doc = "`write(|w| ..)` method takes [wutr::W](wutr::W) writer structure"]
    impl crate::Writable for WUTR {}
    #[doc = "wakeup timer register"]
    pub mod wutr {
        #[doc = "Reader of register WUTR"]
        pub type R = crate::R<u32, super::WUTR>;
        #[doc = "Writer for register WUTR"]
        pub type W = crate::W<u32, super::WUTR>;
        #[doc = "Register WUTR `reset()`'s with value 0xffff"]
        impl crate::ResetValue for super::WUTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0xffff
            }
        }
        #[doc = "Reader of field `WUT`"]
        pub type WUT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `WUT`"]
        pub struct WUT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Wakeup auto-reload value bits"]
            #[inline(always)]
            pub fn wut(&self) -> WUT_R {
                WUT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Wakeup auto-reload value bits"]
            #[inline(always)]
            pub fn wut(&mut self) -> WUT_W {
                WUT_W { w: self }
            }
        }
    }
    #[doc = "control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "control register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `WUCKSEL`"]
        pub type WUCKSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `WUCKSEL`"]
        pub struct WUCKSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUCKSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        #[doc = "Reader of field `TSEDGE`"]
        pub type TSEDGE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSEDGE`"]
        pub struct TSEDGE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSEDGE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `REFCKON`"]
        pub type REFCKON_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `REFCKON`"]
        pub struct REFCKON_W<'a> {
            w: &'a mut W,
        }
        impl<'a> REFCKON_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `BYPSHAD`"]
        pub type BYPSHAD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BYPSHAD`"]
        pub struct BYPSHAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BYPSHAD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `FMT`"]
        pub type FMT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FMT`"]
        pub struct FMT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FMT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `ALRAE`"]
        pub type ALRAE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRAE`"]
        pub struct ALRAE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRAE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ALRBE`"]
        pub type ALRBE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRBE`"]
        pub struct ALRBE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRBE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `WUTE`"]
        pub type WUTE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUTE`"]
        pub struct WUTE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUTE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `TSE`"]
        pub type TSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSE`"]
        pub struct TSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `ALRAIE`"]
        pub type ALRAIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRAIE`"]
        pub struct ALRAIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRAIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `ALRBIE`"]
        pub type ALRBIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ALRBIE`"]
        pub struct ALRBIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ALRBIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `WUTIE`"]
        pub type WUTIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WUTIE`"]
        pub struct WUTIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WUTIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `TSIE`"]
        pub type TSIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TSIE`"]
        pub struct TSIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TSIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `ADD1H`"]
        pub type ADD1H_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ADD1H`"]
        pub struct ADD1H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD1H_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `SUB1H`"]
        pub type SUB1H_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SUB1H`"]
        pub struct SUB1H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUB1H_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `BKP`"]
        pub type BKP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BKP`"]
        pub struct BKP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BKP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        #[doc = "Reader of field `COSEL`"]
        pub type COSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COSEL`"]
        pub struct COSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 19)) | (((value as u32) & 0x01) << 19);
                self.w
            }
        }
        #[doc = "Reader of field `POL`"]
        pub type POL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `POL`"]
        pub struct POL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> POL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 20)) | (((value as u32) & 0x01) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `OSEL`"]
        pub type OSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OSEL`"]
        pub struct OSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 21)) | (((value as u32) & 0x03) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `COE`"]
        pub type COE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COE`"]
        pub struct COE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `ITSE`"]
        pub type ITSE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ITSE`"]
        pub struct ITSE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ITSE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPTS`"]
        pub type TAMPTS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMPTS`"]
        pub struct TAMPTS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPTS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPOE`"]
        pub type TAMPOE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMPOE`"]
        pub struct TAMPOE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPOE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPALRM_PU`"]
        pub type TAMPALRM_PU_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMPALRM_PU`"]
        pub struct TAMPALRM_PU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPALRM_PU_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `TAMPALRM_TYPE`"]
        pub type TAMPALRM_TYPE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TAMPALRM_TYPE`"]
        pub struct TAMPALRM_TYPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TAMPALRM_TYPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `OUT2EN`"]
        pub type OUT2EN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OUT2EN`"]
        pub struct OUT2EN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OUT2EN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:2 - WUCKSEL"]
            #[inline(always)]
            pub fn wucksel(&self) -> WUCKSEL_R {
                WUCKSEL_R::new((self.bits & 0x07) as u8)
            }
            #[doc = "Bit 3 - TSEDGE"]
            #[inline(always)]
            pub fn tsedge(&self) -> TSEDGE_R {
                TSEDGE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - REFCKON"]
            #[inline(always)]
            pub fn refckon(&self) -> REFCKON_R {
                REFCKON_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - BYPSHAD"]
            #[inline(always)]
            pub fn bypshad(&self) -> BYPSHAD_R {
                BYPSHAD_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - FMT"]
            #[inline(always)]
            pub fn fmt(&self) -> FMT_R {
                FMT_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 8 - ALRAE"]
            #[inline(always)]
            pub fn alrae(&self) -> ALRAE_R {
                ALRAE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - ALRBE"]
            #[inline(always)]
            pub fn alrbe(&self) -> ALRBE_R {
                ALRBE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - WUTE"]
            #[inline(always)]
            pub fn wute(&self) -> WUTE_R {
                WUTE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - TSE"]
            #[inline(always)]
            pub fn tse(&self) -> TSE_R {
                TSE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - ALRAIE"]
            #[inline(always)]
            pub fn alraie(&self) -> ALRAIE_R {
                ALRAIE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 13 - ALRBIE"]
            #[inline(always)]
            pub fn alrbie(&self) -> ALRBIE_R {
                ALRBIE_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 14 - WUTIE"]
            #[inline(always)]
            pub fn wutie(&self) -> WUTIE_R {
                WUTIE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 15 - TSIE"]
            #[inline(always)]
            pub fn tsie(&self) -> TSIE_R {
                TSIE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 16 - ADD1H"]
            #[inline(always)]
            pub fn add1h(&self) -> ADD1H_R {
                ADD1H_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 17 - SUB1H"]
            #[inline(always)]
            pub fn sub1h(&self) -> SUB1H_R {
                SUB1H_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - BKP"]
            #[inline(always)]
            pub fn bkp(&self) -> BKP_R {
                BKP_R::new(((self.bits >> 18) & 0x01) != 0)
            }
            #[doc = "Bit 19 - COSEL"]
            #[inline(always)]
            pub fn cosel(&self) -> COSEL_R {
                COSEL_R::new(((self.bits >> 19) & 0x01) != 0)
            }
            #[doc = "Bit 20 - POL"]
            #[inline(always)]
            pub fn pol(&self) -> POL_R {
                POL_R::new(((self.bits >> 20) & 0x01) != 0)
            }
            #[doc = "Bits 21:22 - OSEL"]
            #[inline(always)]
            pub fn osel(&self) -> OSEL_R {
                OSEL_R::new(((self.bits >> 21) & 0x03) as u8)
            }
            #[doc = "Bit 23 - COE"]
            #[inline(always)]
            pub fn coe(&self) -> COE_R {
                COE_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 24 - ITSE"]
            #[inline(always)]
            pub fn itse(&self) -> ITSE_R {
                ITSE_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - TAMPTS"]
            #[inline(always)]
            pub fn tampts(&self) -> TAMPTS_R {
                TAMPTS_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - TAMPOE"]
            #[inline(always)]
            pub fn tampoe(&self) -> TAMPOE_R {
                TAMPOE_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 29 - TAMPALRM_PU"]
            #[inline(always)]
            pub fn tampalrm_pu(&self) -> TAMPALRM_PU_R {
                TAMPALRM_PU_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - TAMPALRM_TYPE"]
            #[inline(always)]
            pub fn tampalrm_type(&self) -> TAMPALRM_TYPE_R {
                TAMPALRM_TYPE_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - OUT2EN"]
            #[inline(always)]
            pub fn out2en(&self) -> OUT2EN_R {
                OUT2EN_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - WUCKSEL"]
            #[inline(always)]
            pub fn wucksel(&mut self) -> WUCKSEL_W {
                WUCKSEL_W { w: self }
            }
            #[doc = "Bit 3 - TSEDGE"]
            #[inline(always)]
            pub fn tsedge(&mut self) -> TSEDGE_W {
                TSEDGE_W { w: self }
            }
            #[doc = "Bit 4 - REFCKON"]
            #[inline(always)]
            pub fn refckon(&mut self) -> REFCKON_W {
                REFCKON_W { w: self }
            }
            #[doc = "Bit 5 - BYPSHAD"]
            #[inline(always)]
            pub fn bypshad(&mut self) -> BYPSHAD_W {
                BYPSHAD_W { w: self }
            }
            #[doc = "Bit 6 - FMT"]
            #[inline(always)]
            pub fn fmt(&mut self) -> FMT_W {
                FMT_W { w: self }
            }
            #[doc = "Bit 8 - ALRAE"]
            #[inline(always)]
            pub fn alrae(&mut self) -> ALRAE_W {
                ALRAE_W { w: self }
            }
            #[doc = "Bit 9 - ALRBE"]
            #[inline(always)]
            pub fn alrbe(&mut self) -> ALRBE_W {
                ALRBE_W { w: self }
            }
            #[doc = "Bit 10 - WUTE"]
            #[inline(always)]
            pub fn wute(&mut self) -> WUTE_W {
                WUTE_W { w: self }
            }
            #[doc = "Bit 11 - TSE"]
            #[inline(always)]
            pub fn tse(&mut self) -> TSE_W {
                TSE_W { w: self }
            }
            #[doc = "Bit 12 - ALRAIE"]
            #[inline(always)]
            pub fn alraie(&mut self) -> ALRAIE_W {
                ALRAIE_W { w: self }
            }
            #[doc = "Bit 13 - ALRBIE"]
            #[inline(always)]
            pub fn alrbie(&mut self) -> ALRBIE_W {
                ALRBIE_W { w: self }
            }
            #[doc = "Bit 14 - WUTIE"]
            #[inline(always)]
            pub fn wutie(&mut self) -> WUTIE_W {
                WUTIE_W { w: self }
            }
            #[doc = "Bit 15 - TSIE"]
            #[inline(always)]
            pub fn tsie(&mut self) -> TSIE_W {
                TSIE_W { w: self }
            }
            #[doc = "Bit 16 - ADD1H"]
            #[inline(always)]
            pub fn add1h(&mut self) -> ADD1H_W {
                ADD1H_W { w: self }
            }
            #[doc = "Bit 17 - SUB1H"]
            #[inline(always)]
            pub fn sub1h(&mut self) -> SUB1H_W {
                SUB1H_W { w: self }
            }
            #[doc = "Bit 18 - BKP"]
            #[inline(always)]
            pub fn bkp(&mut self) -> BKP_W {
                BKP_W { w: self }
            }
            #[doc = "Bit 19 - COSEL"]
            #[inline(always)]
            pub fn cosel(&mut self) -> COSEL_W {
                COSEL_W { w: self }
            }
            #[doc = "Bit 20 - POL"]
            #[inline(always)]
            pub fn pol(&mut self) -> POL_W {
                POL_W { w: self }
            }
            #[doc = "Bits 21:22 - OSEL"]
            #[inline(always)]
            pub fn osel(&mut self) -> OSEL_W {
                OSEL_W { w: self }
            }
            #[doc = "Bit 23 - COE"]
            #[inline(always)]
            pub fn coe(&mut self) -> COE_W {
                COE_W { w: self }
            }
            #[doc = "Bit 24 - ITSE"]
            #[inline(always)]
            pub fn itse(&mut self) -> ITSE_W {
                ITSE_W { w: self }
            }
            #[doc = "Bit 25 - TAMPTS"]
            #[inline(always)]
            pub fn tampts(&mut self) -> TAMPTS_W {
                TAMPTS_W { w: self }
            }
            #[doc = "Bit 26 - TAMPOE"]
            #[inline(always)]
            pub fn tampoe(&mut self) -> TAMPOE_W {
                TAMPOE_W { w: self }
            }
            #[doc = "Bit 29 - TAMPALRM_PU"]
            #[inline(always)]
            pub fn tampalrm_pu(&mut self) -> TAMPALRM_PU_W {
                TAMPALRM_PU_W { w: self }
            }
            #[doc = "Bit 30 - TAMPALRM_TYPE"]
            #[inline(always)]
            pub fn tampalrm_type(&mut self) -> TAMPALRM_TYPE_W {
                TAMPALRM_TYPE_W { w: self }
            }
            #[doc = "Bit 31 - OUT2EN"]
            #[inline(always)]
            pub fn out2en(&mut self) -> OUT2EN_W {
                OUT2EN_W { w: self }
            }
        }
    }
    #[doc = "write protection register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [wpr](wpr) module"]
    pub type WPR = crate::Reg<u32, _WPR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _WPR;
    #[doc = "`write(|w| ..)` method takes [wpr::W](wpr::W) writer structure"]
    impl crate::Writable for WPR {}
    #[doc = "write protection register"]
    pub mod wpr {
        #[doc = "Writer for register WPR"]
        pub type W = crate::W<u32, super::WPR>;
        #[doc = "Register WPR `reset()`'s with value 0"]
        impl crate::ResetValue for super::WPR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `KEY`"]
        pub struct KEY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> KEY_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xff) | ((value as u32) & 0xff);
                self.w
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Write protection key"]
            #[inline(always)]
            pub fn key(&mut self) -> KEY_W {
                KEY_W { w: self }
            }
        }
    }
    #[doc = "calibration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calr](calr) module"]
    pub type CALR = crate::Reg<u32, _CALR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CALR;
    #[doc = "`read()` method returns [calr::R](calr::R) reader structure"]
    impl crate::Readable for CALR {}
    #[doc = "`write(|w| ..)` method takes [calr::W](calr::W) writer structure"]
    impl crate::Writable for CALR {}
    #[doc = "calibration register"]
    pub mod calr {
        #[doc = "Reader of register CALR"]
        pub type R = crate::R<u32, super::CALR>;
        #[doc = "Writer for register CALR"]
        pub type W = crate::W<u32, super::CALR>;
        #[doc = "Register CALR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CALR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CALP`"]
        pub type CALP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALP`"]
        pub struct CALP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CALW8`"]
        pub type CALW8_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALW8`"]
        pub struct CALW8_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALW8_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CALW16`"]
        pub type CALW16_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALW16`"]
        pub struct CALW16_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALW16_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CALM`"]
        pub type CALM_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CALM`"]
        pub struct CALM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | ((value as u32) & 0x01ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Increase frequency of RTC by 488.5 ppm"]
            #[inline(always)]
            pub fn calp(&self) -> CALP_R {
                CALP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - Use an 8-second calibration cycle period"]
            #[inline(always)]
            pub fn calw8(&self) -> CALW8_R {
                CALW8_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Use a 16-second calibration cycle period"]
            #[inline(always)]
            pub fn calw16(&self) -> CALW16_R {
                CALW16_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bits 0:8 - Calibration minus"]
            #[inline(always)]
            pub fn calm(&self) -> CALM_R {
                CALM_R::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 15 - Increase frequency of RTC by 488.5 ppm"]
            #[inline(always)]
            pub fn calp(&mut self) -> CALP_W {
                CALP_W { w: self }
            }
            #[doc = "Bit 14 - Use an 8-second calibration cycle period"]
            #[inline(always)]
            pub fn calw8(&mut self) -> CALW8_W {
                CALW8_W { w: self }
            }
            #[doc = "Bit 13 - Use a 16-second calibration cycle period"]
            #[inline(always)]
            pub fn calw16(&mut self) -> CALW16_W {
                CALW16_W { w: self }
            }
            #[doc = "Bits 0:8 - Calibration minus"]
            #[inline(always)]
            pub fn calm(&mut self) -> CALM_W {
                CALM_W { w: self }
            }
        }
    }
    #[doc = "shift control register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [shiftr](shiftr) module"]
    pub type SHIFTR = crate::Reg<u32, _SHIFTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SHIFTR;
    #[doc = "`write(|w| ..)` method takes [shiftr::W](shiftr::W) writer structure"]
    impl crate::Writable for SHIFTR {}
    #[doc = "shift control register"]
    pub mod shiftr {
        #[doc = "Writer for register SHIFTR"]
        pub type W = crate::W<u32, super::SHIFTR>;
        #[doc = "Register SHIFTR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SHIFTR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `ADD1S`"]
        pub struct ADD1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADD1S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Write proxy for field `SUBFS`"]
        pub struct SUBFS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SUBFS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 31 - Add one second"]
            #[inline(always)]
            pub fn add1s(&mut self) -> ADD1S_W {
                ADD1S_W { w: self }
            }
            #[doc = "Bits 0:14 - Subtract a fraction of a second"]
            #[inline(always)]
            pub fn subfs(&mut self) -> SUBFS_W {
                SUBFS_W { w: self }
            }
        }
    }
    #[doc = "time stamp time register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tstr](tstr) module"]
    pub type TSTR = crate::Reg<u32, _TSTR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TSTR;
    #[doc = "`read()` method returns [tstr::R](tstr::R) reader structure"]
    impl crate::Readable for TSTR {}
    #[doc = "time stamp time register"]
    pub mod tstr {
        #[doc = "Reader of register TSTR"]
        pub type R = crate::R<u32, super::TSTR>;
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
        }
    }
    #[doc = "time stamp date register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tsdr](tsdr) module"]
    pub type TSDR = crate::Reg<u32, _TSDR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TSDR;
    #[doc = "`read()` method returns [tsdr::R](tsdr::R) reader structure"]
    impl crate::Readable for TSDR {}
    #[doc = "time stamp date register"]
    pub mod tsdr {
        #[doc = "Reader of register TSDR"]
        pub type R = crate::R<u32, super::TSDR>;
        #[doc = "Reader of field `WDU`"]
        pub type WDU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `MT`"]
        pub type MT_R = crate::R<bool, bool>;
        #[doc = "Reader of field `MU`"]
        pub type MU_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        impl R {
            #[doc = "Bits 13:15 - Week day units"]
            #[inline(always)]
            pub fn wdu(&self) -> WDU_R {
                WDU_R::new(((self.bits >> 13) & 0x07) as u8)
            }
            #[doc = "Bit 12 - Month tens in BCD format"]
            #[inline(always)]
            pub fn mt(&self) -> MT_R {
                MT_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bits 8:11 - Month units in BCD format"]
            #[inline(always)]
            pub fn mu(&self) -> MU_R {
                MU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 4) & 0x03) as u8)
            }
            #[doc = "Bits 0:3 - Date units in BCD format"]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new((self.bits & 0x0f) as u8)
            }
        }
    }
    #[doc = "timestamp sub second register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tsssr](tsssr) module"]
    pub type TSSSR = crate::Reg<u32, _TSSSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TSSSR;
    #[doc = "`read()` method returns [tsssr::R](tsssr::R) reader structure"]
    impl crate::Readable for TSSSR {}
    #[doc = "timestamp sub second register"]
    pub mod tsssr {
        #[doc = "Reader of register TSSSR"]
        pub type R = crate::R<u32, super::TSSSR>;
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Sub second value"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0xffff) as u16)
            }
        }
    }
    #[doc = "alarm A register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmar](alrmar) module"]
    pub type ALRMAR = crate::Reg<u32, _ALRMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALRMAR;
    #[doc = "`read()` method returns [alrmar::R](alrmar::R) reader structure"]
    impl crate::Readable for ALRMAR {}
    #[doc = "`write(|w| ..)` method takes [alrmar::W](alrmar::W) writer structure"]
    impl crate::Writable for ALRMAR {}
    #[doc = "alarm A register"]
    pub mod alrmar {
        #[doc = "Reader of register ALRMAR"]
        pub type R = crate::R<u32, super::ALRMAR>;
        #[doc = "Writer for register ALRMAR"]
        pub type W = crate::W<u32, super::ALRMAR>;
        #[doc = "Register ALRMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALRMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MSK4`"]
        pub type MSK4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK4`"]
        pub struct MSK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `WDSEL`"]
        pub type WDSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WDSEL`"]
        pub struct WDSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DT`"]
        pub struct DT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DU`"]
        pub struct DU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `MSK3`"]
        pub type MSK3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK3`"]
        pub struct MSK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PM`"]
        pub struct PM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HT`"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HU`"]
        pub struct HU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MSK2`"]
        pub type MSK2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK2`"]
        pub struct MSK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNT`"]
        pub struct MNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNU`"]
        pub struct MNU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MSK1`"]
        pub type MSK1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK1`"]
        pub struct MSK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ST`"]
        pub struct ST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ST_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SU`"]
        pub struct SU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - Alarm A date mask"]
            #[inline(always)]
            pub fn msk4(&self) -> MSK4_R {
                MSK4_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Week day selection"]
            #[inline(always)]
            pub fn wdsel(&self) -> WDSEL_R {
                WDSEL_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bits 28:29 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 24:27 - Date units or day in BCD format"]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bit 23 - Alarm A hours mask"]
            #[inline(always)]
            pub fn msk3(&self) -> MSK3_R {
                MSK3_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 15 - Alarm A minutes mask"]
            #[inline(always)]
            pub fn msk2(&self) -> MSK2_R {
                MSK2_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Alarm A seconds mask"]
            #[inline(always)]
            pub fn msk1(&self) -> MSK1_R {
                MSK1_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 31 - Alarm A date mask"]
            #[inline(always)]
            pub fn msk4(&mut self) -> MSK4_W {
                MSK4_W { w: self }
            }
            #[doc = "Bit 30 - Week day selection"]
            #[inline(always)]
            pub fn wdsel(&mut self) -> WDSEL_W {
                WDSEL_W { w: self }
            }
            #[doc = "Bits 28:29 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&mut self) -> DT_W {
                DT_W { w: self }
            }
            #[doc = "Bits 24:27 - Date units or day in BCD format"]
            #[inline(always)]
            pub fn du(&mut self) -> DU_W {
                DU_W { w: self }
            }
            #[doc = "Bit 23 - Alarm A hours mask"]
            #[inline(always)]
            pub fn msk3(&mut self) -> MSK3_W {
                MSK3_W { w: self }
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&mut self) -> PM_W {
                PM_W { w: self }
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&mut self) -> HU_W {
                HU_W { w: self }
            }
            #[doc = "Bit 15 - Alarm A minutes mask"]
            #[inline(always)]
            pub fn msk2(&mut self) -> MSK2_W {
                MSK2_W { w: self }
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&mut self) -> MNT_W {
                MNT_W { w: self }
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&mut self) -> MNU_W {
                MNU_W { w: self }
            }
            #[doc = "Bit 7 - Alarm A seconds mask"]
            #[inline(always)]
            pub fn msk1(&mut self) -> MSK1_W {
                MSK1_W { w: self }
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&mut self) -> ST_W {
                ST_W { w: self }
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&mut self) -> SU_W {
                SU_W { w: self }
            }
        }
    }
    #[doc = "alarm A sub second register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmassr](alrmassr) module"]
    pub type ALRMASSR = crate::Reg<u32, _ALRMASSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALRMASSR;
    #[doc = "`read()` method returns [alrmassr::R](alrmassr::R) reader structure"]
    impl crate::Readable for ALRMASSR {}
    #[doc = "`write(|w| ..)` method takes [alrmassr::W](alrmassr::W) writer structure"]
    impl crate::Writable for ALRMASSR {}
    #[doc = "alarm A sub second register"]
    pub mod alrmassr {
        #[doc = "Reader of register ALRMASSR"]
        pub type R = crate::R<u32, super::ALRMASSR>;
        #[doc = "Writer for register ALRMASSR"]
        pub type W = crate::W<u32, super::ALRMASSR>;
        #[doc = "Register ALRMASSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALRMASSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MASKSS`"]
        pub type MASKSS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MASKSS`"]
        pub struct MASKSS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASKSS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `SS`"]
        pub struct SS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:27 - Mask the most-significant bits starting at this bit"]
            #[inline(always)]
            pub fn maskss(&self) -> MASKSS_R {
                MASKSS_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:14 - Sub seconds value"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0x7fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 24:27 - Mask the most-significant bits starting at this bit"]
            #[inline(always)]
            pub fn maskss(&mut self) -> MASKSS_W {
                MASKSS_W { w: self }
            }
            #[doc = "Bits 0:14 - Sub seconds value"]
            #[inline(always)]
            pub fn ss(&mut self) -> SS_W {
                SS_W { w: self }
            }
        }
    }
    #[doc = "alarm B register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmbr](alrmbr) module"]
    pub type ALRMBR = crate::Reg<u32, _ALRMBR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALRMBR;
    #[doc = "`read()` method returns [alrmbr::R](alrmbr::R) reader structure"]
    impl crate::Readable for ALRMBR {}
    #[doc = "`write(|w| ..)` method takes [alrmbr::W](alrmbr::W) writer structure"]
    impl crate::Writable for ALRMBR {}
    #[doc = "alarm B register"]
    pub mod alrmbr {
        #[doc = "Reader of register ALRMBR"]
        pub type R = crate::R<u32, super::ALRMBR>;
        #[doc = "Writer for register ALRMBR"]
        pub type W = crate::W<u32, super::ALRMBR>;
        #[doc = "Register ALRMBR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALRMBR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MSK4`"]
        pub type MSK4_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK4`"]
        pub struct MSK4_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK4_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        #[doc = "Reader of field `WDSEL`"]
        pub type WDSEL_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `WDSEL`"]
        pub struct WDSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> WDSEL_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DT`"]
        pub type DT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DT`"]
        pub struct DT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `DU`"]
        pub type DU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DU`"]
        pub struct DU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `MSK3`"]
        pub type MSK3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK3`"]
        pub struct MSK3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 23)) | (((value as u32) & 0x01) << 23);
                self.w
            }
        }
        #[doc = "Reader of field `PM`"]
        pub type PM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `PM`"]
        pub struct PM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 22)) | (((value as u32) & 0x01) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `HT`"]
        pub type HT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HT`"]
        pub struct HT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `HU`"]
        pub type HU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `HU`"]
        pub struct HU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 16)) | (((value as u32) & 0x0f) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `MSK2`"]
        pub type MSK2_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK2`"]
        pub struct MSK2_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK2_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `MNT`"]
        pub type MNT_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNT`"]
        pub struct MNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `MNU`"]
        pub type MNU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MNU`"]
        pub struct MNU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MNU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MSK1`"]
        pub type MSK1_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSK1`"]
        pub struct MSK1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSK1_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `ST`"]
        pub type ST_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ST`"]
        pub struct ST_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ST_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `SU`"]
        pub type SU_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SU`"]
        pub struct SU_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SU_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 31 - Alarm B date mask"]
            #[inline(always)]
            pub fn msk4(&self) -> MSK4_R {
                MSK4_R::new(((self.bits >> 31) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Week day selection"]
            #[inline(always)]
            pub fn wdsel(&self) -> WDSEL_R {
                WDSEL_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bits 28:29 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&self) -> DT_R {
                DT_R::new(((self.bits >> 28) & 0x03) as u8)
            }
            #[doc = "Bits 24:27 - Date units or day in BCD format"]
            #[inline(always)]
            pub fn du(&self) -> DU_R {
                DU_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bit 23 - Alarm B hours mask"]
            #[inline(always)]
            pub fn msk3(&self) -> MSK3_R {
                MSK3_R::new(((self.bits >> 23) & 0x01) != 0)
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&self) -> PM_R {
                PM_R::new(((self.bits >> 22) & 0x01) != 0)
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&self) -> HT_R {
                HT_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&self) -> HU_R {
                HU_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bit 15 - Alarm B minutes mask"]
            #[inline(always)]
            pub fn msk2(&self) -> MSK2_R {
                MSK2_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&self) -> MNT_R {
                MNT_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&self) -> MNU_R {
                MNU_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Alarm B seconds mask"]
            #[inline(always)]
            pub fn msk1(&self) -> MSK1_R {
                MSK1_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&self) -> ST_R {
                ST_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&self) -> SU_R {
                SU_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 31 - Alarm B date mask"]
            #[inline(always)]
            pub fn msk4(&mut self) -> MSK4_W {
                MSK4_W { w: self }
            }
            #[doc = "Bit 30 - Week day selection"]
            #[inline(always)]
            pub fn wdsel(&mut self) -> WDSEL_W {
                WDSEL_W { w: self }
            }
            #[doc = "Bits 28:29 - Date tens in BCD format"]
            #[inline(always)]
            pub fn dt(&mut self) -> DT_W {
                DT_W { w: self }
            }
            #[doc = "Bits 24:27 - Date units or day in BCD format"]
            #[inline(always)]
            pub fn du(&mut self) -> DU_W {
                DU_W { w: self }
            }
            #[doc = "Bit 23 - Alarm B hours mask"]
            #[inline(always)]
            pub fn msk3(&mut self) -> MSK3_W {
                MSK3_W { w: self }
            }
            #[doc = "Bit 22 - AM/PM notation"]
            #[inline(always)]
            pub fn pm(&mut self) -> PM_W {
                PM_W { w: self }
            }
            #[doc = "Bits 20:21 - Hour tens in BCD format"]
            #[inline(always)]
            pub fn ht(&mut self) -> HT_W {
                HT_W { w: self }
            }
            #[doc = "Bits 16:19 - Hour units in BCD format"]
            #[inline(always)]
            pub fn hu(&mut self) -> HU_W {
                HU_W { w: self }
            }
            #[doc = "Bit 15 - Alarm B minutes mask"]
            #[inline(always)]
            pub fn msk2(&mut self) -> MSK2_W {
                MSK2_W { w: self }
            }
            #[doc = "Bits 12:14 - Minute tens in BCD format"]
            #[inline(always)]
            pub fn mnt(&mut self) -> MNT_W {
                MNT_W { w: self }
            }
            #[doc = "Bits 8:11 - Minute units in BCD format"]
            #[inline(always)]
            pub fn mnu(&mut self) -> MNU_W {
                MNU_W { w: self }
            }
            #[doc = "Bit 7 - Alarm B seconds mask"]
            #[inline(always)]
            pub fn msk1(&mut self) -> MSK1_W {
                MSK1_W { w: self }
            }
            #[doc = "Bits 4:6 - Second tens in BCD format"]
            #[inline(always)]
            pub fn st(&mut self) -> ST_W {
                ST_W { w: self }
            }
            #[doc = "Bits 0:3 - Second units in BCD format"]
            #[inline(always)]
            pub fn su(&mut self) -> SU_W {
                SU_W { w: self }
            }
        }
    }
    #[doc = "alarm B sub second register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [alrmbssr](alrmbssr) module"]
    pub type ALRMBSSR = crate::Reg<u32, _ALRMBSSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ALRMBSSR;
    #[doc = "`read()` method returns [alrmbssr::R](alrmbssr::R) reader structure"]
    impl crate::Readable for ALRMBSSR {}
    #[doc = "`write(|w| ..)` method takes [alrmbssr::W](alrmbssr::W) writer structure"]
    impl crate::Writable for ALRMBSSR {}
    #[doc = "alarm B sub second register"]
    pub mod alrmbssr {
        #[doc = "Reader of register ALRMBSSR"]
        pub type R = crate::R<u32, super::ALRMBSSR>;
        #[doc = "Writer for register ALRMBSSR"]
        pub type W = crate::W<u32, super::ALRMBSSR>;
        #[doc = "Register ALRMBSSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ALRMBSSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `MASKSS`"]
        pub type MASKSS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MASKSS`"]
        pub struct MASKSS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MASKSS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 24)) | (((value as u32) & 0x0f) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `SS`"]
        pub type SS_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `SS`"]
        pub struct SS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x7fff) | ((value as u32) & 0x7fff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 24:27 - Mask the most-significant bits starting at this bit"]
            #[inline(always)]
            pub fn maskss(&self) -> MASKSS_R {
                MASKSS_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 0:14 - Sub seconds value"]
            #[inline(always)]
            pub fn ss(&self) -> SS_R {
                SS_R::new((self.bits & 0x7fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 24:27 - Mask the most-significant bits starting at this bit"]
            #[inline(always)]
            pub fn maskss(&mut self) -> MASKSS_W {
                MASKSS_W { w: self }
            }
            #[doc = "Bits 0:14 - Sub seconds value"]
            #[inline(always)]
            pub fn ss(&mut self) -> SS_W {
                SS_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Reader of field `ALRAF`"]
        pub type ALRAF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ALRBF`"]
        pub type ALRBF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUTF`"]
        pub type WUTF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TSF`"]
        pub type TSF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TSOVF`"]
        pub type TSOVF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITSF`"]
        pub type ITSF_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ALRAF"]
            #[inline(always)]
            pub fn alraf(&self) -> ALRAF_R {
                ALRAF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - ALRBF"]
            #[inline(always)]
            pub fn alrbf(&self) -> ALRBF_R {
                ALRBF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - WUTF"]
            #[inline(always)]
            pub fn wutf(&self) -> WUTF_R {
                WUTF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TSF"]
            #[inline(always)]
            pub fn tsf(&self) -> TSF_R {
                TSF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TSOVF"]
            #[inline(always)]
            pub fn tsovf(&self) -> TSOVF_R {
                TSOVF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - ITSF"]
            #[inline(always)]
            pub fn itsf(&self) -> ITSF_R {
                ITSF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
    }
    #[doc = "masked interrupt status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [misr](misr) module"]
    pub type MISR = crate::Reg<u32, _MISR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _MISR;
    #[doc = "`read()` method returns [misr::R](misr::R) reader structure"]
    impl crate::Readable for MISR {}
    #[doc = "masked interrupt status register"]
    pub mod misr {
        #[doc = "Reader of register MISR"]
        pub type R = crate::R<u32, super::MISR>;
        #[doc = "Reader of field `ALRAMF`"]
        pub type ALRAMF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ALRBMF`"]
        pub type ALRBMF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `WUTMF`"]
        pub type WUTMF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TSMF`"]
        pub type TSMF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TSOVMF`"]
        pub type TSOVMF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `ITSMF`"]
        pub type ITSMF_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ALRAMF"]
            #[inline(always)]
            pub fn alramf(&self) -> ALRAMF_R {
                ALRAMF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - ALRBMF"]
            #[inline(always)]
            pub fn alrbmf(&self) -> ALRBMF_R {
                ALRBMF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - WUTMF"]
            #[inline(always)]
            pub fn wutmf(&self) -> WUTMF_R {
                WUTMF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TSMF"]
            #[inline(always)]
            pub fn tsmf(&self) -> TSMF_R {
                TSMF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - TSOVMF"]
            #[inline(always)]
            pub fn tsovmf(&self) -> TSOVMF_R {
                TSOVMF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - ITSMF"]
            #[inline(always)]
            pub fn itsmf(&self) -> ITSMF_R {
                ITSMF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
    }
    #[doc = "status clear register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [scr](scr) module"]
    pub type SCR = crate::Reg<u32, _SCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SCR;
    #[doc = "`read()` method returns [scr::R](scr::R) reader structure"]
    impl crate::Readable for SCR {}
    #[doc = "`write(|w| ..)` method takes [scr::W](scr::W) writer structure"]
    impl crate::Writable for SCR {}
    #[doc = "status clear register"]
    pub mod scr {
        #[doc = "Reader of register SCR"]
        pub type R = crate::R<u32, super::SCR>;
        #[doc = "Writer for register SCR"]
        pub type W = crate::W<u32, super::SCR>;
        #[doc = "Register SCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CALRAF`"]
        pub type CALRAF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALRAF`"]
        pub struct CALRAF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALRAF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `CALRBF`"]
        pub type CALRBF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CALRBF`"]
        pub struct CALRBF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CALRBF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CWUTF`"]
        pub type CWUTF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CWUTF`"]
        pub struct CWUTF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CWUTF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CTSF`"]
        pub type CTSF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTSF`"]
        pub struct CTSF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CTSOVF`"]
        pub type CTSOVF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CTSOVF`"]
        pub struct CTSOVF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CTSOVF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CITSF`"]
        pub type CITSF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CITSF`"]
        pub struct CITSF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CITSF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - CALRAF"]
            #[inline(always)]
            pub fn calraf(&self) -> CALRAF_R {
                CALRAF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - CALRBF"]
            #[inline(always)]
            pub fn calrbf(&self) -> CALRBF_R {
                CALRBF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - CWUTF"]
            #[inline(always)]
            pub fn cwutf(&self) -> CWUTF_R {
                CWUTF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - CTSF"]
            #[inline(always)]
            pub fn ctsf(&self) -> CTSF_R {
                CTSF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - CTSOVF"]
            #[inline(always)]
            pub fn ctsovf(&self) -> CTSOVF_R {
                CTSOVF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - CITSF"]
            #[inline(always)]
            pub fn citsf(&self) -> CITSF_R {
                CITSF_R::new(((self.bits >> 5) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - CALRAF"]
            #[inline(always)]
            pub fn calraf(&mut self) -> CALRAF_W {
                CALRAF_W { w: self }
            }
            #[doc = "Bit 1 - CALRBF"]
            #[inline(always)]
            pub fn calrbf(&mut self) -> CALRBF_W {
                CALRBF_W { w: self }
            }
            #[doc = "Bit 2 - CWUTF"]
            #[inline(always)]
            pub fn cwutf(&mut self) -> CWUTF_W {
                CWUTF_W { w: self }
            }
            #[doc = "Bit 3 - CTSF"]
            #[inline(always)]
            pub fn ctsf(&mut self) -> CTSF_W {
                CTSF_W { w: self }
            }
            #[doc = "Bit 4 - CTSOVF"]
            #[inline(always)]
            pub fn ctsovf(&mut self) -> CTSOVF_W {
                CTSOVF_W { w: self }
            }
            #[doc = "Bit 5 - CITSF"]
            #[inline(always)]
            pub fn citsf(&mut self) -> CITSF_W {
                CITSF_W { w: self }
            }
        }
    }
}
#[doc = "General purpose timers"]
pub struct TIM14 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM14 {}
impl TIM14 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim14::RegisterBlock {
        0x4000_2000 as *const _
    }
}
impl Deref for TIM14 {
    type Target = tim14::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM14::ptr() }
    }
}
#[doc = "General purpose timers"]
pub mod tim14 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        _reserved1: [u8; 8usize],
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_4_ccmr1: [u8; 4usize],
        _reserved5: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        _reserved9: [u8; 4usize],
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR1,
        _reserved10: [u8; 48usize],
        #[doc = "0x68 - TIM timer input selection register"]
        pub tisel: TISEL,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `UIFREMAP`"]
        pub type UIFREMAP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIFREMAP`"]
        pub struct UIFREMAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIFREMAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - UIF status bit remapping"]
            #[inline(always)]
            pub fn uifremap(&self) -> UIFREMAP_R {
                UIFREMAP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - UIF status bit remapping"]
            #[inline(always)]
            pub fn uifremap(&mut self) -> UIFREMAP_W {
                UIFREMAP_W { w: self }
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register 1 (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC1CE`"]
        pub type OC1CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1CE`"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M_3`"]
        pub type OC1M_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1M_3`"]
        pub struct OC1M_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:1 - CC1S"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
            #[doc = "Bit 2 - OC1FE"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - OC1PE"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - OC1M"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 7 - OC1CE"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Output Compare 1 mode - bit 3"]
            #[inline(always)]
            pub fn oc1m_3(&self) -> OC1M_3_R {
                OC1M_3_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - CC1S"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
            #[doc = "Bit 2 - OC1FE"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bit 3 - OC1PE"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bits 4:6 - OC1M"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 7 - OC1CE"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
            #[doc = "Bit 16 - Output Compare 1 mode - bit 3"]
            #[inline(always)]
            pub fn oc1m_3(&mut self) -> OC1M_3_W {
                OC1M_3_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `ICPCS`"]
        pub type ICPCS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ICPCS`"]
        pub struct ICPCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ICPCS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn icpcs(&self) -> ICPCS_R {
                ICPCS_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn icpcs(&mut self) -> ICPCS_W {
                ICPCS_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT`"]
        pub type CNT_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT`"]
        pub struct CNT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        #[doc = "Reader of field `UIFCPY`"]
        pub type UIFCPY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIFCPY`"]
        pub struct UIFCPY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIFCPY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - low counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CNT_R {
                CNT_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bit 31 - UIF Copy"]
            #[inline(always)]
            pub fn uifcpy(&self) -> UIFCPY_R {
                UIFCPY_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - low counter value"]
            #[inline(always)]
            pub fn cnt(&mut self) -> CNT_W {
                CNT_W { w: self }
            }
            #[doc = "Bit 31 - UIF Copy"]
            #[inline(always)]
            pub fn uifcpy(&mut self) -> UIFCPY_W {
                UIFCPY_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR`"]
        pub type ARR_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR`"]
        pub struct ARR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Low Auto-reload value"]
            #[inline(always)]
            pub fn arr(&self) -> ARR_R {
                ARR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Low Auto-reload value"]
            #[inline(always)]
            pub fn arr(&mut self) -> ARR_W {
                ARR_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](ccr1) module"]
    pub type CCR1 = crate::Reg<u32, _CCR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR1;
    #[doc = "`read()` method returns [ccr1::R](ccr1::R) reader structure"]
    impl crate::Readable for CCR1 {}
    #[doc = "`write(|w| ..)` method takes [ccr1::W](ccr1::W) writer structure"]
    impl crate::Writable for CCR1 {}
    #[doc = "capture/compare register 1"]
    pub mod ccr1 {
        #[doc = "Reader of register CCR1"]
        pub type R = crate::R<u32, super::CCR1>;
        #[doc = "Writer for register CCR1"]
        pub type W = crate::W<u32, super::CCR1>;
        #[doc = "Register CCR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR1`"]
        pub type CCR1_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR1`"]
        pub struct CCR1_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR1_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Low Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1(&self) -> CCR1_R {
                CCR1_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Low Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1(&mut self) -> CCR1_W {
                CCR1_W { w: self }
            }
        }
    }
    #[doc = "TIM timer input selection register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tisel](tisel) module"]
    pub type TISEL = crate::Reg<u32, _TISEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TISEL;
    #[doc = "`read()` method returns [tisel::R](tisel::R) reader structure"]
    impl crate::Readable for TISEL {}
    #[doc = "`write(|w| ..)` method takes [tisel::W](tisel::W) writer structure"]
    impl crate::Writable for TISEL {}
    #[doc = "TIM timer input selection register"]
    pub mod tisel {
        #[doc = "Reader of register TISEL"]
        pub type R = crate::R<u32, super::TISEL>;
        #[doc = "Writer for register TISEL"]
        pub type W = crate::W<u32, super::TISEL>;
        #[doc = "Register TISEL `reset()`'s with value 0"]
        impl crate::ResetValue for super::TISEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TISEL`"]
        pub type TISEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TISEL`"]
        pub struct TISEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TISEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - TI1\\[0\\]
to TI1\\[15\\]
input selection"]
            #[inline(always)]
            pub fn tisel(&self) -> TISEL_R {
                TISEL_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - TI1\\[0\\]
to TI1\\[15\\]
input selection"]
            #[inline(always)]
            pub fn tisel(&mut self) -> TISEL_W {
                TISEL_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose-timers"]
pub struct TIM2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM2 {}
impl TIM2 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        0x4000_0000 as *const _
    }
}
impl Deref for TIM2 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM2::ptr() }
    }
}
#[doc = "General-purpose-timers"]
pub mod tim2 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - control register 1"]
        pub cr1: CR1,
        #[doc = "0x04 - control register 2"]
        pub cr2: CR2,
        #[doc = "0x08 - slave mode control register"]
        pub smcr: SMCR,
        #[doc = "0x0c - DMA/Interrupt enable register"]
        pub dier: DIER,
        #[doc = "0x10 - status register"]
        pub sr: SR,
        #[doc = "0x14 - event generation register"]
        pub egr: EGR,
        _reserved_6_ccmr1: [u8; 4usize],
        _reserved_7_ccmr2: [u8; 4usize],
        #[doc = "0x20 - capture/compare enable register"]
        pub ccer: CCER,
        #[doc = "0x24 - counter"]
        pub cnt: CNT,
        #[doc = "0x28 - prescaler"]
        pub psc: PSC,
        #[doc = "0x2c - auto-reload register"]
        pub arr: ARR,
        _reserved12: [u8; 4usize],
        #[doc = "0x34 - capture/compare register 1"]
        pub ccr1: CCR1,
        #[doc = "0x38 - capture/compare register 2"]
        pub ccr2: CCR2,
        #[doc = "0x3c - capture/compare register 3"]
        pub ccr3: CCR3,
        #[doc = "0x40 - capture/compare register 4"]
        pub ccr4: CCR4,
        _reserved16: [u8; 4usize],
        #[doc = "0x48 - DMA control register"]
        pub dcr: DCR,
        #[doc = "0x4c - DMA address for full transfer"]
        pub dmar: DMAR,
        #[doc = "0x50 - TIM option register"]
        pub or1: OR1,
        _reserved19: [u8; 12usize],
        #[doc = "0x60 - TIM alternate function option register 1"]
        pub af1: AF1,
        _reserved20: [u8; 4usize],
        #[doc = "0x68 - TIM alternate function option register 1"]
        pub tisel: TISEL,
    }
    impl RegisterBlock {
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input(&self) -> &CCMR1_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (input mode)"]
        #[inline(always)]
        pub fn ccmr1_input_mut(&self) -> &mut CCMR1_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_INPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output(&self) -> &CCMR1_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(24usize) as *const CCMR1_OUTPUT) }
        }
        #[doc = "0x18 - capture/compare mode register 1 (output mode)"]
        #[inline(always)]
        pub fn ccmr1_output_mut(&self) -> &mut CCMR1_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(24usize) as *mut CCMR1_OUTPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input(&self) -> &CCMR2_INPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(28usize) as *const CCMR2_INPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (input mode)"]
        #[inline(always)]
        pub fn ccmr2_input_mut(&self) -> &mut CCMR2_INPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(28usize) as *mut CCMR2_INPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output(&self) -> &CCMR2_OUTPUT {
            unsafe { &*(((self as *const Self) as *const u8).add(28usize) as *const CCMR2_OUTPUT) }
        }
        #[doc = "0x1c - capture/compare mode register 2 (output mode)"]
        #[inline(always)]
        pub fn ccmr2_output_mut(&self) -> &mut CCMR2_OUTPUT {
            unsafe { &mut *(((self as *const Self) as *mut u8).add(28usize) as *mut CCMR2_OUTPUT) }
        }
    }
    #[doc = "control register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr1](cr1) module"]
    pub type CR1 = crate::Reg<u32, _CR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR1;
    #[doc = "`read()` method returns [cr1::R](cr1::R) reader structure"]
    impl crate::Readable for CR1 {}
    #[doc = "`write(|w| ..)` method takes [cr1::W](cr1::W) writer structure"]
    impl crate::Writable for CR1 {}
    #[doc = "control register 1"]
    pub mod cr1 {
        #[doc = "Reader of register CR1"]
        pub type R = crate::R<u32, super::CR1>;
        #[doc = "Writer for register CR1"]
        pub type W = crate::W<u32, super::CR1>;
        #[doc = "Register CR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `UIFREMAP`"]
        pub type UIFREMAP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIFREMAP`"]
        pub struct UIFREMAP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIFREMAP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CKD`"]
        pub type CKD_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CKD`"]
        pub struct CKD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CKD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `ARPE`"]
        pub type ARPE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ARPE`"]
        pub struct ARPE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARPE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CMS`"]
        pub type CMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CMS`"]
        pub struct CMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 5)) | (((value as u32) & 0x03) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `DIR`"]
        pub type DIR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DIR`"]
        pub struct DIR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DIR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OPM`"]
        pub type OPM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OPM`"]
        pub struct OPM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OPM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `URS`"]
        pub type URS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `URS`"]
        pub struct URS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> URS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `UDIS`"]
        pub type UDIS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDIS`"]
        pub struct UDIS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDIS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CEN`"]
        pub type CEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CEN`"]
        pub struct CEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - UIF status bit remapping"]
            #[inline(always)]
            pub fn uifremap(&self) -> UIFREMAP_R {
                UIFREMAP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&self) -> CKD_R {
                CKD_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&self) -> ARPE_R {
                ARPE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&self) -> CMS_R {
                CMS_R::new(((self.bits >> 5) & 0x03) as u8)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&self) -> DIR_R {
                DIR_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&self) -> OPM_R {
                OPM_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&self) -> URS_R {
                URS_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&self) -> UDIS_R {
                UDIS_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CEN_R {
                CEN_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - UIF status bit remapping"]
            #[inline(always)]
            pub fn uifremap(&mut self) -> UIFREMAP_W {
                UIFREMAP_W { w: self }
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckd(&mut self) -> CKD_W {
                CKD_W { w: self }
            }
            #[doc = "Bit 7 - Auto-reload preload enable"]
            #[inline(always)]
            pub fn arpe(&mut self) -> ARPE_W {
                ARPE_W { w: self }
            }
            #[doc = "Bits 5:6 - Center-aligned mode selection"]
            #[inline(always)]
            pub fn cms(&mut self) -> CMS_W {
                CMS_W { w: self }
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&mut self) -> DIR_W {
                DIR_W { w: self }
            }
            #[doc = "Bit 3 - One-pulse mode"]
            #[inline(always)]
            pub fn opm(&mut self) -> OPM_W {
                OPM_W { w: self }
            }
            #[doc = "Bit 2 - Update request source"]
            #[inline(always)]
            pub fn urs(&mut self) -> URS_W {
                URS_W { w: self }
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn udis(&mut self) -> UDIS_W {
                UDIS_W { w: self }
            }
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&mut self) -> CEN_W {
                CEN_W { w: self }
            }
        }
    }
    #[doc = "control register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr2](cr2) module"]
    pub type CR2 = crate::Reg<u32, _CR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR2;
    #[doc = "`read()` method returns [cr2::R](cr2::R) reader structure"]
    impl crate::Readable for CR2 {}
    #[doc = "`write(|w| ..)` method takes [cr2::W](cr2::W) writer structure"]
    impl crate::Writable for CR2 {}
    #[doc = "control register 2"]
    pub mod cr2 {
        #[doc = "Reader of register CR2"]
        pub type R = crate::R<u32, super::CR2>;
        #[doc = "Writer for register CR2"]
        pub type W = crate::W<u32, super::CR2>;
        #[doc = "Register CR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TI1S`"]
        pub type TI1S_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TI1S`"]
        pub struct TI1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1S_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `MMS`"]
        pub type MMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `MMS`"]
        pub struct MMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CCDS`"]
        pub type CCDS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CCDS`"]
        pub struct CCDS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCDS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&self) -> TI1S_R {
                TI1S_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&self) -> MMS_R {
                MMS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&self) -> CCDS_R {
                CCDS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 7 - TI1 selection"]
            #[inline(always)]
            pub fn ti1s(&mut self) -> TI1S_W {
                TI1S_W { w: self }
            }
            #[doc = "Bits 4:6 - Master mode selection"]
            #[inline(always)]
            pub fn mms(&mut self) -> MMS_W {
                MMS_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare DMA selection"]
            #[inline(always)]
            pub fn ccds(&mut self) -> CCDS_W {
                CCDS_W { w: self }
            }
        }
    }
    #[doc = "slave mode control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [smcr](smcr) module"]
    pub type SMCR = crate::Reg<u32, _SMCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SMCR;
    #[doc = "`read()` method returns [smcr::R](smcr::R) reader structure"]
    impl crate::Readable for SMCR {}
    #[doc = "`write(|w| ..)` method takes [smcr::W](smcr::W) writer structure"]
    impl crate::Writable for SMCR {}
    #[doc = "slave mode control register"]
    pub mod smcr {
        #[doc = "Reader of register SMCR"]
        pub type R = crate::R<u32, super::SMCR>;
        #[doc = "Writer for register SMCR"]
        pub type W = crate::W<u32, super::SMCR>;
        #[doc = "Register SMCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SMCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TS_4_3`"]
        pub type TS_4_3_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TS_4_3`"]
        pub struct TS_4_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_4_3_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
                self.w
            }
        }
        #[doc = "Reader of field `SMS_3`"]
        pub type SMS_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SMS_3`"]
        pub struct SMS_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `ETP`"]
        pub type ETP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ETP`"]
        pub struct ETP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `ECE`"]
        pub type ECE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ECE`"]
        pub struct ECE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ECE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `ETPS`"]
        pub type ETPS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ETPS`"]
        pub struct ETPS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETPS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 12)) | (((value as u32) & 0x03) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `ETF`"]
        pub type ETF_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ETF`"]
        pub struct ETF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETF_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `MSM`"]
        pub type MSM_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MSM`"]
        pub struct MSM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MSM_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `TS`"]
        pub type TS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TS`"]
        pub struct TS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OCCS`"]
        pub type OCCS_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OCCS`"]
        pub struct OCCS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OCCS_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `SMS`"]
        pub type SMS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `SMS`"]
        pub struct SMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x07) | ((value as u32) & 0x07);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:21 - Trigger selection"]
            #[inline(always)]
            pub fn ts_4_3(&self) -> TS_4_3_R {
                TS_4_3_R::new(((self.bits >> 20) & 0x03) as u8)
            }
            #[doc = "Bit 16 - Slave mode selection - bit 3"]
            #[inline(always)]
            pub fn sms_3(&self) -> SMS_3_R {
                SMS_3_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> ETP_R {
                ETP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&self) -> ECE_R {
                ECE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&self) -> ETPS_R {
                ETPS_R::new(((self.bits >> 12) & 0x03) as u8)
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&self) -> ETF_R {
                ETF_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MSM_R {
                MSM_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&self) -> TS_R {
                TS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - OCREF clear selection"]
            #[inline(always)]
            pub fn occs(&self) -> OCCS_R {
                OCCS_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&self) -> SMS_R {
                SMS_R::new((self.bits & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:21 - Trigger selection"]
            #[inline(always)]
            pub fn ts_4_3(&mut self) -> TS_4_3_W {
                TS_4_3_W { w: self }
            }
            #[doc = "Bit 16 - Slave mode selection - bit 3"]
            #[inline(always)]
            pub fn sms_3(&mut self) -> SMS_3_W {
                SMS_3_W { w: self }
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&mut self) -> ETP_W {
                ETP_W { w: self }
            }
            #[doc = "Bit 14 - External clock enable"]
            #[inline(always)]
            pub fn ece(&mut self) -> ECE_W {
                ECE_W { w: self }
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etps(&mut self) -> ETPS_W {
                ETPS_W { w: self }
            }
            #[doc = "Bits 8:11 - External trigger filter"]
            #[inline(always)]
            pub fn etf(&mut self) -> ETF_W {
                ETF_W { w: self }
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&mut self) -> MSM_W {
                MSM_W { w: self }
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn ts(&mut self) -> TS_W {
                TS_W { w: self }
            }
            #[doc = "Bit 3 - OCREF clear selection"]
            #[inline(always)]
            pub fn occs(&mut self) -> OCCS_W {
                OCCS_W { w: self }
            }
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn sms(&mut self) -> SMS_W {
                SMS_W { w: self }
            }
        }
    }
    #[doc = "DMA/Interrupt enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dier](dier) module"]
    pub type DIER = crate::Reg<u32, _DIER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DIER;
    #[doc = "`read()` method returns [dier::R](dier::R) reader structure"]
    impl crate::Readable for DIER {}
    #[doc = "`write(|w| ..)` method takes [dier::W](dier::W) writer structure"]
    impl crate::Writable for DIER {}
    #[doc = "DMA/Interrupt enable register"]
    pub mod dier {
        #[doc = "Reader of register DIER"]
        pub type R = crate::R<u32, super::DIER>;
        #[doc = "Writer for register DIER"]
        pub type W = crate::W<u32, super::DIER>;
        #[doc = "Register DIER `reset()`'s with value 0"]
        impl crate::ResetValue for super::DIER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TDE`"]
        pub type TDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TDE`"]
        pub struct TDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
                self.w
            }
        }
        #[doc = "Reader of field `CC4DE`"]
        pub type CC4DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4DE`"]
        pub struct CC4DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CC3DE`"]
        pub type CC3DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3DE`"]
        pub struct CC3DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CC2DE`"]
        pub type CC2DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2DE`"]
        pub struct CC2DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC1DE`"]
        pub type CC1DE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1DE`"]
        pub struct CC1DE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1DE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `UDE`"]
        pub type UDE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UDE`"]
        pub struct UDE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UDE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `TIE`"]
        pub type TIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIE`"]
        pub struct TIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CC4IE`"]
        pub type CC4IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4IE`"]
        pub struct CC4IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CC3IE`"]
        pub type CC3IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3IE`"]
        pub struct CC3IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC2IE`"]
        pub type CC2IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2IE`"]
        pub struct CC2IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IE`"]
        pub type CC1IE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IE`"]
        pub struct CC1IE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `UIE`"]
        pub type UIE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIE`"]
        pub struct UIE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&self) -> TDE_R {
                TDE_R::new(((self.bits >> 14) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&self) -> CC4DE_R {
                CC4DE_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&self) -> CC3DE_R {
                CC3DE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&self) -> CC2DE_R {
                CC2DE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&self) -> CC1DE_R {
                CC1DE_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&self) -> UDE_R {
                UDE_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&self) -> TIE_R {
                TIE_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&self) -> CC4IE_R {
                CC4IE_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&self) -> CC3IE_R {
                CC3IE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&self) -> CC2IE_R {
                CC2IE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&self) -> CC1IE_R {
                CC1IE_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&self) -> UIE_R {
                UIE_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn tde(&mut self) -> TDE_W {
                TDE_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 DMA request enable"]
            #[inline(always)]
            pub fn cc4de(&mut self) -> CC4DE_W {
                CC4DE_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 DMA request enable"]
            #[inline(always)]
            pub fn cc3de(&mut self) -> CC3DE_W {
                CC3DE_W { w: self }
            }
            #[doc = "Bit 10 - Capture/Compare 2 DMA request enable"]
            #[inline(always)]
            pub fn cc2de(&mut self) -> CC2DE_W {
                CC2DE_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 DMA request enable"]
            #[inline(always)]
            pub fn cc1de(&mut self) -> CC1DE_W {
                CC1DE_W { w: self }
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn ude(&mut self) -> UDE_W {
                UDE_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn tie(&mut self) -> TIE_W {
                TIE_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt enable"]
            #[inline(always)]
            pub fn cc4ie(&mut self) -> CC4IE_W {
                CC4IE_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt enable"]
            #[inline(always)]
            pub fn cc3ie(&mut self) -> CC3IE_W {
                CC3IE_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt enable"]
            #[inline(always)]
            pub fn cc2ie(&mut self) -> CC2IE_W {
                CC2IE_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 interrupt enable"]
            #[inline(always)]
            pub fn cc1ie(&mut self) -> CC1IE_W {
                CC1IE_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn uie(&mut self) -> UIE_W {
                UIE_W { w: self }
            }
        }
    }
    #[doc = "status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sr](sr) module"]
    pub type SR = crate::Reg<u32, _SR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _SR;
    #[doc = "`read()` method returns [sr::R](sr::R) reader structure"]
    impl crate::Readable for SR {}
    #[doc = "`write(|w| ..)` method takes [sr::W](sr::W) writer structure"]
    impl crate::Writable for SR {}
    #[doc = "status register"]
    pub mod sr {
        #[doc = "Reader of register SR"]
        pub type R = crate::R<u32, super::SR>;
        #[doc = "Writer for register SR"]
        pub type W = crate::W<u32, super::SR>;
        #[doc = "Register SR `reset()`'s with value 0"]
        impl crate::ResetValue for super::SR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC4OF`"]
        pub type CC4OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4OF`"]
        pub struct CC4OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CC3OF`"]
        pub type CC3OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3OF`"]
        pub struct CC3OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CC2OF`"]
        pub type CC2OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2OF`"]
        pub struct CC2OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC1OF`"]
        pub type CC1OF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1OF`"]
        pub struct CC1OF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1OF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `TIF`"]
        pub type TIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TIF`"]
        pub struct TIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `CC4IF`"]
        pub type CC4IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4IF`"]
        pub struct CC4IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CC3IF`"]
        pub type CC3IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3IF`"]
        pub struct CC3IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC2IF`"]
        pub type CC2IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2IF`"]
        pub struct CC2IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1IF`"]
        pub type CC1IF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1IF`"]
        pub struct CC1IF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1IF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `UIF`"]
        pub type UIF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UIF`"]
        pub struct UIF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UIF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&self) -> CC4OF_R {
                CC4OF_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&self) -> CC3OF_R {
                CC3OF_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&self) -> CC2OF_R {
                CC2OF_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&self) -> CC1OF_R {
                CC1OF_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TIF_R {
                TIF_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&self) -> CC4IF_R {
                CC4IF_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&self) -> CC3IF_R {
                CC3IF_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&self) -> CC2IF_R {
                CC2IF_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&self) -> CC1IF_R {
                CC1IF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&self) -> UIF_R {
                UIF_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 12 - Capture/Compare 4 overcapture flag"]
            #[inline(always)]
            pub fn cc4of(&mut self) -> CC4OF_W {
                CC4OF_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 overcapture flag"]
            #[inline(always)]
            pub fn cc3of(&mut self) -> CC3OF_W {
                CC3OF_W { w: self }
            }
            #[doc = "Bit 10 - Capture/compare 2 overcapture flag"]
            #[inline(always)]
            pub fn cc2of(&mut self) -> CC2OF_W {
                CC2OF_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 1 overcapture flag"]
            #[inline(always)]
            pub fn cc1of(&mut self) -> CC1OF_W {
                CC1OF_W { w: self }
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn tif(&mut self) -> TIF_W {
                TIF_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 4 interrupt flag"]
            #[inline(always)]
            pub fn cc4if(&mut self) -> CC4IF_W {
                CC4IF_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 3 interrupt flag"]
            #[inline(always)]
            pub fn cc3if(&mut self) -> CC3IF_W {
                CC3IF_W { w: self }
            }
            #[doc = "Bit 2 - Capture/Compare 2 interrupt flag"]
            #[inline(always)]
            pub fn cc2if(&mut self) -> CC2IF_W {
                CC2IF_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 interrupt flag"]
            #[inline(always)]
            pub fn cc1if(&mut self) -> CC1IF_W {
                CC1IF_W { w: self }
            }
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn uif(&mut self) -> UIF_W {
                UIF_W { w: self }
            }
        }
    }
    #[doc = "event generation register\n\nThis register you can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [egr](egr) module"]
    pub type EGR = crate::Reg<u32, _EGR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _EGR;
    #[doc = "`write(|w| ..)` method takes [egr::W](egr::W) writer structure"]
    impl crate::Writable for EGR {}
    #[doc = "event generation register"]
    pub mod egr {
        #[doc = "Writer for register EGR"]
        pub type W = crate::W<u32, super::EGR>;
        #[doc = "Register EGR `reset()`'s with value 0"]
        impl crate::ResetValue for super::EGR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Write proxy for field `TG`"]
        pub struct TG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC4G`"]
        pub struct CC4G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC3G`"]
        pub struct CC3G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC2G`"]
        pub struct CC2G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Write proxy for field `CC1G`"]
        pub struct CC1G_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1G_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Write proxy for field `UG`"]
        pub struct UG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl W {
            #[doc = "Bit 6 - Trigger generation"]
            #[inline(always)]
            pub fn tg(&mut self) -> TG_W {
                TG_W { w: self }
            }
            #[doc = "Bit 4 - Capture/compare 4 generation"]
            #[inline(always)]
            pub fn cc4g(&mut self) -> CC4G_W {
                CC4G_W { w: self }
            }
            #[doc = "Bit 3 - Capture/compare 3 generation"]
            #[inline(always)]
            pub fn cc3g(&mut self) -> CC3G_W {
                CC3G_W { w: self }
            }
            #[doc = "Bit 2 - Capture/compare 2 generation"]
            #[inline(always)]
            pub fn cc2g(&mut self) -> CC2G_W {
                CC2G_W { w: self }
            }
            #[doc = "Bit 1 - Capture/compare 1 generation"]
            #[inline(always)]
            pub fn cc1g(&mut self) -> CC1G_W {
                CC1G_W { w: self }
            }
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            pub fn ug(&mut self) -> UG_W {
                UG_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_output](ccmr1_output) module"]
    pub type CCMR1_OUTPUT = crate::Reg<u32, _CCMR1_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_OUTPUT;
    #[doc = "`read()` method returns [ccmr1_output::R](ccmr1_output::R) reader structure"]
    impl crate::Readable for CCMR1_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_output::W](ccmr1_output::W) writer structure"]
    impl crate::Writable for CCMR1_OUTPUT {}
    #[doc = "capture/compare mode register 1 (output mode)"]
    pub mod ccmr1_output {
        #[doc = "Reader of register CCMR1_Output"]
        pub type R = crate::R<u32, super::CCMR1_OUTPUT>;
        #[doc = "Writer for register CCMR1_Output"]
        pub type W = crate::W<u32, super::CCMR1_OUTPUT>;
        #[doc = "Register CCMR1_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC2M_3`"]
        pub type OC2M_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2M_3`"]
        pub struct OC2M_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M_3`"]
        pub type OC1M_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1M_3`"]
        pub struct OC1M_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OC2CE`"]
        pub type OC2CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2CE`"]
        pub struct OC2CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `OC2M`"]
        pub type OC2M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC2M`"]
        pub struct OC2M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OC2PE`"]
        pub type OC2PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2PE`"]
        pub struct OC2PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC2FE`"]
        pub type OC2FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC2FE`"]
        pub struct OC2FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC2FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC1CE`"]
        pub type OC1CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1CE`"]
        pub struct OC1CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OC1M`"]
        pub type OC1M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC1M`"]
        pub struct OC1M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC1PE`"]
        pub type OC1PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1PE`"]
        pub struct OC1PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC1FE`"]
        pub type OC1FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC1FE`"]
        pub struct OC1FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC1FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - Output Compare 2 mode - bit 3"]
            #[inline(always)]
            pub fn oc2m_3(&self) -> OC2M_3_R {
                OC2M_3_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Output Compare 1 mode - bit 3"]
            #[inline(always)]
            pub fn oc1m_3(&self) -> OC1M_3_R {
                OC1M_3_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Output compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&self) -> OC2CE_R {
                OC2CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&self) -> OC2M_R {
                OC2M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&self) -> OC2PE_R {
                OC2PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&self) -> OC2FE_R {
                OC2FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&self) -> OC1CE_R {
                OC1CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&self) -> OC1M_R {
                OC1M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&self) -> OC1PE_R {
                OC1PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&self) -> OC1FE_R {
                OC1FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 24 - Output Compare 2 mode - bit 3"]
            #[inline(always)]
            pub fn oc2m_3(&mut self) -> OC2M_3_W {
                OC2M_3_W { w: self }
            }
            #[doc = "Bit 16 - Output Compare 1 mode - bit 3"]
            #[inline(always)]
            pub fn oc1m_3(&mut self) -> OC1M_3_W {
                OC1M_3_W { w: self }
            }
            #[doc = "Bit 15 - Output compare 2 clear enable"]
            #[inline(always)]
            pub fn oc2ce(&mut self) -> OC2CE_W {
                OC2CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 2 mode"]
            #[inline(always)]
            pub fn oc2m(&mut self) -> OC2M_W {
                OC2M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 2 preload enable"]
            #[inline(always)]
            pub fn oc2pe(&mut self) -> OC2PE_W {
                OC2PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 2 fast enable"]
            #[inline(always)]
            pub fn oc2fe(&mut self) -> OC2FE_W {
                OC2FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 1 clear enable"]
            #[inline(always)]
            pub fn oc1ce(&mut self) -> OC1CE_W {
                OC1CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 1 mode"]
            #[inline(always)]
            pub fn oc1m(&mut self) -> OC1M_W {
                OC1M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 1 preload enable"]
            #[inline(always)]
            pub fn oc1pe(&mut self) -> OC1PE_W {
                OC1PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 1 fast enable"]
            #[inline(always)]
            pub fn oc1fe(&mut self) -> OC1FE_W {
                OC1FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 1 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr1_input](ccmr1_input) module"]
    pub type CCMR1_INPUT = crate::Reg<u32, _CCMR1_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR1_INPUT;
    #[doc = "`read()` method returns [ccmr1_input::R](ccmr1_input::R) reader structure"]
    impl crate::Readable for CCMR1_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr1_input::W](ccmr1_input::W) writer structure"]
    impl crate::Writable for CCMR1_INPUT {}
    #[doc = "capture/compare mode register 1 (input mode)"]
    pub mod ccmr1_input {
        #[doc = "Reader of register CCMR1_Input"]
        pub type R = crate::R<u32, super::CCMR1_INPUT>;
        #[doc = "Writer for register CCMR1_Input"]
        pub type W = crate::W<u32, super::CCMR1_INPUT>;
        #[doc = "Register CCMR1_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR1_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC2F`"]
        pub type IC2F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2F`"]
        pub struct IC2F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC2PSC`"]
        pub type IC2PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC2PSC`"]
        pub struct IC2PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC2PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC2S`"]
        pub type CC2S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC2S`"]
        pub struct CC2S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IC1F`"]
        pub type IC1F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1F`"]
        pub struct IC1F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC1PSC`"]
        pub type IC1PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC1PSC`"]
        pub struct IC1PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC1PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC1S`"]
        pub type CC1S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC1S`"]
        pub struct CC1S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&self) -> IC2F_R {
                IC2F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&self) -> IC2PSC_R {
                IC2PSC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Capture/compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&self) -> CC2S_R {
                CC2S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&self) -> IC1F_R {
                IC1F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&self) -> IC1PSC_R {
                IC1PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&self) -> CC1S_R {
                CC1S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 2 filter"]
            #[inline(always)]
            pub fn ic2f(&mut self) -> IC2F_W {
                IC2F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 2 prescaler"]
            #[inline(always)]
            pub fn ic2psc(&mut self) -> IC2PSC_W {
                IC2PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/compare 2 selection"]
            #[inline(always)]
            pub fn cc2s(&mut self) -> CC2S_W {
                CC2S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 1 filter"]
            #[inline(always)]
            pub fn ic1f(&mut self) -> IC1F_W {
                IC1F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 1 prescaler"]
            #[inline(always)]
            pub fn ic1psc(&mut self) -> IC1PSC_W {
                IC1PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 1 selection"]
            #[inline(always)]
            pub fn cc1s(&mut self) -> CC1S_W {
                CC1S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 2 (output mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_output](ccmr2_output) module"]
    pub type CCMR2_OUTPUT = crate::Reg<u32, _CCMR2_OUTPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR2_OUTPUT;
    #[doc = "`read()` method returns [ccmr2_output::R](ccmr2_output::R) reader structure"]
    impl crate::Readable for CCMR2_OUTPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr2_output::W](ccmr2_output::W) writer structure"]
    impl crate::Writable for CCMR2_OUTPUT {}
    #[doc = "capture/compare mode register 2 (output mode)"]
    pub mod ccmr2_output {
        #[doc = "Reader of register CCMR2_Output"]
        pub type R = crate::R<u32, super::CCMR2_OUTPUT>;
        #[doc = "Writer for register CCMR2_Output"]
        pub type W = crate::W<u32, super::CCMR2_OUTPUT>;
        #[doc = "Register CCMR2_Output `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR2_OUTPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `OC4M_3`"]
        pub type OC4M_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4M_3`"]
        pub struct OC4M_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4M_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `OC3M_3`"]
        pub type OC3M_3_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3M_3`"]
        pub struct OC3M_3_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3M_3_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `OC4CE`"]
        pub type OC4CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4CE`"]
        pub struct OC4CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `OC4M`"]
        pub type OC4M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC4M`"]
        pub struct OC4M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 12)) | (((value as u32) & 0x07) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `OC4PE`"]
        pub type OC4PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4PE`"]
        pub struct OC4PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `OC4FE`"]
        pub type OC4FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC4FE`"]
        pub struct OC4FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC4FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC4S`"]
        pub type CC4S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC4S`"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `OC3CE`"]
        pub type OC3CE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3CE`"]
        pub struct OC3CE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3CE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `OC3M`"]
        pub type OC3M_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `OC3M`"]
        pub struct OC3M_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3M_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `OC3PE`"]
        pub type OC3PE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3PE`"]
        pub struct OC3PE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3PE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `OC3FE`"]
        pub type OC3FE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OC3FE`"]
        pub struct OC3FE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OC3FE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC3S`"]
        pub type CC3S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC3S`"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 24 - Output Compare 4 mode - bit 3"]
            #[inline(always)]
            pub fn oc4m_3(&self) -> OC4M_3_R {
                OC4M_3_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 16 - Output Compare 3 mode - bit 3"]
            #[inline(always)]
            pub fn oc3m_3(&self) -> OC3M_3_R {
                OC3M_3_R::new(((self.bits >> 16) & 0x01) != 0)
            }
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&self) -> OC4CE_R {
                OC4CE_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&self) -> OC4M_R {
                OC4M_R::new(((self.bits >> 12) & 0x07) as u8)
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&self) -> OC4PE_R {
                OC4PE_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&self) -> OC4FE_R {
                OC4FE_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&self) -> OC3CE_R {
                OC3CE_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&self) -> OC3M_R {
                OC3M_R::new(((self.bits >> 4) & 0x07) as u8)
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&self) -> OC3PE_R {
                OC3PE_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&self) -> OC3FE_R {
                OC3FE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bit 24 - Output Compare 4 mode - bit 3"]
            #[inline(always)]
            pub fn oc4m_3(&mut self) -> OC4M_3_W {
                OC4M_3_W { w: self }
            }
            #[doc = "Bit 16 - Output Compare 3 mode - bit 3"]
            #[inline(always)]
            pub fn oc3m_3(&mut self) -> OC3M_3_W {
                OC3M_3_W { w: self }
            }
            #[doc = "Bit 15 - Output compare 4 clear enable"]
            #[inline(always)]
            pub fn oc4ce(&mut self) -> OC4CE_W {
                OC4CE_W { w: self }
            }
            #[doc = "Bits 12:14 - Output compare 4 mode"]
            #[inline(always)]
            pub fn oc4m(&mut self) -> OC4M_W {
                OC4M_W { w: self }
            }
            #[doc = "Bit 11 - Output compare 4 preload enable"]
            #[inline(always)]
            pub fn oc4pe(&mut self) -> OC4PE_W {
                OC4PE_W { w: self }
            }
            #[doc = "Bit 10 - Output compare 4 fast enable"]
            #[inline(always)]
            pub fn oc4fe(&mut self) -> OC4FE_W {
                OC4FE_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bit 7 - Output compare 3 clear enable"]
            #[inline(always)]
            pub fn oc3ce(&mut self) -> OC3CE_W {
                OC3CE_W { w: self }
            }
            #[doc = "Bits 4:6 - Output compare 3 mode"]
            #[inline(always)]
            pub fn oc3m(&mut self) -> OC3M_W {
                OC3M_W { w: self }
            }
            #[doc = "Bit 3 - Output compare 3 preload enable"]
            #[inline(always)]
            pub fn oc3pe(&mut self) -> OC3PE_W {
                OC3PE_W { w: self }
            }
            #[doc = "Bit 2 - Output compare 3 fast enable"]
            #[inline(always)]
            pub fn oc3fe(&mut self) -> OC3FE_W {
                OC3FE_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare mode register 2 (input mode)\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccmr2_input](ccmr2_input) module"]
    pub type CCMR2_INPUT = crate::Reg<u32, _CCMR2_INPUT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCMR2_INPUT;
    #[doc = "`read()` method returns [ccmr2_input::R](ccmr2_input::R) reader structure"]
    impl crate::Readable for CCMR2_INPUT {}
    #[doc = "`write(|w| ..)` method takes [ccmr2_input::W](ccmr2_input::W) writer structure"]
    impl crate::Writable for CCMR2_INPUT {}
    #[doc = "capture/compare mode register 2 (input mode)"]
    pub mod ccmr2_input {
        #[doc = "Reader of register CCMR2_Input"]
        pub type R = crate::R<u32, super::CCMR2_INPUT>;
        #[doc = "Writer for register CCMR2_Input"]
        pub type W = crate::W<u32, super::CCMR2_INPUT>;
        #[doc = "Register CCMR2_Input `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCMR2_INPUT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IC4F`"]
        pub type IC4F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC4F`"]
        pub struct IC4F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 12)) | (((value as u32) & 0x0f) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `IC4PSC`"]
        pub type IC4PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC4PSC`"]
        pub struct IC4PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC4PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 10)) | (((value as u32) & 0x03) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `CC4S`"]
        pub type CC4S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC4S`"]
        pub struct CC4S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 8)) | (((value as u32) & 0x03) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `IC3F`"]
        pub type IC3F_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC3F`"]
        pub struct IC3F_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3F_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 4)) | (((value as u32) & 0x0f) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IC3PSC`"]
        pub type IC3PSC_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `IC3PSC`"]
        pub struct IC3PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IC3PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 2)) | (((value as u32) & 0x03) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `CC3S`"]
        pub type CC3S_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CC3S`"]
        pub struct CC3S_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3S_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x03) | ((value as u32) & 0x03);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&self) -> IC4F_R {
                IC4F_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&self) -> IC4PSC_R {
                IC4PSC_R::new(((self.bits >> 10) & 0x03) as u8)
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&self) -> CC4S_R {
                CC4S_R::new(((self.bits >> 8) & 0x03) as u8)
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&self) -> IC3F_R {
                IC3F_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&self) -> IC3PSC_R {
                IC3PSC_R::new(((self.bits >> 2) & 0x03) as u8)
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&self) -> CC3S_R {
                CC3S_R::new((self.bits & 0x03) as u8)
            }
        }
        impl W {
            #[doc = "Bits 12:15 - Input capture 4 filter"]
            #[inline(always)]
            pub fn ic4f(&mut self) -> IC4F_W {
                IC4F_W { w: self }
            }
            #[doc = "Bits 10:11 - Input capture 4 prescaler"]
            #[inline(always)]
            pub fn ic4psc(&mut self) -> IC4PSC_W {
                IC4PSC_W { w: self }
            }
            #[doc = "Bits 8:9 - Capture/Compare 4 selection"]
            #[inline(always)]
            pub fn cc4s(&mut self) -> CC4S_W {
                CC4S_W { w: self }
            }
            #[doc = "Bits 4:7 - Input capture 3 filter"]
            #[inline(always)]
            pub fn ic3f(&mut self) -> IC3F_W {
                IC3F_W { w: self }
            }
            #[doc = "Bits 2:3 - Input capture 3 prescaler"]
            #[inline(always)]
            pub fn ic3psc(&mut self) -> IC3PSC_W {
                IC3PSC_W { w: self }
            }
            #[doc = "Bits 0:1 - Capture/Compare 3 selection"]
            #[inline(always)]
            pub fn cc3s(&mut self) -> CC3S_W {
                CC3S_W { w: self }
            }
        }
    }
    #[doc = "capture/compare enable register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccer](ccer) module"]
    pub type CCER = crate::Reg<u32, _CCER>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCER;
    #[doc = "`read()` method returns [ccer::R](ccer::R) reader structure"]
    impl crate::Readable for CCER {}
    #[doc = "`write(|w| ..)` method takes [ccer::W](ccer::W) writer structure"]
    impl crate::Writable for CCER {}
    #[doc = "capture/compare enable register"]
    pub mod ccer {
        #[doc = "Reader of register CCER"]
        pub type R = crate::R<u32, super::CCER>;
        #[doc = "Writer for register CCER"]
        pub type W = crate::W<u32, super::CCER>;
        #[doc = "Register CCER `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCER {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CC4NP`"]
        pub type CC4NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4NP`"]
        pub struct CC4NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `CC4P`"]
        pub type CC4P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4P`"]
        pub struct CC4P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
                self.w
            }
        }
        #[doc = "Reader of field `CC4E`"]
        pub type CC4E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC4E`"]
        pub struct CC4E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC4E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `CC3NP`"]
        pub type CC3NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3NP`"]
        pub struct CC3NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `CC3P`"]
        pub type CC3P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3P`"]
        pub struct CC3P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        #[doc = "Reader of field `CC3E`"]
        pub type CC3E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC3E`"]
        pub struct CC3E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC3E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `CC2NP`"]
        pub type CC2NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2NP`"]
        pub struct CC2NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `CC2P`"]
        pub type CC2P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2P`"]
        pub struct CC2P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `CC2E`"]
        pub type CC2E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC2E`"]
        pub struct CC2E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC2E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `CC1NP`"]
        pub type CC1NP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1NP`"]
        pub struct CC1NP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1NP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `CC1P`"]
        pub type CC1P_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1P`"]
        pub struct CC1P_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1P_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CC1E`"]
        pub type CC1E_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CC1E`"]
        pub struct CC1E_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CC1E_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 15 - Capture/Compare 4 output Polarity"]
            #[inline(always)]
            pub fn cc4np(&self) -> CC4NP_R {
                CC4NP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&self) -> CC4P_R {
                CC4P_R::new(((self.bits >> 13) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&self) -> CC4E_R {
                CC4E_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&self) -> CC3NP_R {
                CC3NP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&self) -> CC3P_R {
                CC3P_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&self) -> CC3E_R {
                CC3E_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&self) -> CC2NP_R {
                CC2NP_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&self) -> CC2P_R {
                CC2P_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&self) -> CC2E_R {
                CC2E_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&self) -> CC1NP_R {
                CC1NP_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&self) -> CC1P_R {
                CC1P_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&self) -> CC1E_R {
                CC1E_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 15 - Capture/Compare 4 output Polarity"]
            #[inline(always)]
            pub fn cc4np(&mut self) -> CC4NP_W {
                CC4NP_W { w: self }
            }
            #[doc = "Bit 13 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc4p(&mut self) -> CC4P_W {
                CC4P_W { w: self }
            }
            #[doc = "Bit 12 - Capture/Compare 4 output enable"]
            #[inline(always)]
            pub fn cc4e(&mut self) -> CC4E_W {
                CC4E_W { w: self }
            }
            #[doc = "Bit 11 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3np(&mut self) -> CC3NP_W {
                CC3NP_W { w: self }
            }
            #[doc = "Bit 9 - Capture/Compare 3 output Polarity"]
            #[inline(always)]
            pub fn cc3p(&mut self) -> CC3P_W {
                CC3P_W { w: self }
            }
            #[doc = "Bit 8 - Capture/Compare 3 output enable"]
            #[inline(always)]
            pub fn cc3e(&mut self) -> CC3E_W {
                CC3E_W { w: self }
            }
            #[doc = "Bit 7 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2np(&mut self) -> CC2NP_W {
                CC2NP_W { w: self }
            }
            #[doc = "Bit 5 - Capture/Compare 2 output Polarity"]
            #[inline(always)]
            pub fn cc2p(&mut self) -> CC2P_W {
                CC2P_W { w: self }
            }
            #[doc = "Bit 4 - Capture/Compare 2 output enable"]
            #[inline(always)]
            pub fn cc2e(&mut self) -> CC2E_W {
                CC2E_W { w: self }
            }
            #[doc = "Bit 3 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1np(&mut self) -> CC1NP_W {
                CC1NP_W { w: self }
            }
            #[doc = "Bit 1 - Capture/Compare 1 output Polarity"]
            #[inline(always)]
            pub fn cc1p(&mut self) -> CC1P_W {
                CC1P_W { w: self }
            }
            #[doc = "Bit 0 - Capture/Compare 1 output enable"]
            #[inline(always)]
            pub fn cc1e(&mut self) -> CC1E_W {
                CC1E_W { w: self }
            }
        }
    }
    #[doc = "counter\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cnt](cnt) module"]
    pub type CNT = crate::Reg<u32, _CNT>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CNT;
    #[doc = "`read()` method returns [cnt::R](cnt::R) reader structure"]
    impl crate::Readable for CNT {}
    #[doc = "`write(|w| ..)` method takes [cnt::W](cnt::W) writer structure"]
    impl crate::Writable for CNT {}
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Reader of register CNT"]
        pub type R = crate::R<u32, super::CNT>;
        #[doc = "Writer for register CNT"]
        pub type W = crate::W<u32, super::CNT>;
        #[doc = "Register CNT `reset()`'s with value 0"]
        impl crate::ResetValue for super::CNT {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CNT_H`"]
        pub type CNT_H_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT_H`"]
        pub struct CNT_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_H_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CNT_L`"]
        pub type CNT_L_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CNT_L`"]
        pub struct CNT_L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CNT_L_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - High counter value (TIM2 only)"]
            #[inline(always)]
            pub fn cnt_h(&self) -> CNT_H_R {
                CNT_H_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Low counter value"]
            #[inline(always)]
            pub fn cnt_l(&self) -> CNT_L_R {
                CNT_L_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - High counter value (TIM2 only)"]
            #[inline(always)]
            pub fn cnt_h(&mut self) -> CNT_H_W {
                CNT_H_W { w: self }
            }
            #[doc = "Bits 0:15 - Low counter value"]
            #[inline(always)]
            pub fn cnt_l(&mut self) -> CNT_L_W {
                CNT_L_W { w: self }
            }
        }
    }
    #[doc = "prescaler\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [psc](psc) module"]
    pub type PSC = crate::Reg<u32, _PSC>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _PSC;
    #[doc = "`read()` method returns [psc::R](psc::R) reader structure"]
    impl crate::Readable for PSC {}
    #[doc = "`write(|w| ..)` method takes [psc::W](psc::W) writer structure"]
    impl crate::Writable for PSC {}
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Reader of register PSC"]
        pub type R = crate::R<u32, super::PSC>;
        #[doc = "Writer for register PSC"]
        pub type W = crate::W<u32, super::PSC>;
        #[doc = "Register PSC `reset()`'s with value 0"]
        impl crate::ResetValue for super::PSC {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `PSC`"]
        pub type PSC_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `PSC`"]
        pub struct PSC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> PSC_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PSC_R {
                PSC_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&mut self) -> PSC_W {
                PSC_W { w: self }
            }
        }
    }
    #[doc = "auto-reload register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [arr](arr) module"]
    pub type ARR = crate::Reg<u32, _ARR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ARR;
    #[doc = "`read()` method returns [arr::R](arr::R) reader structure"]
    impl crate::Readable for ARR {}
    #[doc = "`write(|w| ..)` method takes [arr::W](arr::W) writer structure"]
    impl crate::Writable for ARR {}
    #[doc = "auto-reload register"]
    pub mod arr {
        #[doc = "Reader of register ARR"]
        pub type R = crate::R<u32, super::ARR>;
        #[doc = "Writer for register ARR"]
        pub type W = crate::W<u32, super::ARR>;
        #[doc = "Register ARR `reset()`'s with value 0"]
        impl crate::ResetValue for super::ARR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ARR_H`"]
        pub type ARR_H_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR_H`"]
        pub struct ARR_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_H_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `ARR_L`"]
        pub type ARR_L_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `ARR_L`"]
        pub struct ARR_L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ARR_L_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - High Auto-reload value (TIM2 only)"]
            #[inline(always)]
            pub fn arr_h(&self) -> ARR_H_R {
                ARR_H_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Low Auto-reload value"]
            #[inline(always)]
            pub fn arr_l(&self) -> ARR_L_R {
                ARR_L_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - High Auto-reload value (TIM2 only)"]
            #[inline(always)]
            pub fn arr_h(&mut self) -> ARR_H_W {
                ARR_H_W { w: self }
            }
            #[doc = "Bits 0:15 - Low Auto-reload value"]
            #[inline(always)]
            pub fn arr_l(&mut self) -> ARR_L_W {
                ARR_L_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr1](ccr1) module"]
    pub type CCR1 = crate::Reg<u32, _CCR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR1;
    #[doc = "`read()` method returns [ccr1::R](ccr1::R) reader structure"]
    impl crate::Readable for CCR1 {}
    #[doc = "`write(|w| ..)` method takes [ccr1::W](ccr1::W) writer structure"]
    impl crate::Writable for CCR1 {}
    #[doc = "capture/compare register 1"]
    pub mod ccr1 {
        #[doc = "Reader of register CCR1"]
        pub type R = crate::R<u32, super::CCR1>;
        #[doc = "Writer for register CCR1"]
        pub type W = crate::W<u32, super::CCR1>;
        #[doc = "Register CCR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR1_H`"]
        pub type CCR1_H_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR1_H`"]
        pub struct CCR1_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR1_H_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CCR1_L`"]
        pub type CCR1_L_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR1_L`"]
        pub struct CCR1_L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR1_L_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - High Capture/Compare 1 value (TIM2 only)"]
            #[inline(always)]
            pub fn ccr1_h(&self) -> CCR1_H_R {
                CCR1_H_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Low Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1_l(&self) -> CCR1_L_R {
                CCR1_L_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - High Capture/Compare 1 value (TIM2 only)"]
            #[inline(always)]
            pub fn ccr1_h(&mut self) -> CCR1_H_W {
                CCR1_H_W { w: self }
            }
            #[doc = "Bits 0:15 - Low Capture/Compare 1 value"]
            #[inline(always)]
            pub fn ccr1_l(&mut self) -> CCR1_L_W {
                CCR1_L_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr2](ccr2) module"]
    pub type CCR2 = crate::Reg<u32, _CCR2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR2;
    #[doc = "`read()` method returns [ccr2::R](ccr2::R) reader structure"]
    impl crate::Readable for CCR2 {}
    #[doc = "`write(|w| ..)` method takes [ccr2::W](ccr2::W) writer structure"]
    impl crate::Writable for CCR2 {}
    #[doc = "capture/compare register 2"]
    pub mod ccr2 {
        #[doc = "Reader of register CCR2"]
        pub type R = crate::R<u32, super::CCR2>;
        #[doc = "Writer for register CCR2"]
        pub type W = crate::W<u32, super::CCR2>;
        #[doc = "Register CCR2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR2_H`"]
        pub type CCR2_H_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR2_H`"]
        pub struct CCR2_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR2_H_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CCR2_L`"]
        pub type CCR2_L_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR2_L`"]
        pub struct CCR2_L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR2_L_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - High Capture/Compare 2 value (TIM2 only)"]
            #[inline(always)]
            pub fn ccr2_h(&self) -> CCR2_H_R {
                CCR2_H_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Low Capture/Compare 2 value"]
            #[inline(always)]
            pub fn ccr2_l(&self) -> CCR2_L_R {
                CCR2_L_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - High Capture/Compare 2 value (TIM2 only)"]
            #[inline(always)]
            pub fn ccr2_h(&mut self) -> CCR2_H_W {
                CCR2_H_W { w: self }
            }
            #[doc = "Bits 0:15 - Low Capture/Compare 2 value"]
            #[inline(always)]
            pub fn ccr2_l(&mut self) -> CCR2_L_W {
                CCR2_L_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 3\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr3](ccr3) module"]
    pub type CCR3 = crate::Reg<u32, _CCR3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR3;
    #[doc = "`read()` method returns [ccr3::R](ccr3::R) reader structure"]
    impl crate::Readable for CCR3 {}
    #[doc = "`write(|w| ..)` method takes [ccr3::W](ccr3::W) writer structure"]
    impl crate::Writable for CCR3 {}
    #[doc = "capture/compare register 3"]
    pub mod ccr3 {
        #[doc = "Reader of register CCR3"]
        pub type R = crate::R<u32, super::CCR3>;
        #[doc = "Writer for register CCR3"]
        pub type W = crate::W<u32, super::CCR3>;
        #[doc = "Register CCR3 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR3 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR3_H`"]
        pub type CCR3_H_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR3_H`"]
        pub struct CCR3_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR3_H_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CCR3_L`"]
        pub type CCR3_L_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR3_L`"]
        pub struct CCR3_L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR3_L_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - High Capture/Compare value (TIM2 only)"]
            #[inline(always)]
            pub fn ccr3_h(&self) -> CCR3_H_R {
                CCR3_H_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Low Capture/Compare value"]
            #[inline(always)]
            pub fn ccr3_l(&self) -> CCR3_L_R {
                CCR3_L_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - High Capture/Compare value (TIM2 only)"]
            #[inline(always)]
            pub fn ccr3_h(&mut self) -> CCR3_H_W {
                CCR3_H_W { w: self }
            }
            #[doc = "Bits 0:15 - Low Capture/Compare value"]
            #[inline(always)]
            pub fn ccr3_l(&mut self) -> CCR3_L_W {
                CCR3_L_W { w: self }
            }
        }
    }
    #[doc = "capture/compare register 4\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr4](ccr4) module"]
    pub type CCR4 = crate::Reg<u32, _CCR4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR4;
    #[doc = "`read()` method returns [ccr4::R](ccr4::R) reader structure"]
    impl crate::Readable for CCR4 {}
    #[doc = "`write(|w| ..)` method takes [ccr4::W](ccr4::W) writer structure"]
    impl crate::Writable for CCR4 {}
    #[doc = "capture/compare register 4"]
    pub mod ccr4 {
        #[doc = "Reader of register CCR4"]
        pub type R = crate::R<u32, super::CCR4>;
        #[doc = "Writer for register CCR4"]
        pub type W = crate::W<u32, super::CCR4>;
        #[doc = "Register CCR4 `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR4 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CCR4_H`"]
        pub type CCR4_H_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR4_H`"]
        pub struct CCR4_H_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR4_H_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0xffff << 16)) | (((value as u32) & 0xffff) << 16);
                self.w
            }
        }
        #[doc = "Reader of field `CCR4_L`"]
        pub type CCR4_L_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `CCR4_L`"]
        pub struct CCR4_L_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CCR4_L_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 16:31 - High Capture/Compare value (TIM2 only)"]
            #[inline(always)]
            pub fn ccr4_h(&self) -> CCR4_H_R {
                CCR4_H_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
            #[doc = "Bits 0:15 - Low Capture/Compare value"]
            #[inline(always)]
            pub fn ccr4_l(&self) -> CCR4_L_R {
                CCR4_L_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 16:31 - High Capture/Compare value (TIM2 only)"]
            #[inline(always)]
            pub fn ccr4_h(&mut self) -> CCR4_H_W {
                CCR4_H_W { w: self }
            }
            #[doc = "Bits 0:15 - Low Capture/Compare value"]
            #[inline(always)]
            pub fn ccr4_l(&mut self) -> CCR4_L_W {
                CCR4_L_W { w: self }
            }
        }
    }
    #[doc = "DMA control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dcr](dcr) module"]
    pub type DCR = crate::Reg<u32, _DCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DCR;
    #[doc = "`read()` method returns [dcr::R](dcr::R) reader structure"]
    impl crate::Readable for DCR {}
    #[doc = "`write(|w| ..)` method takes [dcr::W](dcr::W) writer structure"]
    impl crate::Writable for DCR {}
    #[doc = "DMA control register"]
    pub mod dcr {
        #[doc = "Reader of register DCR"]
        pub type R = crate::R<u32, super::DCR>;
        #[doc = "Writer for register DCR"]
        pub type W = crate::W<u32, super::DCR>;
        #[doc = "Register DCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBL`"]
        pub type DBL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBL`"]
        pub struct DBL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x1f << 8)) | (((value as u32) & 0x1f) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DBA`"]
        pub type DBA_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `DBA`"]
        pub struct DBA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBA_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x1f) | ((value as u32) & 0x1f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&self) -> DBL_R {
                DBL_R::new(((self.bits >> 8) & 0x1f) as u8)
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&self) -> DBA_R {
                DBA_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 8:12 - DMA burst length"]
            #[inline(always)]
            pub fn dbl(&mut self) -> DBL_W {
                DBL_W { w: self }
            }
            #[doc = "Bits 0:4 - DMA base address"]
            #[inline(always)]
            pub fn dba(&mut self) -> DBA_W {
                DBA_W { w: self }
            }
        }
    }
    #[doc = "DMA address for full transfer\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dmar](dmar) module"]
    pub type DMAR = crate::Reg<u32, _DMAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _DMAR;
    #[doc = "`read()` method returns [dmar::R](dmar::R) reader structure"]
    impl crate::Readable for DMAR {}
    #[doc = "`write(|w| ..)` method takes [dmar::W](dmar::W) writer structure"]
    impl crate::Writable for DMAR {}
    #[doc = "DMA address for full transfer"]
    pub mod dmar {
        #[doc = "Reader of register DMAR"]
        pub type R = crate::R<u32, super::DMAR>;
        #[doc = "Writer for register DMAR"]
        pub type W = crate::W<u32, super::DMAR>;
        #[doc = "Register DMAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::DMAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DMAB`"]
        pub type DMAB_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `DMAB`"]
        pub struct DMAB_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DMAB_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0xffff) | ((value as u32) & 0xffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&self) -> DMAB_R {
                DMAB_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA register for burst accesses"]
            #[inline(always)]
            pub fn dmab(&mut self) -> DMAB_W {
                DMAB_W { w: self }
            }
        }
    }
    #[doc = "TIM option register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [or1](or1) module"]
    pub type OR1 = crate::Reg<u32, _OR1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _OR1;
    #[doc = "`read()` method returns [or1::R](or1::R) reader structure"]
    impl crate::Readable for OR1 {}
    #[doc = "`write(|w| ..)` method takes [or1::W](or1::W) writer structure"]
    impl crate::Writable for OR1 {}
    #[doc = "TIM option register"]
    pub mod or1 {
        #[doc = "Reader of register OR1"]
        pub type R = crate::R<u32, super::OR1>;
        #[doc = "Writer for register OR1"]
        pub type W = crate::W<u32, super::OR1>;
        #[doc = "Register OR1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::OR1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IOCREF_CLR`"]
        pub type IOCREF_CLR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOCREF_CLR`"]
        pub struct IOCREF_CLR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOCREF_CLR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - IOCREF_CLR"]
            #[inline(always)]
            pub fn iocref_clr(&self) -> IOCREF_CLR_R {
                IOCREF_CLR_R::new((self.bits & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - IOCREF_CLR"]
            #[inline(always)]
            pub fn iocref_clr(&mut self) -> IOCREF_CLR_W {
                IOCREF_CLR_W { w: self }
            }
        }
    }
    #[doc = "TIM alternate function option register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [af1](af1) module"]
    pub type AF1 = crate::Reg<u32, _AF1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _AF1;
    #[doc = "`read()` method returns [af1::R](af1::R) reader structure"]
    impl crate::Readable for AF1 {}
    #[doc = "`write(|w| ..)` method takes [af1::W](af1::W) writer structure"]
    impl crate::Writable for AF1 {}
    #[doc = "TIM alternate function option register 1"]
    pub mod af1 {
        #[doc = "Reader of register AF1"]
        pub type R = crate::R<u32, super::AF1>;
        #[doc = "Writer for register AF1"]
        pub type W = crate::W<u32, super::AF1>;
        #[doc = "Register AF1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::AF1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ETRSEL`"]
        pub type ETRSEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `ETRSEL`"]
        pub struct ETRSEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ETRSEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 14)) | (((value as u32) & 0x0f) << 14);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 14:17 - External trigger source selection"]
            #[inline(always)]
            pub fn etrsel(&self) -> ETRSEL_R {
                ETRSEL_R::new(((self.bits >> 14) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 14:17 - External trigger source selection"]
            #[inline(always)]
            pub fn etrsel(&mut self) -> ETRSEL_W {
                ETRSEL_W { w: self }
            }
        }
    }
    #[doc = "TIM alternate function option register 1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tisel](tisel) module"]
    pub type TISEL = crate::Reg<u32, _TISEL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _TISEL;
    #[doc = "`read()` method returns [tisel::R](tisel::R) reader structure"]
    impl crate::Readable for TISEL {}
    #[doc = "`write(|w| ..)` method takes [tisel::W](tisel::W) writer structure"]
    impl crate::Writable for TISEL {}
    #[doc = "TIM alternate function option register 1"]
    pub mod tisel {
        #[doc = "Reader of register TISEL"]
        pub type R = crate::R<u32, super::TISEL>;
        #[doc = "Writer for register TISEL"]
        pub type W = crate::W<u32, super::TISEL>;
        #[doc = "Register TISEL `reset()`'s with value 0"]
        impl crate::ResetValue for super::TISEL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TI1SEL`"]
        pub type TI1SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TI1SEL`"]
        pub struct TI1SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI1SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x0f) | ((value as u32) & 0x0f);
                self.w
            }
        }
        #[doc = "Reader of field `TI2SEL`"]
        pub type TI2SEL_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TI2SEL`"]
        pub struct TI2SEL_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TI2SEL_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 8)) | (((value as u32) & 0x0f) << 8);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:3 - TI1SEL"]
            #[inline(always)]
            pub fn ti1sel(&self) -> TI1SEL_R {
                TI1SEL_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - TI2SEL"]
            #[inline(always)]
            pub fn ti2sel(&self) -> TI2SEL_R {
                TI2SEL_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - TI1SEL"]
            #[inline(always)]
            pub fn ti1sel(&mut self) -> TI1SEL_W {
                TI1SEL_W { w: self }
            }
            #[doc = "Bits 8:11 - TI2SEL"]
            #[inline(always)]
            pub fn ti2sel(&mut self) -> TI2SEL_W {
                TI2SEL_W { w: self }
            }
        }
    }
}
#[doc = "General-purpose-timers"]
pub struct TIM3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIM3 {}
impl TIM3 {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tim2::RegisterBlock {
        0x4000_0400 as *const _
    }
}
impl Deref for TIM3 {
    type Target = tim2::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*TIM3::ptr() }
    }
}
#[doc = "SysTick timer"]
pub struct STK {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STK {}
impl STK {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const stk::RegisterBlock {
        0xe000_e010 as *const _
    }
}
impl Deref for STK {
    type Target = stk::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*STK::ptr() }
    }
}
#[doc = "SysTick timer"]
pub mod stk {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - SysTick control and status register"]
        pub csr: CSR,
        #[doc = "0x04 - SysTick reload value register"]
        pub rvr: RVR,
        #[doc = "0x08 - SysTick current value register"]
        pub cvr: CVR,
        #[doc = "0x0c - SysTick calibration value register"]
        pub calib: CALIB,
    }
    #[doc = "SysTick control and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "`write(|w| ..)` method takes [csr::W](csr::W) writer structure"]
    impl crate::Writable for CSR {}
    #[doc = "SysTick control and status register"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Writer for register CSR"]
        pub type W = crate::W<u32, super::CSR>;
        #[doc = "Register CSR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ENABLE`"]
        pub type ENABLE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ENABLE`"]
        pub struct ENABLE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENABLE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `TICKINT`"]
        pub type TICKINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `TICKINT`"]
        pub struct TICKINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TICKINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `CLKSOURCE`"]
        pub type CLKSOURCE_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `CLKSOURCE`"]
        pub struct CLKSOURCE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CLKSOURCE_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `COUNTFLAG`"]
        pub type COUNTFLAG_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `COUNTFLAG`"]
        pub struct COUNTFLAG_W<'a> {
            w: &'a mut W,
        }
        impl<'a> COUNTFLAG_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 16)) | (((value as u32) & 0x01) << 16);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn enable(&self) -> ENABLE_R {
                ENABLE_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - SysTick exception request enable"]
            #[inline(always)]
            pub fn tickint(&self) -> TICKINT_R {
                TICKINT_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Clock source selection"]
            #[inline(always)]
            pub fn clksource(&self) -> CLKSOURCE_R {
                CLKSOURCE_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 16 - COUNTFLAG"]
            #[inline(always)]
            pub fn countflag(&self) -> COUNTFLAG_R {
                COUNTFLAG_R::new(((self.bits >> 16) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn enable(&mut self) -> ENABLE_W {
                ENABLE_W { w: self }
            }
            #[doc = "Bit 1 - SysTick exception request enable"]
            #[inline(always)]
            pub fn tickint(&mut self) -> TICKINT_W {
                TICKINT_W { w: self }
            }
            #[doc = "Bit 2 - Clock source selection"]
            #[inline(always)]
            pub fn clksource(&mut self) -> CLKSOURCE_W {
                CLKSOURCE_W { w: self }
            }
            #[doc = "Bit 16 - COUNTFLAG"]
            #[inline(always)]
            pub fn countflag(&mut self) -> COUNTFLAG_W {
                COUNTFLAG_W { w: self }
            }
        }
    }
    #[doc = "SysTick reload value register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rvr](rvr) module"]
    pub type RVR = crate::Reg<u32, _RVR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _RVR;
    #[doc = "`read()` method returns [rvr::R](rvr::R) reader structure"]
    impl crate::Readable for RVR {}
    #[doc = "`write(|w| ..)` method takes [rvr::W](rvr::W) writer structure"]
    impl crate::Writable for RVR {}
    #[doc = "SysTick reload value register"]
    pub mod rvr {
        #[doc = "Reader of register RVR"]
        pub type R = crate::R<u32, super::RVR>;
        #[doc = "Writer for register RVR"]
        pub type W = crate::W<u32, super::RVR>;
        #[doc = "Register RVR `reset()`'s with value 0"]
        impl crate::ResetValue for super::RVR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `RELOAD`"]
        pub type RELOAD_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `RELOAD`"]
        pub struct RELOAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RELOAD_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - RELOAD value"]
            #[inline(always)]
            pub fn reload(&self) -> RELOAD_R {
                RELOAD_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - RELOAD value"]
            #[inline(always)]
            pub fn reload(&mut self) -> RELOAD_W {
                RELOAD_W { w: self }
            }
        }
    }
    #[doc = "SysTick current value register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cvr](cvr) module"]
    pub type CVR = crate::Reg<u32, _CVR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CVR;
    #[doc = "`read()` method returns [cvr::R](cvr::R) reader structure"]
    impl crate::Readable for CVR {}
    #[doc = "`write(|w| ..)` method takes [cvr::W](cvr::W) writer structure"]
    impl crate::Writable for CVR {}
    #[doc = "SysTick current value register"]
    pub mod cvr {
        #[doc = "Reader of register CVR"]
        pub type R = crate::R<u32, super::CVR>;
        #[doc = "Writer for register CVR"]
        pub type W = crate::W<u32, super::CVR>;
        #[doc = "Register CVR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CVR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CURRENT`"]
        pub type CURRENT_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `CURRENT`"]
        pub struct CURRENT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CURRENT_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - Current counter value"]
            #[inline(always)]
            pub fn current(&self) -> CURRENT_R {
                CURRENT_R::new((self.bits & 0x00ff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - Current counter value"]
            #[inline(always)]
            pub fn current(&mut self) -> CURRENT_W {
                CURRENT_W { w: self }
            }
        }
    }
    #[doc = "SysTick calibration value register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [calib](calib) module"]
    pub type CALIB = crate::Reg<u32, _CALIB>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CALIB;
    #[doc = "`read()` method returns [calib::R](calib::R) reader structure"]
    impl crate::Readable for CALIB {}
    #[doc = "`write(|w| ..)` method takes [calib::W](calib::W) writer structure"]
    impl crate::Writable for CALIB {}
    #[doc = "SysTick calibration value register"]
    pub mod calib {
        #[doc = "Reader of register CALIB"]
        pub type R = crate::R<u32, super::CALIB>;
        #[doc = "Writer for register CALIB"]
        pub type W = crate::W<u32, super::CALIB>;
        #[doc = "Register CALIB `reset()`'s with value 0"]
        impl crate::ResetValue for super::CALIB {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TENMS`"]
        pub type TENMS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `TENMS`"]
        pub struct TENMS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TENMS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x00ff_ffff) | ((value as u32) & 0x00ff_ffff);
                self.w
            }
        }
        #[doc = "Reader of field `SKEW`"]
        pub type SKEW_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `SKEW`"]
        pub struct SKEW_W<'a> {
            w: &'a mut W,
        }
        impl<'a> SKEW_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `NOREF`"]
        pub type NOREF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `NOREF`"]
        pub struct NOREF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> NOREF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:23 - Calibration value"]
            #[inline(always)]
            pub fn tenms(&self) -> TENMS_R {
                TENMS_R::new((self.bits & 0x00ff_ffff) as u32)
            }
            #[doc = "Bit 30 - SKEW flag: Indicates whether the TENMS value is exact"]
            #[inline(always)]
            pub fn skew(&self) -> SKEW_R {
                SKEW_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - NOREF flag. Reads as zero"]
            #[inline(always)]
            pub fn noref(&self) -> NOREF_R {
                NOREF_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:23 - Calibration value"]
            #[inline(always)]
            pub fn tenms(&mut self) -> TENMS_W {
                TENMS_W { w: self }
            }
            #[doc = "Bit 30 - SKEW flag: Indicates whether the TENMS value is exact"]
            #[inline(always)]
            pub fn skew(&mut self) -> SKEW_W {
                SKEW_W { w: self }
            }
            #[doc = "Bit 31 - NOREF flag. Reads as zero"]
            #[inline(always)]
            pub fn noref(&mut self) -> NOREF_W {
                NOREF_W { w: self }
            }
        }
    }
}
#[doc = "System configuration controller"]
pub struct VREFBUF {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for VREFBUF {}
impl VREFBUF {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const vrefbuf::RegisterBlock {
        0x4001_0030 as *const _
    }
}
impl Deref for VREFBUF {
    type Target = vrefbuf::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*VREFBUF::ptr() }
    }
}
#[doc = "System configuration controller"]
pub mod vrefbuf {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - VREFBUF control and status register"]
        pub csr: CSR,
        #[doc = "0x04 - VREFBUF calibration control register"]
        pub ccr: CCR,
    }
    #[doc = "VREFBUF control and status register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](csr) module"]
    pub type CSR = crate::Reg<u32, _CSR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CSR;
    #[doc = "`read()` method returns [csr::R](csr::R) reader structure"]
    impl crate::Readable for CSR {}
    #[doc = "`write(|w| ..)` method takes [csr::W](csr::W) writer structure"]
    impl crate::Writable for CSR {}
    #[doc = "VREFBUF control and status register"]
    pub mod csr {
        #[doc = "Reader of register CSR"]
        pub type R = crate::R<u32, super::CSR>;
        #[doc = "Writer for register CSR"]
        pub type W = crate::W<u32, super::CSR>;
        #[doc = "Register CSR `reset()`'s with value 0x02"]
        impl crate::ResetValue for super::CSR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0x02
            }
        }
        #[doc = "Reader of field `ENVR`"]
        pub type ENVR_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ENVR`"]
        pub struct ENVR_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ENVR_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `HIZ`"]
        pub type HIZ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HIZ`"]
        pub struct HIZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HIZ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `VRR`"]
        pub type VRR_R = crate::R<bool, bool>;
        #[doc = "Reader of field `VRS`"]
        pub type VRS_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `VRS`"]
        pub struct VRS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> VRS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x07 << 4)) | (((value as u32) & 0x07) << 4);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode."]
            #[inline(always)]
            pub fn envr(&self) -> ENVR_R {
                ENVR_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to Table196: VREF buffer modes for the mode descriptions depending on ENVR bit configuration."]
            #[inline(always)]
            pub fn hiz(&self) -> HIZ_R {
                HIZ_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Voltage reference buffer ready"]
            #[inline(always)]
            pub fn vrr(&self) -> VRR_R {
                VRR_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bits 4:6 - Voltage reference scale These bits select the value generated by the voltage reference buffer. Other: Reserved"]
            #[inline(always)]
            pub fn vrs(&self) -> VRS_R {
                VRS_R::new(((self.bits >> 4) & 0x07) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode."]
            #[inline(always)]
            pub fn envr(&mut self) -> ENVR_W {
                ENVR_W { w: self }
            }
            #[doc = "Bit 1 - High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to Table196: VREF buffer modes for the mode descriptions depending on ENVR bit configuration."]
            #[inline(always)]
            pub fn hiz(&mut self) -> HIZ_W {
                HIZ_W { w: self }
            }
            #[doc = "Bits 4:6 - Voltage reference scale These bits select the value generated by the voltage reference buffer. Other: Reserved"]
            #[inline(always)]
            pub fn vrs(&mut self) -> VRS_W {
                VRS_W { w: self }
            }
        }
    }
    #[doc = "VREFBUF calibration control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ccr](ccr) module"]
    pub type CCR = crate::Reg<u32, _CCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CCR;
    #[doc = "`read()` method returns [ccr::R](ccr::R) reader structure"]
    impl crate::Readable for CCR {}
    #[doc = "`write(|w| ..)` method takes [ccr::W](ccr::W) writer structure"]
    impl crate::Writable for CCR {}
    #[doc = "VREFBUF calibration control register"]
    pub mod ccr {
        #[doc = "Reader of register CCR"]
        pub type R = crate::R<u32, super::CCR>;
        #[doc = "Writer for register CCR"]
        pub type W = crate::W<u32, super::CCR>;
        #[doc = "Register CCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `TRIM`"]
        pub type TRIM_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `TRIM`"]
        pub struct TRIM_W<'a> {
            w: &'a mut W,
        }
        impl<'a> TRIM_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x3f) | ((value as u32) & 0x3f);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:5 - Trimming code These bits are automatically initialized after reset with the trimming value stored in the Flash memory during the production test. Writing into these bits allows to tune the internal reference buffer voltage."]
            #[inline(always)]
            pub fn trim(&self) -> TRIM_R {
                TRIM_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - Trimming code These bits are automatically initialized after reset with the trimming value stored in the Flash memory during the production test. Writing into these bits allows to tune the internal reference buffer voltage."]
            #[inline(always)]
            pub fn trim(&mut self) -> TRIM_W {
                TRIM_W { w: self }
            }
        }
    }
}
#[doc = "MCU debug component"]
pub struct DBG {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DBG {}
impl DBG {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dbg::RegisterBlock {
        0x4001_5800 as *const _
    }
}
impl Deref for DBG {
    type Target = dbg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*DBG::ptr() }
    }
}
#[doc = "MCU debug component"]
pub mod dbg {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - DBGMCU_IDCODE"]
        pub idcode: IDCODE,
        #[doc = "0x04 - Debug MCU configuration register"]
        pub cr: CR,
        #[doc = "0x08 - Debug MCU APB1 freeze register1"]
        pub apb_fz1: APB_FZ1,
        #[doc = "0x0c - Debug MCU APB1 freeze register 2"]
        pub apb_fz2: APB_FZ2,
    }
    #[doc = "DBGMCU_IDCODE\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [idcode](idcode) module"]
    pub type IDCODE = crate::Reg<u32, _IDCODE>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _IDCODE;
    #[doc = "`read()` method returns [idcode::R](idcode::R) reader structure"]
    impl crate::Readable for IDCODE {}
    #[doc = "DBGMCU_IDCODE"]
    pub mod idcode {
        #[doc = "Reader of register IDCODE"]
        pub type R = crate::R<u32, super::IDCODE>;
        #[doc = "Reader of field `DEV_ID`"]
        pub type DEV_ID_R = crate::R<u16, u16>;
        #[doc = "Reader of field `REV_ID`"]
        pub type REV_ID_R = crate::R<u16, u16>;
        impl R {
            #[doc = "Bits 0:11 - Device identifier"]
            #[inline(always)]
            pub fn dev_id(&self) -> DEV_ID_R {
                DEV_ID_R::new((self.bits & 0x0fff) as u16)
            }
            #[doc = "Bits 16:31 - Revision identifie"]
            #[inline(always)]
            pub fn rev_id(&self) -> REV_ID_R {
                REV_ID_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
    }
    #[doc = "Debug MCU configuration register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](cr) module"]
    pub type CR = crate::Reg<u32, _CR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CR;
    #[doc = "`read()` method returns [cr::R](cr::R) reader structure"]
    impl crate::Readable for CR {}
    #[doc = "`write(|w| ..)` method takes [cr::W](cr::W) writer structure"]
    impl crate::Writable for CR {}
    #[doc = "Debug MCU configuration register"]
    pub mod cr {
        #[doc = "Reader of register CR"]
        pub type R = crate::R<u32, super::CR>;
        #[doc = "Writer for register CR"]
        pub type W = crate::W<u32, super::CR>;
        #[doc = "Register CR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBG_STOP`"]
        pub type DBG_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_STOP`"]
        pub struct DBG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_STANDBY`"]
        pub type DBG_STANDBY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_STANDBY`"]
        pub struct DBG_STANDBY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_STANDBY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 1 - Debug Stop mode"]
            #[inline(always)]
            pub fn dbg_stop(&self) -> DBG_STOP_R {
                DBG_STOP_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Debug Standby mode"]
            #[inline(always)]
            pub fn dbg_standby(&self) -> DBG_STANDBY_R {
                DBG_STANDBY_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 1 - Debug Stop mode"]
            #[inline(always)]
            pub fn dbg_stop(&mut self) -> DBG_STOP_W {
                DBG_STOP_W { w: self }
            }
            #[doc = "Bit 2 - Debug Standby mode"]
            #[inline(always)]
            pub fn dbg_standby(&mut self) -> DBG_STANDBY_W {
                DBG_STANDBY_W { w: self }
            }
        }
    }
    #[doc = "Debug MCU APB1 freeze register1\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb_fz1](apb_fz1) module"]
    pub type APB_FZ1 = crate::Reg<u32, _APB_FZ1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB_FZ1;
    #[doc = "`read()` method returns [apb_fz1::R](apb_fz1::R) reader structure"]
    impl crate::Readable for APB_FZ1 {}
    #[doc = "`write(|w| ..)` method takes [apb_fz1::W](apb_fz1::W) writer structure"]
    impl crate::Writable for APB_FZ1 {}
    #[doc = "Debug MCU APB1 freeze register1"]
    pub mod apb_fz1 {
        #[doc = "Reader of register APB_FZ1"]
        pub type R = crate::R<u32, super::APB_FZ1>;
        #[doc = "Writer for register APB_FZ1"]
        pub type W = crate::W<u32, super::APB_FZ1>;
        #[doc = "Register APB_FZ1 `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB_FZ1 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBG_TIM2_STOP`"]
        pub type DBG_TIM2_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM2_STOP`"]
        pub struct DBG_TIM2_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM2_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM3_STOP`"]
        pub type DBG_TIM3_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM3_STOP`"]
        pub struct DBG_TIM3_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM3_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_RTC_STOP`"]
        pub type DBG_RTC_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_RTC_STOP`"]
        pub struct DBG_RTC_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_RTC_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_WWDG_STOP`"]
        pub type DBG_WWDG_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_WWDG_STOP`"]
        pub struct DBG_WWDG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_WWDG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_IWDG_STOP`"]
        pub type DBG_IWDG_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_IWDG_STOP`"]
        pub struct DBG_IWDG_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_IWDG_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_I2C1_STOP`"]
        pub type DBG_I2C1_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_I2C1_STOP`"]
        pub struct DBG_I2C1_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_I2C1_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_LPTIM2_STOP`"]
        pub type DBG_LPTIM2_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_LPTIM2_STOP`"]
        pub struct DBG_LPTIM2_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_LPTIM2_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_LPTIM1_STOP`"]
        pub type DBG_LPTIM1_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_LPTIM1_STOP`"]
        pub struct DBG_LPTIM1_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_LPTIM1_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - TIM2 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim2_stop(&self) -> DBG_TIM2_STOP_R {
                DBG_TIM2_STOP_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TIM3 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim3_stop(&self) -> DBG_TIM3_STOP_R {
                DBG_TIM3_STOP_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 10 - RTC counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_rtc_stop(&self) -> DBG_RTC_STOP_R {
                DBG_RTC_STOP_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - Window watchdog counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_wwdg_stop(&self) -> DBG_WWDG_STOP_R {
                DBG_WWDG_STOP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 12 - Independent watchdog counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_iwdg_stop(&self) -> DBG_IWDG_STOP_R {
                DBG_IWDG_STOP_R::new(((self.bits >> 12) & 0x01) != 0)
            }
            #[doc = "Bit 21 - I2C1 SMBUS timeout counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_i2c1_stop(&self) -> DBG_I2C1_STOP_R {
                DBG_I2C1_STOP_R::new(((self.bits >> 21) & 0x01) != 0)
            }
            #[doc = "Bit 30 - LPTIM2 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_lptim2_stop(&self) -> DBG_LPTIM2_STOP_R {
                DBG_LPTIM2_STOP_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - LPTIM1 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_lptim1_stop(&self) -> DBG_LPTIM1_STOP_R {
                DBG_LPTIM1_STOP_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TIM2 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim2_stop(&mut self) -> DBG_TIM2_STOP_W {
                DBG_TIM2_STOP_W { w: self }
            }
            #[doc = "Bit 1 - TIM3 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim3_stop(&mut self) -> DBG_TIM3_STOP_W {
                DBG_TIM3_STOP_W { w: self }
            }
            #[doc = "Bit 10 - RTC counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_rtc_stop(&mut self) -> DBG_RTC_STOP_W {
                DBG_RTC_STOP_W { w: self }
            }
            #[doc = "Bit 11 - Window watchdog counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_wwdg_stop(&mut self) -> DBG_WWDG_STOP_W {
                DBG_WWDG_STOP_W { w: self }
            }
            #[doc = "Bit 12 - Independent watchdog counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_iwdg_stop(&mut self) -> DBG_IWDG_STOP_W {
                DBG_IWDG_STOP_W { w: self }
            }
            #[doc = "Bit 21 - I2C1 SMBUS timeout counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_i2c1_stop(&mut self) -> DBG_I2C1_STOP_W {
                DBG_I2C1_STOP_W { w: self }
            }
            #[doc = "Bit 30 - LPTIM2 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_lptim2_stop(&mut self) -> DBG_LPTIM2_STOP_W {
                DBG_LPTIM2_STOP_W { w: self }
            }
            #[doc = "Bit 31 - LPTIM1 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_lptim1_stop(&mut self) -> DBG_LPTIM1_STOP_W {
                DBG_LPTIM1_STOP_W { w: self }
            }
        }
    }
    #[doc = "Debug MCU APB1 freeze register 2\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [apb_fz2](apb_fz2) module"]
    pub type APB_FZ2 = crate::Reg<u32, _APB_FZ2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _APB_FZ2;
    #[doc = "`read()` method returns [apb_fz2::R](apb_fz2::R) reader structure"]
    impl crate::Readable for APB_FZ2 {}
    #[doc = "`write(|w| ..)` method takes [apb_fz2::W](apb_fz2::W) writer structure"]
    impl crate::Writable for APB_FZ2 {}
    #[doc = "Debug MCU APB1 freeze register 2"]
    pub mod apb_fz2 {
        #[doc = "Reader of register APB_FZ2"]
        pub type R = crate::R<u32, super::APB_FZ2>;
        #[doc = "Writer for register APB_FZ2"]
        pub type W = crate::W<u32, super::APB_FZ2>;
        #[doc = "Register APB_FZ2 `reset()`'s with value 0"]
        impl crate::ResetValue for super::APB_FZ2 {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DBG_TIM1_STOP`"]
        pub type DBG_TIM1_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM1_STOP`"]
        pub struct DBG_TIM1_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM1_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM14_STOP`"]
        pub type DBG_TIM14_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM14_STOP`"]
        pub struct DBG_TIM14_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM14_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM16_STOP`"]
        pub type DBG_TIM16_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM16_STOP`"]
        pub struct DBG_TIM16_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM16_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 17)) | (((value as u32) & 0x01) << 17);
                self.w
            }
        }
        #[doc = "Reader of field `DBG_TIM17_STOP`"]
        pub type DBG_TIM17_STOP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DBG_TIM17_STOP`"]
        pub struct DBG_TIM17_STOP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DBG_TIM17_STOP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 18)) | (((value as u32) & 0x01) << 18);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 11 - TIM1 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim1_stop(&self) -> DBG_TIM1_STOP_R {
                DBG_TIM1_STOP_R::new(((self.bits >> 11) & 0x01) != 0)
            }
            #[doc = "Bit 15 - DBG_TIM14_STOP"]
            #[inline(always)]
            pub fn dbg_tim14_stop(&self) -> DBG_TIM14_STOP_R {
                DBG_TIM14_STOP_R::new(((self.bits >> 15) & 0x01) != 0)
            }
            #[doc = "Bit 17 - DBG_TIM16_STOP"]
            #[inline(always)]
            pub fn dbg_tim16_stop(&self) -> DBG_TIM16_STOP_R {
                DBG_TIM16_STOP_R::new(((self.bits >> 17) & 0x01) != 0)
            }
            #[doc = "Bit 18 - DBG_TIM17_STOP"]
            #[inline(always)]
            pub fn dbg_tim17_stop(&self) -> DBG_TIM17_STOP_R {
                DBG_TIM17_STOP_R::new(((self.bits >> 18) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 11 - TIM1 counter stopped when core is halted"]
            #[inline(always)]
            pub fn dbg_tim1_stop(&mut self) -> DBG_TIM1_STOP_W {
                DBG_TIM1_STOP_W { w: self }
            }
            #[doc = "Bit 15 - DBG_TIM14_STOP"]
            #[inline(always)]
            pub fn dbg_tim14_stop(&mut self) -> DBG_TIM14_STOP_W {
                DBG_TIM14_STOP_W { w: self }
            }
            #[doc = "Bit 17 - DBG_TIM16_STOP"]
            #[inline(always)]
            pub fn dbg_tim16_stop(&mut self) -> DBG_TIM16_STOP_W {
                DBG_TIM16_STOP_W { w: self }
            }
            #[doc = "Bit 18 - DBG_TIM17_STOP"]
            #[inline(always)]
            pub fn dbg_tim17_stop(&mut self) -> DBG_TIM17_STOP_W {
                DBG_TIM17_STOP_W { w: self }
            }
        }
    }
}
#[doc = "Nested vectored interrupt controller"]
pub struct NVIC_STIR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for NVIC_STIR {}
impl NVIC_STIR {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const nvic_stir::RegisterBlock {
        0xe000_ef00 as *const _
    }
}
impl Deref for NVIC_STIR {
    type Target = nvic_stir::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*NVIC_STIR::ptr() }
    }
}
#[doc = "Nested vectored interrupt controller"]
pub mod nvic_stir {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Software trigger interrupt register"]
        pub stir: STIR,
    }
    #[doc = "Software trigger interrupt register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [stir](stir) module"]
    pub type STIR = crate::Reg<u32, _STIR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _STIR;
    #[doc = "`read()` method returns [stir::R](stir::R) reader structure"]
    impl crate::Readable for STIR {}
    #[doc = "`write(|w| ..)` method takes [stir::W](stir::W) writer structure"]
    impl crate::Writable for STIR {}
    #[doc = "Software trigger interrupt register"]
    pub mod stir {
        #[doc = "Reader of register STIR"]
        pub type R = crate::R<u32, super::STIR>;
        #[doc = "Writer for register STIR"]
        pub type W = crate::W<u32, super::STIR>;
        #[doc = "Register STIR `reset()`'s with value 0"]
        impl crate::ResetValue for super::STIR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `INTID`"]
        pub type INTID_R = crate::R<u16, u16>;
        #[doc = "Write proxy for field `INTID`"]
        pub struct INTID_W<'a> {
            w: &'a mut W,
        }
        impl<'a> INTID_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u16) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01ff) | ((value as u32) & 0x01ff);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 0:8 - Software generated interrupt ID"]
            #[inline(always)]
            pub fn intid(&self) -> INTID_R {
                INTID_R::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:8 - Software generated interrupt ID"]
            #[inline(always)]
            pub fn intid(&mut self) -> INTID_W {
                INTID_W { w: self }
            }
        }
    }
}
#[doc = "System control block ACTLR"]
pub struct SCB_ACTRL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SCB_ACTRL {}
impl SCB_ACTRL {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const scb_actrl::RegisterBlock {
        0xe000_e008 as *const _
    }
}
impl Deref for SCB_ACTRL {
    type Target = scb_actrl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SCB_ACTRL::ptr() }
    }
}
#[doc = "System control block ACTLR"]
pub mod scb_actrl {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Auxiliary control register"]
        pub actrl: ACTRL,
    }
    #[doc = "Auxiliary control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [actrl](actrl) module"]
    pub type ACTRL = crate::Reg<u32, _ACTRL>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ACTRL;
    #[doc = "`read()` method returns [actrl::R](actrl::R) reader structure"]
    impl crate::Readable for ACTRL {}
    #[doc = "`write(|w| ..)` method takes [actrl::W](actrl::W) writer structure"]
    impl crate::Writable for ACTRL {}
    #[doc = "Auxiliary control register"]
    pub mod actrl {
        #[doc = "Reader of register ACTRL"]
        pub type R = crate::R<u32, super::ACTRL>;
        #[doc = "Writer for register ACTRL"]
        pub type W = crate::W<u32, super::ACTRL>;
        #[doc = "Register ACTRL `reset()`'s with value 0"]
        impl crate::ResetValue for super::ACTRL {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `DISMCYCINT`"]
        pub type DISMCYCINT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISMCYCINT`"]
        pub struct DISMCYCINT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISMCYCINT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `DISDEFWBUF`"]
        pub type DISDEFWBUF_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISDEFWBUF`"]
        pub struct DISDEFWBUF_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISDEFWBUF_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `DISFOLD`"]
        pub type DISFOLD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISFOLD`"]
        pub struct DISFOLD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISFOLD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `DISFPCA`"]
        pub type DISFPCA_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISFPCA`"]
        pub struct DISFPCA_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISFPCA_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `DISOOFP`"]
        pub type DISOOFP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DISOOFP`"]
        pub struct DISOOFP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DISOOFP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - DISMCYCINT"]
            #[inline(always)]
            pub fn dismcycint(&self) -> DISMCYCINT_R {
                DISMCYCINT_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - DISDEFWBUF"]
            #[inline(always)]
            pub fn disdefwbuf(&self) -> DISDEFWBUF_R {
                DISDEFWBUF_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DISFOLD"]
            #[inline(always)]
            pub fn disfold(&self) -> DISFOLD_R {
                DISFOLD_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 8 - DISFPCA"]
            #[inline(always)]
            pub fn disfpca(&self) -> DISFPCA_R {
                DISFPCA_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - DISOOFP"]
            #[inline(always)]
            pub fn disoofp(&self) -> DISOOFP_R {
                DISOOFP_R::new(((self.bits >> 9) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DISMCYCINT"]
            #[inline(always)]
            pub fn dismcycint(&mut self) -> DISMCYCINT_W {
                DISMCYCINT_W { w: self }
            }
            #[doc = "Bit 1 - DISDEFWBUF"]
            #[inline(always)]
            pub fn disdefwbuf(&mut self) -> DISDEFWBUF_W {
                DISDEFWBUF_W { w: self }
            }
            #[doc = "Bit 2 - DISFOLD"]
            #[inline(always)]
            pub fn disfold(&mut self) -> DISFOLD_W {
                DISFOLD_W { w: self }
            }
            #[doc = "Bit 8 - DISFPCA"]
            #[inline(always)]
            pub fn disfpca(&mut self) -> DISFPCA_W {
                DISFPCA_W { w: self }
            }
            #[doc = "Bit 9 - DISOOFP"]
            #[inline(always)]
            pub fn disoofp(&mut self) -> DISOOFP_W {
                DISOOFP_W { w: self }
            }
        }
    }
}
#[doc = "Floating point unit CPACR"]
pub struct FPU_CPACR {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FPU_CPACR {}
impl FPU_CPACR {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fpu_cpacr::RegisterBlock {
        0xe000_ed88 as *const _
    }
}
impl Deref for FPU_CPACR {
    type Target = fpu_cpacr::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FPU_CPACR::ptr() }
    }
}
#[doc = "Floating point unit CPACR"]
pub mod fpu_cpacr {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Coprocessor access control register"]
        pub cpacr: CPACR,
    }
    #[doc = "Coprocessor access control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cpacr](cpacr) module"]
    pub type CPACR = crate::Reg<u32, _CPACR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _CPACR;
    #[doc = "`read()` method returns [cpacr::R](cpacr::R) reader structure"]
    impl crate::Readable for CPACR {}
    #[doc = "`write(|w| ..)` method takes [cpacr::W](cpacr::W) writer structure"]
    impl crate::Writable for CPACR {}
    #[doc = "Coprocessor access control register"]
    pub mod cpacr {
        #[doc = "Reader of register CPACR"]
        pub type R = crate::R<u32, super::CPACR>;
        #[doc = "Writer for register CPACR"]
        pub type W = crate::W<u32, super::CPACR>;
        #[doc = "Register CPACR `reset()`'s with value 0"]
        impl crate::ResetValue for super::CPACR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `CP`"]
        pub type CP_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `CP`"]
        pub struct CP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> CP_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x0f << 20)) | (((value as u32) & 0x0f) << 20);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 20:23 - CP"]
            #[inline(always)]
            pub fn cp(&self) -> CP_R {
                CP_R::new(((self.bits >> 20) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 20:23 - CP"]
            #[inline(always)]
            pub fn cp(&mut self) -> CP_W {
                CP_W { w: self }
            }
        }
    }
}
#[doc = "Floting point unit"]
pub struct FPU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FPU {}
impl FPU {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fpu::RegisterBlock {
        0xe000_ef34 as *const _
    }
}
impl Deref for FPU {
    type Target = fpu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*FPU::ptr() }
    }
}
#[doc = "Floting point unit"]
pub mod fpu {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        #[doc = "0x00 - Floating-point context control register"]
        pub fpccr: FPCCR,
        #[doc = "0x04 - Floating-point context address register"]
        pub fpcar: FPCAR,
        #[doc = "0x08 - Floating-point status control register"]
        pub fpscr: FPSCR,
    }
    #[doc = "Floating-point context control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fpccr](fpccr) module"]
    pub type FPCCR = crate::Reg<u32, _FPCCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FPCCR;
    #[doc = "`read()` method returns [fpccr::R](fpccr::R) reader structure"]
    impl crate::Readable for FPCCR {}
    #[doc = "`write(|w| ..)` method takes [fpccr::W](fpccr::W) writer structure"]
    impl crate::Writable for FPCCR {}
    #[doc = "Floating-point context control register"]
    pub mod fpccr {
        #[doc = "Reader of register FPCCR"]
        pub type R = crate::R<u32, super::FPCCR>;
        #[doc = "Writer for register FPCCR"]
        pub type W = crate::W<u32, super::FPCCR>;
        #[doc = "Register FPCCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::FPCCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `LSPACT`"]
        pub type LSPACT_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSPACT`"]
        pub struct LSPACT_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSPACT_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `USER`"]
        pub type USER_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `USER`"]
        pub struct USER_W<'a> {
            w: &'a mut W,
        }
        impl<'a> USER_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `THREAD`"]
        pub type THREAD_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `THREAD`"]
        pub struct THREAD_W<'a> {
            w: &'a mut W,
        }
        impl<'a> THREAD_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `HFRDY`"]
        pub type HFRDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `HFRDY`"]
        pub struct HFRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> HFRDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `MMRDY`"]
        pub type MMRDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MMRDY`"]
        pub struct MMRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MMRDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 5)) | (((value as u32) & 0x01) << 5);
                self.w
            }
        }
        #[doc = "Reader of field `BFRDY`"]
        pub type BFRDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `BFRDY`"]
        pub struct BFRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> BFRDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 6)) | (((value as u32) & 0x01) << 6);
                self.w
            }
        }
        #[doc = "Reader of field `MONRDY`"]
        pub type MONRDY_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `MONRDY`"]
        pub struct MONRDY_W<'a> {
            w: &'a mut W,
        }
        impl<'a> MONRDY_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
                self.w
            }
        }
        #[doc = "Reader of field `LSPEN`"]
        pub type LSPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `LSPEN`"]
        pub struct LSPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> LSPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `ASPEN`"]
        pub type ASPEN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `ASPEN`"]
        pub struct ASPEN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ASPEN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - LSPACT"]
            #[inline(always)]
            pub fn lspact(&self) -> LSPACT_R {
                LSPACT_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - USER"]
            #[inline(always)]
            pub fn user(&self) -> USER_R {
                USER_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 3 - THREAD"]
            #[inline(always)]
            pub fn thread(&self) -> THREAD_R {
                THREAD_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - HFRDY"]
            #[inline(always)]
            pub fn hfrdy(&self) -> HFRDY_R {
                HFRDY_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - MMRDY"]
            #[inline(always)]
            pub fn mmrdy(&self) -> MMRDY_R {
                MMRDY_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - BFRDY"]
            #[inline(always)]
            pub fn bfrdy(&self) -> BFRDY_R {
                BFRDY_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 8 - MONRDY"]
            #[inline(always)]
            pub fn monrdy(&self) -> MONRDY_R {
                MONRDY_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 30 - LSPEN"]
            #[inline(always)]
            pub fn lspen(&self) -> LSPEN_R {
                LSPEN_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - ASPEN"]
            #[inline(always)]
            pub fn aspen(&self) -> ASPEN_R {
                ASPEN_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - LSPACT"]
            #[inline(always)]
            pub fn lspact(&mut self) -> LSPACT_W {
                LSPACT_W { w: self }
            }
            #[doc = "Bit 1 - USER"]
            #[inline(always)]
            pub fn user(&mut self) -> USER_W {
                USER_W { w: self }
            }
            #[doc = "Bit 3 - THREAD"]
            #[inline(always)]
            pub fn thread(&mut self) -> THREAD_W {
                THREAD_W { w: self }
            }
            #[doc = "Bit 4 - HFRDY"]
            #[inline(always)]
            pub fn hfrdy(&mut self) -> HFRDY_W {
                HFRDY_W { w: self }
            }
            #[doc = "Bit 5 - MMRDY"]
            #[inline(always)]
            pub fn mmrdy(&mut self) -> MMRDY_W {
                MMRDY_W { w: self }
            }
            #[doc = "Bit 6 - BFRDY"]
            #[inline(always)]
            pub fn bfrdy(&mut self) -> BFRDY_W {
                BFRDY_W { w: self }
            }
            #[doc = "Bit 8 - MONRDY"]
            #[inline(always)]
            pub fn monrdy(&mut self) -> MONRDY_W {
                MONRDY_W { w: self }
            }
            #[doc = "Bit 30 - LSPEN"]
            #[inline(always)]
            pub fn lspen(&mut self) -> LSPEN_W {
                LSPEN_W { w: self }
            }
            #[doc = "Bit 31 - ASPEN"]
            #[inline(always)]
            pub fn aspen(&mut self) -> ASPEN_W {
                ASPEN_W { w: self }
            }
        }
    }
    #[doc = "Floating-point context address register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fpcar](fpcar) module"]
    pub type FPCAR = crate::Reg<u32, _FPCAR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FPCAR;
    #[doc = "`read()` method returns [fpcar::R](fpcar::R) reader structure"]
    impl crate::Readable for FPCAR {}
    #[doc = "`write(|w| ..)` method takes [fpcar::W](fpcar::W) writer structure"]
    impl crate::Writable for FPCAR {}
    #[doc = "Floating-point context address register"]
    pub mod fpcar {
        #[doc = "Reader of register FPCAR"]
        pub type R = crate::R<u32, super::FPCAR>;
        #[doc = "Writer for register FPCAR"]
        pub type W = crate::W<u32, super::FPCAR>;
        #[doc = "Register FPCAR `reset()`'s with value 0"]
        impl crate::ResetValue for super::FPCAR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `ADDRESS`"]
        pub type ADDRESS_R = crate::R<u32, u32>;
        #[doc = "Write proxy for field `ADDRESS`"]
        pub struct ADDRESS_W<'a> {
            w: &'a mut W,
        }
        impl<'a> ADDRESS_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u32) -> &'a mut W {
                self.w.bits =
                    (self.w.bits & !(0x1fff_ffff << 3)) | (((value as u32) & 0x1fff_ffff) << 3);
                self.w
            }
        }
        impl R {
            #[doc = "Bits 3:31 - Location of unpopulated floating-point"]
            #[inline(always)]
            pub fn address(&self) -> ADDRESS_R {
                ADDRESS_R::new(((self.bits >> 3) & 0x1fff_ffff) as u32)
            }
        }
        impl W {
            #[doc = "Bits 3:31 - Location of unpopulated floating-point"]
            #[inline(always)]
            pub fn address(&mut self) -> ADDRESS_W {
                ADDRESS_W { w: self }
            }
        }
    }
    #[doc = "Floating-point status control register\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [fpscr](fpscr) module"]
    pub type FPSCR = crate::Reg<u32, _FPSCR>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _FPSCR;
    #[doc = "`read()` method returns [fpscr::R](fpscr::R) reader structure"]
    impl crate::Readable for FPSCR {}
    #[doc = "`write(|w| ..)` method takes [fpscr::W](fpscr::W) writer structure"]
    impl crate::Writable for FPSCR {}
    #[doc = "Floating-point status control register"]
    pub mod fpscr {
        #[doc = "Reader of register FPSCR"]
        pub type R = crate::R<u32, super::FPSCR>;
        #[doc = "Writer for register FPSCR"]
        pub type W = crate::W<u32, super::FPSCR>;
        #[doc = "Register FPSCR `reset()`'s with value 0"]
        impl crate::ResetValue for super::FPSCR {
            type Type = u32;
            #[inline(always)]
            fn reset_value() -> Self::Type {
                0
            }
        }
        #[doc = "Reader of field `IOC`"]
        pub type IOC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IOC`"]
        pub struct IOC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IOC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !0x01) | ((value as u32) & 0x01);
                self.w
            }
        }
        #[doc = "Reader of field `DZC`"]
        pub type DZC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DZC`"]
        pub struct DZC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DZC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 1)) | (((value as u32) & 0x01) << 1);
                self.w
            }
        }
        #[doc = "Reader of field `OFC`"]
        pub type OFC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `OFC`"]
        pub struct OFC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> OFC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 2)) | (((value as u32) & 0x01) << 2);
                self.w
            }
        }
        #[doc = "Reader of field `UFC`"]
        pub type UFC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `UFC`"]
        pub struct UFC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> UFC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 3)) | (((value as u32) & 0x01) << 3);
                self.w
            }
        }
        #[doc = "Reader of field `IXC`"]
        pub type IXC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IXC`"]
        pub struct IXC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IXC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 4)) | (((value as u32) & 0x01) << 4);
                self.w
            }
        }
        #[doc = "Reader of field `IDC`"]
        pub type IDC_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `IDC`"]
        pub struct IDC_W<'a> {
            w: &'a mut W,
        }
        impl<'a> IDC_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 7)) | (((value as u32) & 0x01) << 7);
                self.w
            }
        }
        #[doc = "Reader of field `RMode`"]
        pub type RMODE_R = crate::R<u8, u8>;
        #[doc = "Write proxy for field `RMode`"]
        pub struct RMODE_W<'a> {
            w: &'a mut W,
        }
        impl<'a> RMODE_W<'a> {
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub unsafe fn bits(self, value: u8) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
                self.w
            }
        }
        #[doc = "Reader of field `FZ`"]
        pub type FZ_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `FZ`"]
        pub struct FZ_W<'a> {
            w: &'a mut W,
        }
        impl<'a> FZ_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 24)) | (((value as u32) & 0x01) << 24);
                self.w
            }
        }
        #[doc = "Reader of field `DN`"]
        pub type DN_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `DN`"]
        pub struct DN_W<'a> {
            w: &'a mut W,
        }
        impl<'a> DN_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 25)) | (((value as u32) & 0x01) << 25);
                self.w
            }
        }
        #[doc = "Reader of field `AHP`"]
        pub type AHP_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `AHP`"]
        pub struct AHP_W<'a> {
            w: &'a mut W,
        }
        impl<'a> AHP_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 26)) | (((value as u32) & 0x01) << 26);
                self.w
            }
        }
        #[doc = "Reader of field `V`"]
        pub type V_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `V`"]
        pub struct V_W<'a> {
            w: &'a mut W,
        }
        impl<'a> V_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 28)) | (((value as u32) & 0x01) << 28);
                self.w
            }
        }
        #[doc = "Reader of field `C`"]
        pub type C_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `C`"]
        pub struct C_W<'a> {
            w: &'a mut W,
        }
        impl<'a> C_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 29)) | (((value as u32) & 0x01) << 29);
                self.w
            }
        }
        #[doc = "Reader of field `Z`"]
        pub type Z_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `Z`"]
        pub struct Z_W<'a> {
            w: &'a mut W,
        }
        impl<'a> Z_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 30)) | (((value as u32) & 0x01) << 30);
                self.w
            }
        }
        #[doc = "Reader of field `N`"]
        pub type N_R = crate::R<bool, bool>;
        #[doc = "Write proxy for field `N`"]
        pub struct N_W<'a> {
            w: &'a mut W,
        }
        impl<'a> N_W<'a> {
            #[doc = r"Sets the field bit"]
            #[inline(always)]
            pub fn set_bit(self) -> &'a mut W {
                self.bit(true)
            }
            #[doc = r"Clears the field bit"]
            #[inline(always)]
            pub fn clear_bit(self) -> &'a mut W {
                self.bit(false)
            }
            #[doc = r"Writes raw bits to the field"]
            #[inline(always)]
            pub fn bit(self, value: bool) -> &'a mut W {
                self.w.bits = (self.w.bits & !(0x01 << 31)) | (((value as u32) & 0x01) << 31);
                self.w
            }
        }
        impl R {
            #[doc = "Bit 0 - Invalid operation cumulative exception bit"]
            #[inline(always)]
            pub fn ioc(&self) -> IOC_R {
                IOC_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - Division by zero cumulative exception bit."]
            #[inline(always)]
            pub fn dzc(&self) -> DZC_R {
                DZC_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - Overflow cumulative exception bit"]
            #[inline(always)]
            pub fn ofc(&self) -> OFC_R {
                OFC_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - Underflow cumulative exception bit"]
            #[inline(always)]
            pub fn ufc(&self) -> UFC_R {
                UFC_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - Inexact cumulative exception bit"]
            #[inline(always)]
            pub fn ixc(&self) -> IXC_R {
                IXC_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 7 - Input denormal cumulative exception bit."]
            #[inline(always)]
            pub fn idc(&self) -> IDC_R {
                IDC_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bits 22:23 - Rounding Mode control field"]
            #[inline(always)]
            pub fn rmode(&self) -> RMODE_R {
                RMODE_R::new(((self.bits >> 22) & 0x03) as u8)
            }
            #[doc = "Bit 24 - Flush-to-zero mode control bit:"]
            #[inline(always)]
            pub fn fz(&self) -> FZ_R {
                FZ_R::new(((self.bits >> 24) & 0x01) != 0)
            }
            #[doc = "Bit 25 - Default NaN mode control bit"]
            #[inline(always)]
            pub fn dn(&self) -> DN_R {
                DN_R::new(((self.bits >> 25) & 0x01) != 0)
            }
            #[doc = "Bit 26 - Alternative half-precision control bit"]
            #[inline(always)]
            pub fn ahp(&self) -> AHP_R {
                AHP_R::new(((self.bits >> 26) & 0x01) != 0)
            }
            #[doc = "Bit 28 - Overflow condition code flag"]
            #[inline(always)]
            pub fn v(&self) -> V_R {
                V_R::new(((self.bits >> 28) & 0x01) != 0)
            }
            #[doc = "Bit 29 - Carry condition code flag"]
            #[inline(always)]
            pub fn c(&self) -> C_R {
                C_R::new(((self.bits >> 29) & 0x01) != 0)
            }
            #[doc = "Bit 30 - Zero condition code flag"]
            #[inline(always)]
            pub fn z(&self) -> Z_R {
                Z_R::new(((self.bits >> 30) & 0x01) != 0)
            }
            #[doc = "Bit 31 - Negative condition code flag"]
            #[inline(always)]
            pub fn n(&self) -> N_R {
                N_R::new(((self.bits >> 31) & 0x01) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Invalid operation cumulative exception bit"]
            #[inline(always)]
            pub fn ioc(&mut self) -> IOC_W {
                IOC_W { w: self }
            }
            #[doc = "Bit 1 - Division by zero cumulative exception bit."]
            #[inline(always)]
            pub fn dzc(&mut self) -> DZC_W {
                DZC_W { w: self }
            }
            #[doc = "Bit 2 - Overflow cumulative exception bit"]
            #[inline(always)]
            pub fn ofc(&mut self) -> OFC_W {
                OFC_W { w: self }
            }
            #[doc = "Bit 3 - Underflow cumulative exception bit"]
            #[inline(always)]
            pub fn ufc(&mut self) -> UFC_W {
                UFC_W { w: self }
            }
            #[doc = "Bit 4 - Inexact cumulative exception bit"]
            #[inline(always)]
            pub fn ixc(&mut self) -> IXC_W {
                IXC_W { w: self }
            }
            #[doc = "Bit 7 - Input denormal cumulative exception bit."]
            #[inline(always)]
            pub fn idc(&mut self) -> IDC_W {
                IDC_W { w: self }
            }
            #[doc = "Bits 22:23 - Rounding Mode control field"]
            #[inline(always)]
            pub fn rmode(&mut self) -> RMODE_W {
                RMODE_W { w: self }
            }
            #[doc = "Bit 24 - Flush-to-zero mode control bit:"]
            #[inline(always)]
            pub fn fz(&mut self) -> FZ_W {
                FZ_W { w: self }
            }
            #[doc = "Bit 25 - Default NaN mode control bit"]
            #[inline(always)]
            pub fn dn(&mut self) -> DN_W {
                DN_W { w: self }
            }
            #[doc = "Bit 26 - Alternative half-precision control bit"]
            #[inline(always)]
            pub fn ahp(&mut self) -> AHP_W {
                AHP_W { w: self }
            }
            #[doc = "Bit 28 - Overflow condition code flag"]
            #[inline(always)]
            pub fn v(&mut self) -> V_W {
                V_W { w: self }
            }
            #[doc = "Bit 29 - Carry condition code flag"]
            #[inline(always)]
            pub fn c(&mut self) -> C_W {
                C_W { w: self }
            }
            #[doc = "Bit 30 - Zero condition code flag"]
            #[inline(always)]
            pub fn z(&mut self) -> Z_W {
                Z_W { w: self }
            }
            #[doc = "Bit 31 - Negative condition code flag"]
            #[inline(always)]
            pub fn n(&mut self) -> N_W {
                N_W { w: self }
            }
        }
    }
}
#[doc = "System configuration controller"]
pub struct SYSCFG_ITLINE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCFG_ITLINE {}
impl SYSCFG_ITLINE {
    #[doc = r"Returns a pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const syscfg_itline::RegisterBlock {
        0x4001_0080 as *const _
    }
}
impl Deref for SYSCFG_ITLINE {
    type Target = syscfg_itline::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*SYSCFG_ITLINE::ptr() }
    }
}
#[doc = "System configuration controller"]
pub mod syscfg_itline {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        _reserved0: [u8; 128usize],
        #[doc = "0x80 - interrupt line 0 status register"]
        pub itline0: ITLINE0,
        #[doc = "0x84 - interrupt line 1 status register"]
        pub itline1: ITLINE1,
        #[doc = "0x88 - interrupt line 2 status register"]
        pub itline2: ITLINE2,
        #[doc = "0x8c - interrupt line 3 status register"]
        pub itline3: ITLINE3,
        #[doc = "0x90 - interrupt line 4 status register"]
        pub itline4: ITLINE4,
        #[doc = "0x94 - interrupt line 5 status register"]
        pub itline5: ITLINE5,
        #[doc = "0x98 - interrupt line 6 status register"]
        pub itline6: ITLINE6,
        #[doc = "0x9c - interrupt line 7 status register"]
        pub itline7: ITLINE7,
        _reserved8: [u8; 4usize],
        #[doc = "0xa4 - interrupt line 9 status register"]
        pub itline9: ITLINE9,
        #[doc = "0xa8 - interrupt line 10 status register"]
        pub itline10: ITLINE10,
        #[doc = "0xac - interrupt line 11 status register"]
        pub itline11: ITLINE11,
        #[doc = "0xb0 - interrupt line 12 status register"]
        pub itline12: ITLINE12,
        #[doc = "0xb4 - interrupt line 13 status register"]
        pub itline13: ITLINE13,
        #[doc = "0xb8 - interrupt line 14 status register"]
        pub itline14: ITLINE14,
        #[doc = "0xbc - interrupt line 15 status register"]
        pub itline15: ITLINE15,
        #[doc = "0xc0 - interrupt line 16 status register"]
        pub itline16: ITLINE16,
        #[doc = "0xc4 - interrupt line 17 status register"]
        pub itline17: ITLINE17,
        #[doc = "0xc8 - interrupt line 18 status register"]
        pub itline18: ITLINE18,
        #[doc = "0xcc - interrupt line 19 status register"]
        pub itline19: ITLINE19,
        _reserved19: [u8; 4usize],
        #[doc = "0xd4 - interrupt line 21 status register"]
        pub itline21: ITLINE21,
        #[doc = "0xd8 - interrupt line 22 status register"]
        pub itline22: ITLINE22,
        #[doc = "0xdc - interrupt line 23 status register"]
        pub itline23: ITLINE23,
        #[doc = "0xe0 - interrupt line 24 status register"]
        pub itline24: ITLINE24,
        #[doc = "0xe4 - interrupt line 25 status register"]
        pub itline25: ITLINE25,
        #[doc = "0xe8 - interrupt line 26 status register"]
        pub itline26: ITLINE26,
        #[doc = "0xec - interrupt line 27 status register"]
        pub itline27: ITLINE27,
        #[doc = "0xf0 - interrupt line 28 status register"]
        pub itline28: ITLINE28,
        #[doc = "0xf4 - interrupt line 29 status register"]
        pub itline29: ITLINE29,
    }
    #[doc = "interrupt line 0 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline0](itline0) module"]
    pub type ITLINE0 = crate::Reg<u32, _ITLINE0>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE0;
    #[doc = "`read()` method returns [itline0::R](itline0::R) reader structure"]
    impl crate::Readable for ITLINE0 {}
    #[doc = "interrupt line 0 status register"]
    pub mod itline0 {
        #[doc = "Reader of register ITLINE0"]
        pub type R = crate::R<u32, super::ITLINE0>;
        #[doc = "Reader of field `WWDG`"]
        pub type WWDG_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - Window watchdog interrupt pending flag"]
            #[inline(always)]
            pub fn wwdg(&self) -> WWDG_R {
                WWDG_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 1 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline1](itline1) module"]
    pub type ITLINE1 = crate::Reg<u32, _ITLINE1>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE1;
    #[doc = "`read()` method returns [itline1::R](itline1::R) reader structure"]
    impl crate::Readable for ITLINE1 {}
    #[doc = "interrupt line 1 status register"]
    pub mod itline1 {
        #[doc = "Reader of register ITLINE1"]
        pub type R = crate::R<u32, super::ITLINE1>;
        #[doc = "Reader of field `PVDOUT`"]
        pub type PVDOUT_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - PVD supply monitoring interrupt request pending (EXTI line 16)."]
            #[inline(always)]
            pub fn pvdout(&self) -> PVDOUT_R {
                PVDOUT_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 2 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline2](itline2) module"]
    pub type ITLINE2 = crate::Reg<u32, _ITLINE2>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE2;
    #[doc = "`read()` method returns [itline2::R](itline2::R) reader structure"]
    impl crate::Readable for ITLINE2 {}
    #[doc = "interrupt line 2 status register"]
    pub mod itline2 {
        #[doc = "Reader of register ITLINE2"]
        pub type R = crate::R<u32, super::ITLINE2>;
        #[doc = "Reader of field `TAMP`"]
        pub type TAMP_R = crate::R<bool, bool>;
        #[doc = "Reader of field `RTC`"]
        pub type RTC_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - TAMP"]
            #[inline(always)]
            pub fn tamp(&self) -> TAMP_R {
                TAMP_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - RTC"]
            #[inline(always)]
            pub fn rtc(&self) -> RTC_R {
                RTC_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 3 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline3](itline3) module"]
    pub type ITLINE3 = crate::Reg<u32, _ITLINE3>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE3;
    #[doc = "`read()` method returns [itline3::R](itline3::R) reader structure"]
    impl crate::Readable for ITLINE3 {}
    #[doc = "interrupt line 3 status register"]
    pub mod itline3 {
        #[doc = "Reader of register ITLINE3"]
        pub type R = crate::R<u32, super::ITLINE3>;
        #[doc = "Reader of field `FLASH_ITF`"]
        pub type FLASH_ITF_R = crate::R<bool, bool>;
        #[doc = "Reader of field `FLASH_ECC`"]
        pub type FLASH_ECC_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - FLASH_ITF"]
            #[inline(always)]
            pub fn flash_itf(&self) -> FLASH_ITF_R {
                FLASH_ITF_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - FLASH_ECC"]
            #[inline(always)]
            pub fn flash_ecc(&self) -> FLASH_ECC_R {
                FLASH_ECC_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 4 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline4](itline4) module"]
    pub type ITLINE4 = crate::Reg<u32, _ITLINE4>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE4;
    #[doc = "`read()` method returns [itline4::R](itline4::R) reader structure"]
    impl crate::Readable for ITLINE4 {}
    #[doc = "interrupt line 4 status register"]
    pub mod itline4 {
        #[doc = "Reader of register ITLINE4"]
        pub type R = crate::R<u32, super::ITLINE4>;
        #[doc = "Reader of field `RCC`"]
        pub type RCC_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - RCC"]
            #[inline(always)]
            pub fn rcc(&self) -> RCC_R {
                RCC_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 5 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline5](itline5) module"]
    pub type ITLINE5 = crate::Reg<u32, _ITLINE5>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE5;
    #[doc = "`read()` method returns [itline5::R](itline5::R) reader structure"]
    impl crate::Readable for ITLINE5 {}
    #[doc = "interrupt line 5 status register"]
    pub mod itline5 {
        #[doc = "Reader of register ITLINE5"]
        pub type R = crate::R<u32, super::ITLINE5>;
        #[doc = "Reader of field `EXTI0`"]
        pub type EXTI0_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI1`"]
        pub type EXTI1_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - EXTI0"]
            #[inline(always)]
            pub fn exti0(&self) -> EXTI0_R {
                EXTI0_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - EXTI1"]
            #[inline(always)]
            pub fn exti1(&self) -> EXTI1_R {
                EXTI1_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 6 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline6](itline6) module"]
    pub type ITLINE6 = crate::Reg<u32, _ITLINE6>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE6;
    #[doc = "`read()` method returns [itline6::R](itline6::R) reader structure"]
    impl crate::Readable for ITLINE6 {}
    #[doc = "interrupt line 6 status register"]
    pub mod itline6 {
        #[doc = "Reader of register ITLINE6"]
        pub type R = crate::R<u32, super::ITLINE6>;
        #[doc = "Reader of field `EXTI2`"]
        pub type EXTI2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI3`"]
        pub type EXTI3_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - EXTI2"]
            #[inline(always)]
            pub fn exti2(&self) -> EXTI2_R {
                EXTI2_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - EXTI3"]
            #[inline(always)]
            pub fn exti3(&self) -> EXTI3_R {
                EXTI3_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 7 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline7](itline7) module"]
    pub type ITLINE7 = crate::Reg<u32, _ITLINE7>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE7;
    #[doc = "`read()` method returns [itline7::R](itline7::R) reader structure"]
    impl crate::Readable for ITLINE7 {}
    #[doc = "interrupt line 7 status register"]
    pub mod itline7 {
        #[doc = "Reader of register ITLINE7"]
        pub type R = crate::R<u32, super::ITLINE7>;
        #[doc = "Reader of field `EXTI4`"]
        pub type EXTI4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI5`"]
        pub type EXTI5_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI6`"]
        pub type EXTI6_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI7`"]
        pub type EXTI7_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI8`"]
        pub type EXTI8_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI9`"]
        pub type EXTI9_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI10`"]
        pub type EXTI10_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI11`"]
        pub type EXTI11_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI12`"]
        pub type EXTI12_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI13`"]
        pub type EXTI13_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI14`"]
        pub type EXTI14_R = crate::R<bool, bool>;
        #[doc = "Reader of field `EXTI15`"]
        pub type EXTI15_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - EXTI4"]
            #[inline(always)]
            pub fn exti4(&self) -> EXTI4_R {
                EXTI4_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - EXTI5"]
            #[inline(always)]
            pub fn exti5(&self) -> EXTI5_R {
                EXTI5_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - EXTI6"]
            #[inline(always)]
            pub fn exti6(&self) -> EXTI6_R {
                EXTI6_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - EXTI7"]
            #[inline(always)]
            pub fn exti7(&self) -> EXTI7_R {
                EXTI7_R::new(((self.bits >> 3) & 0x01) != 0)
            }
            #[doc = "Bit 4 - EXTI8"]
            #[inline(always)]
            pub fn exti8(&self) -> EXTI8_R {
                EXTI8_R::new(((self.bits >> 4) & 0x01) != 0)
            }
            #[doc = "Bit 5 - EXTI9"]
            #[inline(always)]
            pub fn exti9(&self) -> EXTI9_R {
                EXTI9_R::new(((self.bits >> 5) & 0x01) != 0)
            }
            #[doc = "Bit 6 - EXTI10"]
            #[inline(always)]
            pub fn exti10(&self) -> EXTI10_R {
                EXTI10_R::new(((self.bits >> 6) & 0x01) != 0)
            }
            #[doc = "Bit 7 - EXTI11"]
            #[inline(always)]
            pub fn exti11(&self) -> EXTI11_R {
                EXTI11_R::new(((self.bits >> 7) & 0x01) != 0)
            }
            #[doc = "Bit 8 - EXTI12"]
            #[inline(always)]
            pub fn exti12(&self) -> EXTI12_R {
                EXTI12_R::new(((self.bits >> 8) & 0x01) != 0)
            }
            #[doc = "Bit 9 - EXTI13"]
            #[inline(always)]
            pub fn exti13(&self) -> EXTI13_R {
                EXTI13_R::new(((self.bits >> 9) & 0x01) != 0)
            }
            #[doc = "Bit 10 - EXTI14"]
            #[inline(always)]
            pub fn exti14(&self) -> EXTI14_R {
                EXTI14_R::new(((self.bits >> 10) & 0x01) != 0)
            }
            #[doc = "Bit 11 - EXTI15"]
            #[inline(always)]
            pub fn exti15(&self) -> EXTI15_R {
                EXTI15_R::new(((self.bits >> 11) & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 9 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline9](itline9) module"]
    pub type ITLINE9 = crate::Reg<u32, _ITLINE9>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE9;
    #[doc = "`read()` method returns [itline9::R](itline9::R) reader structure"]
    impl crate::Readable for ITLINE9 {}
    #[doc = "interrupt line 9 status register"]
    pub mod itline9 {
        #[doc = "Reader of register ITLINE9"]
        pub type R = crate::R<u32, super::ITLINE9>;
        #[doc = "Reader of field `DMA1_CH1`"]
        pub type DMA1_CH1_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - DMA1_CH1"]
            #[inline(always)]
            pub fn dma1_ch1(&self) -> DMA1_CH1_R {
                DMA1_CH1_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 10 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline10](itline10) module"]
    pub type ITLINE10 = crate::Reg<u32, _ITLINE10>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE10;
    #[doc = "`read()` method returns [itline10::R](itline10::R) reader structure"]
    impl crate::Readable for ITLINE10 {}
    #[doc = "interrupt line 10 status register"]
    pub mod itline10 {
        #[doc = "Reader of register ITLINE10"]
        pub type R = crate::R<u32, super::ITLINE10>;
        #[doc = "Reader of field `DMA1_CH2`"]
        pub type DMA1_CH2_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMA1_CH3`"]
        pub type DMA1_CH3_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - DMA1_CH1"]
            #[inline(always)]
            pub fn dma1_ch2(&self) -> DMA1_CH2_R {
                DMA1_CH2_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - DMA1_CH3"]
            #[inline(always)]
            pub fn dma1_ch3(&self) -> DMA1_CH3_R {
                DMA1_CH3_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 11 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline11](itline11) module"]
    pub type ITLINE11 = crate::Reg<u32, _ITLINE11>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE11;
    #[doc = "`read()` method returns [itline11::R](itline11::R) reader structure"]
    impl crate::Readable for ITLINE11 {}
    #[doc = "interrupt line 11 status register"]
    pub mod itline11 {
        #[doc = "Reader of register ITLINE11"]
        pub type R = crate::R<u32, super::ITLINE11>;
        #[doc = "Reader of field `DMAMUX`"]
        pub type DMAMUX_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMA1_CH4`"]
        pub type DMA1_CH4_R = crate::R<bool, bool>;
        #[doc = "Reader of field `DMA1_CH5`"]
        pub type DMA1_CH5_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - DMAMUX"]
            #[inline(always)]
            pub fn dmamux(&self) -> DMAMUX_R {
                DMAMUX_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - DMA1_CH4"]
            #[inline(always)]
            pub fn dma1_ch4(&self) -> DMA1_CH4_R {
                DMA1_CH4_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - DMA1_CH5"]
            #[inline(always)]
            pub fn dma1_ch5(&self) -> DMA1_CH5_R {
                DMA1_CH5_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 12 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline12](itline12) module"]
    pub type ITLINE12 = crate::Reg<u32, _ITLINE12>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE12;
    #[doc = "`read()` method returns [itline12::R](itline12::R) reader structure"]
    impl crate::Readable for ITLINE12 {}
    #[doc = "interrupt line 12 status register"]
    pub mod itline12 {
        #[doc = "Reader of register ITLINE12"]
        pub type R = crate::R<u32, super::ITLINE12>;
        #[doc = "Reader of field `ADC`"]
        pub type ADC_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - ADC"]
            #[inline(always)]
            pub fn adc(&self) -> ADC_R {
                ADC_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 13 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline13](itline13) module"]
    pub type ITLINE13 = crate::Reg<u32, _ITLINE13>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE13;
    #[doc = "`read()` method returns [itline13::R](itline13::R) reader structure"]
    impl crate::Readable for ITLINE13 {}
    #[doc = "interrupt line 13 status register"]
    pub mod itline13 {
        #[doc = "Reader of register ITLINE13"]
        pub type R = crate::R<u32, super::ITLINE13>;
        #[doc = "Reader of field `TIM1_CCU`"]
        pub type TIM1_CCU_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TIM1_TRG`"]
        pub type TIM1_TRG_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TIM1_UPD`"]
        pub type TIM1_UPD_R = crate::R<bool, bool>;
        #[doc = "Reader of field `TIM1_BRK`"]
        pub type TIM1_BRK_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - TIM1_CCU"]
            #[inline(always)]
            pub fn tim1_ccu(&self) -> TIM1_CCU_R {
                TIM1_CCU_R::new((self.bits & 0x01) != 0)
            }
            #[doc = "Bit 1 - TIM1_TRG"]
            #[inline(always)]
            pub fn tim1_trg(&self) -> TIM1_TRG_R {
                TIM1_TRG_R::new(((self.bits >> 1) & 0x01) != 0)
            }
            #[doc = "Bit 2 - TIM1_UPD"]
            #[inline(always)]
            pub fn tim1_upd(&self) -> TIM1_UPD_R {
                TIM1_UPD_R::new(((self.bits >> 2) & 0x01) != 0)
            }
            #[doc = "Bit 3 - TIM1_BRK"]
            #[inline(always)]
            pub fn tim1_brk(&self) -> TIM1_BRK_R {
                TIM1_BRK_R::new(((self.bits >> 3) & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 14 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline14](itline14) module"]
    pub type ITLINE14 = crate::Reg<u32, _ITLINE14>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE14;
    #[doc = "`read()` method returns [itline14::R](itline14::R) reader structure"]
    impl crate::Readable for ITLINE14 {}
    #[doc = "interrupt line 14 status register"]
    pub mod itline14 {
        #[doc = "Reader of register ITLINE14"]
        pub type R = crate::R<u32, super::ITLINE14>;
        #[doc = "Reader of field `TIM1_CC`"]
        pub type TIM1_CC_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - TIM1_CC"]
            #[inline(always)]
            pub fn tim1_cc(&self) -> TIM1_CC_R {
                TIM1_CC_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 15 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline15](itline15) module"]
    pub type ITLINE15 = crate::Reg<u32, _ITLINE15>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE15;
    #[doc = "`read()` method returns [itline15::R](itline15::R) reader structure"]
    impl crate::Readable for ITLINE15 {}
    #[doc = "interrupt line 15 status register"]
    pub mod itline15 {
        #[doc = "Reader of register ITLINE15"]
        pub type R = crate::R<u32, super::ITLINE15>;
        #[doc = "Reader of field `TIM2`"]
        pub type TIM2_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - TIM2"]
            #[inline(always)]
            pub fn tim2(&self) -> TIM2_R {
                TIM2_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 16 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline16](itline16) module"]
    pub type ITLINE16 = crate::Reg<u32, _ITLINE16>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE16;
    #[doc = "`read()` method returns [itline16::R](itline16::R) reader structure"]
    impl crate::Readable for ITLINE16 {}
    #[doc = "interrupt line 16 status register"]
    pub mod itline16 {
        #[doc = "Reader of register ITLINE16"]
        pub type R = crate::R<u32, super::ITLINE16>;
        #[doc = "Reader of field `TIM3`"]
        pub type TIM3_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - TIM3"]
            #[inline(always)]
            pub fn tim3(&self) -> TIM3_R {
                TIM3_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 17 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline17](itline17) module"]
    pub type ITLINE17 = crate::Reg<u32, _ITLINE17>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE17;
    #[doc = "`read()` method returns [itline17::R](itline17::R) reader structure"]
    impl crate::Readable for ITLINE17 {}
    #[doc = "interrupt line 17 status register"]
    pub mod itline17 {
        #[doc = "Reader of register ITLINE17"]
        pub type R = crate::R<u32, super::ITLINE17>;
        #[doc = "Reader of field `LPTIM1`"]
        pub type LPTIM1_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 2 - LPTIM1"]
            #[inline(always)]
            pub fn lptim1(&self) -> LPTIM1_R {
                LPTIM1_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 18 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline18](itline18) module"]
    pub type ITLINE18 = crate::Reg<u32, _ITLINE18>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE18;
    #[doc = "`read()` method returns [itline18::R](itline18::R) reader structure"]
    impl crate::Readable for ITLINE18 {}
    #[doc = "interrupt line 18 status register"]
    pub mod itline18 {
        #[doc = "Reader of register ITLINE18"]
        pub type R = crate::R<u32, super::ITLINE18>;
        #[doc = "Reader of field `LPTIM2`"]
        pub type LPTIM2_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 1 - LPTIM2"]
            #[inline(always)]
            pub fn lptim2(&self) -> LPTIM2_R {
                LPTIM2_R::new(((self.bits >> 1) & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 19 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline19](itline19) module"]
    pub type ITLINE19 = crate::Reg<u32, _ITLINE19>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE19;
    #[doc = "`read()` method returns [itline19::R](itline19::R) reader structure"]
    impl crate::Readable for ITLINE19 {}
    #[doc = "interrupt line 19 status register"]
    pub mod itline19 {
        #[doc = "Reader of register ITLINE19"]
        pub type R = crate::R<u32, super::ITLINE19>;
        #[doc = "Reader of field `TIM14`"]
        pub type TIM14_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - TIM14"]
            #[inline(always)]
            pub fn tim14(&self) -> TIM14_R {
                TIM14_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 21 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline21](itline21) module"]
    pub type ITLINE21 = crate::Reg<u32, _ITLINE21>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE21;
    #[doc = "`read()` method returns [itline21::R](itline21::R) reader structure"]
    impl crate::Readable for ITLINE21 {}
    #[doc = "interrupt line 21 status register"]
    pub mod itline21 {
        #[doc = "Reader of register ITLINE21"]
        pub type R = crate::R<u32, super::ITLINE21>;
        #[doc = "Reader of field `TIM16`"]
        pub type TIM16_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - TIM16"]
            #[inline(always)]
            pub fn tim16(&self) -> TIM16_R {
                TIM16_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 22 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline22](itline22) module"]
    pub type ITLINE22 = crate::Reg<u32, _ITLINE22>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE22;
    #[doc = "`read()` method returns [itline22::R](itline22::R) reader structure"]
    impl crate::Readable for ITLINE22 {}
    #[doc = "interrupt line 22 status register"]
    pub mod itline22 {
        #[doc = "Reader of register ITLINE22"]
        pub type R = crate::R<u32, super::ITLINE22>;
        #[doc = "Reader of field `TIM17`"]
        pub type TIM17_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - TIM17"]
            #[inline(always)]
            pub fn tim17(&self) -> TIM17_R {
                TIM17_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 23 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline23](itline23) module"]
    pub type ITLINE23 = crate::Reg<u32, _ITLINE23>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE23;
    #[doc = "`read()` method returns [itline23::R](itline23::R) reader structure"]
    impl crate::Readable for ITLINE23 {}
    #[doc = "interrupt line 23 status register"]
    pub mod itline23 {
        #[doc = "Reader of register ITLINE23"]
        pub type R = crate::R<u32, super::ITLINE23>;
        #[doc = "Reader of field `I2C1`"]
        pub type I2C1_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - I2C1"]
            #[inline(always)]
            pub fn i2c1(&self) -> I2C1_R {
                I2C1_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 24 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline24](itline24) module"]
    pub type ITLINE24 = crate::Reg<u32, _ITLINE24>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE24;
    #[doc = "`read()` method returns [itline24::R](itline24::R) reader structure"]
    impl crate::Readable for ITLINE24 {}
    #[doc = "interrupt line 24 status register"]
    pub mod itline24 {
        #[doc = "Reader of register ITLINE24"]
        pub type R = crate::R<u32, super::ITLINE24>;
        #[doc = "Reader of field `I2C2`"]
        pub type I2C2_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - I2C2"]
            #[inline(always)]
            pub fn i2c2(&self) -> I2C2_R {
                I2C2_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 25 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline25](itline25) module"]
    pub type ITLINE25 = crate::Reg<u32, _ITLINE25>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE25;
    #[doc = "`read()` method returns [itline25::R](itline25::R) reader structure"]
    impl crate::Readable for ITLINE25 {}
    #[doc = "interrupt line 25 status register"]
    pub mod itline25 {
        #[doc = "Reader of register ITLINE25"]
        pub type R = crate::R<u32, super::ITLINE25>;
        #[doc = "Reader of field `SPI1`"]
        pub type SPI1_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - SPI1"]
            #[inline(always)]
            pub fn spi1(&self) -> SPI1_R {
                SPI1_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 26 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline26](itline26) module"]
    pub type ITLINE26 = crate::Reg<u32, _ITLINE26>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE26;
    #[doc = "`read()` method returns [itline26::R](itline26::R) reader structure"]
    impl crate::Readable for ITLINE26 {}
    #[doc = "interrupt line 26 status register"]
    pub mod itline26 {
        #[doc = "Reader of register ITLINE26"]
        pub type R = crate::R<u32, super::ITLINE26>;
        #[doc = "Reader of field `SPI2`"]
        pub type SPI2_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - SPI2"]
            #[inline(always)]
            pub fn spi2(&self) -> SPI2_R {
                SPI2_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 27 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline27](itline27) module"]
    pub type ITLINE27 = crate::Reg<u32, _ITLINE27>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE27;
    #[doc = "`read()` method returns [itline27::R](itline27::R) reader structure"]
    impl crate::Readable for ITLINE27 {}
    #[doc = "interrupt line 27 status register"]
    pub mod itline27 {
        #[doc = "Reader of register ITLINE27"]
        pub type R = crate::R<u32, super::ITLINE27>;
        #[doc = "Reader of field `USART1`"]
        pub type USART1_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - USART1"]
            #[inline(always)]
            pub fn usart1(&self) -> USART1_R {
                USART1_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 28 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline28](itline28) module"]
    pub type ITLINE28 = crate::Reg<u32, _ITLINE28>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE28;
    #[doc = "`read()` method returns [itline28::R](itline28::R) reader structure"]
    impl crate::Readable for ITLINE28 {}
    #[doc = "interrupt line 28 status register"]
    pub mod itline28 {
        #[doc = "Reader of register ITLINE28"]
        pub type R = crate::R<u32, super::ITLINE28>;
        #[doc = "Reader of field `USART2`"]
        pub type USART2_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 0 - USART2"]
            #[inline(always)]
            pub fn usart2(&self) -> USART2_R {
                USART2_R::new((self.bits & 0x01) != 0)
            }
        }
    }
    #[doc = "interrupt line 29 status register\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [itline29](itline29) module"]
    pub type ITLINE29 = crate::Reg<u32, _ITLINE29>;
    #[allow(missing_docs)]
    #[doc(hidden)]
    pub struct _ITLINE29;
    #[doc = "`read()` method returns [itline29::R](itline29::R) reader structure"]
    impl crate::Readable for ITLINE29 {}
    #[doc = "interrupt line 29 status register"]
    pub mod itline29 {
        #[doc = "Reader of register ITLINE29"]
        pub type R = crate::R<u32, super::ITLINE29>;
        #[doc = "Reader of field `USART5`"]
        pub type USART5_R = crate::R<bool, bool>;
        impl R {
            #[doc = "Bit 2 - USART5"]
            #[inline(always)]
            pub fn usart5(&self) -> USART5_R {
                USART5_R::new(((self.bits >> 2) & 0x01) != 0)
            }
        }
    }
}
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "IWDG"]
    pub IWDG: IWDG,
    #[doc = "WWDG"]
    pub WWDG: WWDG,
    #[doc = "FLASH"]
    pub FLASH: FLASH,
    #[doc = "RCC"]
    pub RCC: RCC,
    #[doc = "PWR"]
    pub PWR: PWR,
    #[doc = "DMA"]
    pub DMA: DMA,
    #[doc = "DMAMUX"]
    pub DMAMUX: DMAMUX,
    #[doc = "GPIOA"]
    pub GPIOA: GPIOA,
    #[doc = "GPIOB"]
    pub GPIOB: GPIOB,
    #[doc = "GPIOC"]
    pub GPIOC: GPIOC,
    #[doc = "GPIOD"]
    pub GPIOD: GPIOD,
    #[doc = "GPIOF"]
    pub GPIOF: GPIOF,
    #[doc = "CRC"]
    pub CRC: CRC,
    #[doc = "EXTI"]
    pub EXTI: EXTI,
    #[doc = "TIM16"]
    pub TIM16: TIM16,
    #[doc = "TIM17"]
    pub TIM17: TIM17,
    #[doc = "USART1"]
    pub USART1: USART1,
    #[doc = "USART2"]
    pub USART2: USART2,
    #[doc = "SPI1"]
    pub SPI1: SPI1,
    #[doc = "SPI2"]
    pub SPI2: SPI2,
    #[doc = "TIM1"]
    pub TIM1: TIM1,
    #[doc = "ADC"]
    pub ADC: ADC,
    #[doc = "SYSCFG"]
    pub SYSCFG: SYSCFG,
    #[doc = "TAMP"]
    pub TAMP: TAMP,
    #[doc = "LPTIM1"]
    pub LPTIM1: LPTIM1,
    #[doc = "LPTIM2"]
    pub LPTIM2: LPTIM2,
    #[doc = "LPUART"]
    pub LPUART: LPUART,
    #[doc = "I2C1"]
    pub I2C1: I2C1,
    #[doc = "I2C2"]
    pub I2C2: I2C2,
    #[doc = "RTC"]
    pub RTC: RTC,
    #[doc = "TIM14"]
    pub TIM14: TIM14,
    #[doc = "TIM2"]
    pub TIM2: TIM2,
    #[doc = "TIM3"]
    pub TIM3: TIM3,
    #[doc = "STK"]
    pub STK: STK,
    #[doc = "VREFBUF"]
    pub VREFBUF: VREFBUF,
    #[doc = "DBG"]
    pub DBG: DBG,
    #[doc = "NVIC_STIR"]
    pub NVIC_STIR: NVIC_STIR,
    #[doc = "SCB_ACTRL"]
    pub SCB_ACTRL: SCB_ACTRL,
    #[doc = "FPU_CPACR"]
    pub FPU_CPACR: FPU_CPACR,
    #[doc = "FPU"]
    pub FPU: FPU,
    #[doc = "SYSCFG_ITLINE"]
    pub SYSCFG_ITLINE: SYSCFG_ITLINE,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        cortex_m::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            IWDG: IWDG {
                _marker: PhantomData,
            },
            WWDG: WWDG {
                _marker: PhantomData,
            },
            FLASH: FLASH {
                _marker: PhantomData,
            },
            RCC: RCC {
                _marker: PhantomData,
            },
            PWR: PWR {
                _marker: PhantomData,
            },
            DMA: DMA {
                _marker: PhantomData,
            },
            DMAMUX: DMAMUX {
                _marker: PhantomData,
            },
            GPIOA: GPIOA {
                _marker: PhantomData,
            },
            GPIOB: GPIOB {
                _marker: PhantomData,
            },
            GPIOC: GPIOC {
                _marker: PhantomData,
            },
            GPIOD: GPIOD {
                _marker: PhantomData,
            },
            GPIOF: GPIOF {
                _marker: PhantomData,
            },
            CRC: CRC {
                _marker: PhantomData,
            },
            EXTI: EXTI {
                _marker: PhantomData,
            },
            TIM16: TIM16 {
                _marker: PhantomData,
            },
            TIM17: TIM17 {
                _marker: PhantomData,
            },
            USART1: USART1 {
                _marker: PhantomData,
            },
            USART2: USART2 {
                _marker: PhantomData,
            },
            SPI1: SPI1 {
                _marker: PhantomData,
            },
            SPI2: SPI2 {
                _marker: PhantomData,
            },
            TIM1: TIM1 {
                _marker: PhantomData,
            },
            ADC: ADC {
                _marker: PhantomData,
            },
            SYSCFG: SYSCFG {
                _marker: PhantomData,
            },
            TAMP: TAMP {
                _marker: PhantomData,
            },
            LPTIM1: LPTIM1 {
                _marker: PhantomData,
            },
            LPTIM2: LPTIM2 {
                _marker: PhantomData,
            },
            LPUART: LPUART {
                _marker: PhantomData,
            },
            I2C1: I2C1 {
                _marker: PhantomData,
            },
            I2C2: I2C2 {
                _marker: PhantomData,
            },
            RTC: RTC {
                _marker: PhantomData,
            },
            TIM14: TIM14 {
                _marker: PhantomData,
            },
            TIM2: TIM2 {
                _marker: PhantomData,
            },
            TIM3: TIM3 {
                _marker: PhantomData,
            },
            STK: STK {
                _marker: PhantomData,
            },
            VREFBUF: VREFBUF {
                _marker: PhantomData,
            },
            DBG: DBG {
                _marker: PhantomData,
            },
            NVIC_STIR: NVIC_STIR {
                _marker: PhantomData,
            },
            SCB_ACTRL: SCB_ACTRL {
                _marker: PhantomData,
            },
            FPU_CPACR: FPU_CPACR {
                _marker: PhantomData,
            },
            FPU: FPU {
                _marker: PhantomData,
            },
            SYSCFG_ITLINE: SYSCFG_ITLINE {
                _marker: PhantomData,
            },
        }
    }
}
